{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GAMEFUSE DOCS SERVER ACCESS","text":"<p>Use the GameFuse Client Library in your game engine of choice to easily add authentication, user data, leaderboards, in game stores and more, all without writing and hosting any servers, or writing any API code. Its never been easier to sync your user data online. GameFuse is always free for hobby and small indie projects.</p> GameFuse C# <p> Add GameFuse to your Unity Project </p> GameFuse Blueprints <p> Add GameFuse to your Unreal BluePrints Project. </p> GameFuse C++ <p> Add GameFuse to your Unreal C++ Project. </p> GameFuse Javascript <p> Add GameFuse to your Playcanvas, Phaser, PixiJs, ImpactJS, Babylon.js or other js frameworks. </p> GameFuse API <p> Build your own client library and directly access the GameFuse API </p> <p> Make calls to GameFuse from 3rd party services using GameFuse Server Keys. Authenticate servers and services rather than signed in users.</p> Server Keys"},{"location":"API%20Full%20REST%20API/class%20methods/","title":"Class Methods (API)","text":"<p>Note</p> <p>This sections does not apply to the API, you may consume the API as you wish and create you own models in your language of choice.</p>"},{"location":"API%20Full%20REST%20API/creating%20store%20items%20on%20the%20web/","title":"Creating Store Items on the Web (API)","text":"<p>See Generic: Creating store items on the web.</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/","title":"Custom User Data (API)","text":"<p>User data can be set in a number of ways.</p> <p>Score can be set with a specific API call to set or relatively add to score. You can also set custom user data where you can assign any key to any value. Whether you use it for a players <code>current_level</code>, <code>color</code>, <code>XP</code> or anything else you can think of, it can be done with the custom data.</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#adding-scores","title":"Adding scores","text":"<p>Alters the amount of scores a users has relatively</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{signedInUserId}/add_score\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#attributes","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#data-payload","title":"Data (payload)","text":"Name Type Required Description <code>score</code> integer Yes The amount of scores positive or negative you want to alter the users current scores by"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's remaining scores and a list of all their purchased store items <code>400</code> text/plain <code>scores</code> attribute missing <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response-object","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>display_email</code> string User's actual email used for notifications and login <code>email</code> string System email: a combination of <code>id</code> and <code>email</code> <code>events_total</code> integer Running API hits for this user <code>events_current_month</code> integer Running API hits for this user for the current month <code>game_sessions_current_month</code> integer unique game session for this user during the current month <code>game_sessions_total</code> integer Unique game session for this user <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"score\": 10}' \\\n    \"https://gamefuse.co/api/v3/users/1/add_score\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"some_username\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 125,\n    \"score\": 10134,\n    \"last_login\": \"2022-01-15T10:30:00Z\",\n    \"number_of_logins\": 34,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 15,\n    \"events_current_month\": 7,\n    \"game_sessions_total\": 51,\n    \"game_sessions_current_month\": 9\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#setting-scores","title":"Setting scores","text":"<p>Set the absolute amount of scores a user has. The scores param will be the user's new scores total.</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#method_1","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{signedInUserId}/set_score\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#data-payload_1","title":"Data (payload)","text":"Name Type Required Description <code>score</code> integer Yes The amount of scores the user will now have"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's remaining scores and a list of all their purchased store items <code>400</code> text/plain <code>scores</code> attribute missing <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>display_email</code> string User's actual email used for notifications and login <code>email</code> string System email: a combination of <code>id</code> and <code>email</code> <code>events_total</code> integer Running API hits for this user <code>events_current_month</code> integer Running API hits for this user for the current month <code>game_sessions_current_month</code> integer unique game session for this user during the current month <code>game_sessions_total</code> integer Unique game session for this user <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#examples_1","title":"Examples","text":""},{"location":"API%20Full%20REST%20API/custom%20user%20data/#curl_1","title":"cURL","text":"<p>Example</p> <pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"score\": 10}' \\\n    \"https://gamefuse.co/api/v3/users/1/set_score\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response_1","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"some_username\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 125,\n    \"score\": 10,\n    \"last_login\": \"2022-01-15T10:30:00Z\",\n    \"number_of_logins\": 34,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 15,\n    \"events_current_month\": 7,\n    \"game_sessions_total\": 51,\n    \"game_sessions_current_month\": 9\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#adding-a-custom-attribute","title":"Adding a custom attribute","text":"<p>Set arbitrary custom attributes. The values of these attributes are in a string format but can be converted into any type by the programming language in use.</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#method_2","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{signedInUserId}/add_game_user_attribute\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#data-payload_2","title":"Data (payload)","text":"Name Type Required Description <code>key</code> string Yes The key of the data to save <code>value</code> string Yes The value of the data to save <code>attributes</code> list No A list of <code>key</code>-<code>value</code> attributes useful for batch updating"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#headers_2","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's attributes <code>400</code> text/plain Missing or invalid parameters. Each <code>attribute</code> needs a <code>key</code> and `value' parameter <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>game_user_attributes</code> list All the users' attributes, i.e.: custom data"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#examples_2","title":"Examples","text":"<p>Example</p> <p>Example</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#curl_2","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"key\": \"some key\",\"value\": \"some value\"}'\n    'https://gamefuse.co/api/v3/users/1/add_game_user_attribute'\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response_2","title":"Response","text":"<pre><code>{\n  \"game_user_attributes\": [\n      {\n          \"id\": 0,\n          \"key\": \"this_key\",\n          \"value\": \"this_value\"\n      },\n      {\n          \"id\": 1,\n          \"key\": \"other_key\",\n          \"value\": \"other_value\"\n      },\n      {\n          \"id\": 2,\n          \"key\": \"some key\",\n          \"value\": \"some value\"\n      }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#curl_3","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"key\": \"some key\",\"value\": \"some value\", \"attributes\": [{\"key\":\"k0\",\"value\":\"v0\"},{\"key\":\"k1\",\"value\":\"v1\"}]}' \\\n    'https://gamefuse.co/api/v3/users/1/add_game_user_attribute'\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response_3","title":"Response","text":"<pre><code>{\n  \"game_user_attributes\": [\n      {\n          \"id\": 0,\n          \"key\": \"this_key\",\n          \"value\": \"this_value\"\n      },\n      {\n          \"id\": 1,\n          \"key\": \"other_key\",\n          \"value\": \"other_value\"\n      },\n      {\n          \"id\": 2,\n          \"key\": \"some key\",\n          \"value\": \"some value\"\n      },\n      {\n          \"id\": 3,\n          \"key\": \"k0\",\n          \"value\": \"v0\"\n      },\n      {\n          \"id\": 4,\n          \"key\": \"k1\",\n          \"value\": \"v1\"\n      }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#removing-a-custom-attribute","title":"Removing a custom attribute","text":"<p>Remove an arbitrary custom attribute.</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#method_3","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/users/{signedInUserId}/remove_game_user_attribute?game_user_attribute_key={gameUserAttributeKey}\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#attributes_3","title":"Attributes","text":"Name Type Required Description <code>gameUserAttributeKey</code> string Yes The key of the data to remove <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#data-payload_3","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#headers_3","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's attributes <code>400</code> text/plain User does not have an item with the specified <code>key</code> <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response-object_3","title":"Response object","text":"Attribute name Type Description <code>game_user_attributes</code> list All the users' attributes, i.e.: custom data"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#examples_3","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#curl_4","title":"cURL","text":"<pre><code>curl --request DELETE \\\n    --header \"authentication-token: abc123\" \\\n    'https://gamefuse.co/api/v3/users/1/remove_game_user_attribute?game_user_attribute_key=some%20key'\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#example-response","title":"Example response","text":"<pre><code>{\n  \"game_user_attributes\": [\n      {\n          \"id\": 0,\n          \"key\": \"this_key\",\n          \"value\": \"this_value\"\n      },\n      {\n          \"id\": 1,\n          \"key\": \"other_key\",\n          \"value\": \"other_value\"\n      }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#remove-multiple-custom-attributes","title":"Remove multiple custom attributes.","text":""},{"location":"API%20Full%20REST%20API/custom%20user%20data/#method_4","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/users/{signedInUserId}/remove_game_user_attributes?game_user_attribute_keys={gameUserAttributeKeys} \n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#attributes_4","title":"Attributes","text":"Name Type Required Description <code>gameUserAttributeKeys</code> array Yes A JSON array of strings, each a key to remove <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#data-payload_4","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#headers_4","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#responses_4","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's attributes <code>400</code> text/plain User does not have an item with the specified <code>key</code> <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response-object_4","title":"Response object","text":"Attribute name Type Description <code>game_user_attributes</code> list All the users' attributes, i.e.: custom data"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#examples_4","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#curl_5","title":"cURL","text":"<pre><code>curl --request DELETE \\\n    --header \"authentication-token: abc123\" \\\n    --get \\\n    'https://gamefuse.co/api/v3/users/1/remove_game_user_attributes?game_user_attribute_keys[]=type&amp;game_user_attribute_keys[]=color'\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#example-response_1","title":"Example response","text":"<pre><code>{\n  \"game_user_attributes\": [\n      {\n          \"id\": 2,\n          \"key\": \"remaining_key\",\n          \"value\": \"remaining_value\"\n      }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#get-all-custom-attributes","title":"Get all custom attributes","text":"<p>Get all custom attributes of a user.</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#method_5","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/users/{signedInUserId}/game_user_attributes\n</code></pre> <p>NOTE</p> <pre><code>Other users can be queried with this route\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#attributes_5","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#data-payload_5","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#headers_5","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#responses_5","title":"Responses","text":"HTTP status code content-type Description `200 application/json Object containing the user's attributes `500 text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#response-object_5","title":"Response object","text":"Attribute name Type Description <code>game_user_attributes</code> list All the users' attributes, i.e.: custom data"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#examples_5","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#curl_6","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    'https://gamefuse.co/api/v3/users/1/game_user_attributes'\n</code></pre>"},{"location":"API%20Full%20REST%20API/custom%20user%20data/#example-response_2","title":"Example response","text":"<pre><code>{\n  \"game_user_attributes\": [\n      {\n          \"id\": 0,\n          \"key\": \"this_key\",\n          \"value\": \"this_value\"\n      },\n      {\n          \"id\": 1,\n          \"key\": \"other_key\",\n          \"value\": \"other_value\"\n      },\n      {\n          \"id\": 2,\n          \"key\": \"some key\",\n          \"value\": \"some value\"\n      }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/forgot%20password/","title":"Forgot Password (API)","text":"<p>You can implement this simple method in your app and we will handle all the emails and password resets on our end.</p> <p>Once you run this function, our system will send an email to that user if it exists. The email will be branded like your app: it will have your app's name, image logo and color so it will look cohesive. The sender's email is even masked with your app's name.</p> <p>The user will then reset their password online and then will be instructed that they can login into your app.</p>"},{"location":"API%20Full%20REST%20API/forgot%20password/#password-reset","title":"Password reset","text":""},{"location":"API%20Full%20REST%20API/forgot%20password/#scope","title":"Scope","text":"<p>Resets a user's password.</p>"},{"location":"API%20Full%20REST%20API/forgot%20password/#method","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/games/{gameId}/forget_password?email={email}&amp;game_id={gameId}&amp;game_token={gameToken}\n</code></pre>"},{"location":"API%20Full%20REST%20API/forgot%20password/#attributes","title":"Attributes","text":"Name Type Required Description <code>gameId</code> integer Yes Found on your GameFuse.co dashboard <code>gameToken</code> string Yes API token found on your GameFuse.co dashboard <code>email</code> string Yes Email address of user to send the forgot password form to"},{"location":"API%20Full%20REST%20API/forgot%20password/#data-payload","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/forgot%20password/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/forgot%20password/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the response and a message <code>403</code> text/plain Invalid Email Address <code>404</code> text/plain No user found with specified <code>email</code>, or <code>gameId</code> or <code>gameToken</code> incorrect <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/forgot%20password/#response-object","title":"Response object","text":"Attribute name Type Description <code>mailer_response</code> string Details of the emailer <code>message</code> string Message confirming email was sent or with information that the user does not exists"},{"location":"API%20Full%20REST%20API/forgot%20password/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/forgot%20password/#curl","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/games/1/forget_password?email=john.doe@example.com&amp;game_id=1&amp;game_token=abc123\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/forgot%20password/#response","title":"Response","text":"<pre><code>{\n    \"mailer_response\": null,\n    \"message\": \"Email sent to john.doe@example.com\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/forgot%20password/#user-experience","title":"User Experience","text":"<p>See Generic: Forgot password - User experience.</p>"},{"location":"API%20Full%20REST%20API/friends/","title":"Friendship API","text":"<p>The Friendship API allows users to create, manage, and remove friendships between players in the GameFuse platform. This includes sending friend requests, accepting or rejecting them, unfriending players, and viewing friendship data.</p> <p>Note</p> <p>This feature is not supported in the js client library yet.</p>"},{"location":"API%20Full%20REST%20API/friends/#sending-a-friend-request","title":"Sending a Friend Request","text":""},{"location":"API%20Full%20REST%20API/friends/#scope","title":"Scope","text":"<p>Create a new friendship request by providing the <code>username</code> of the user you want to add as a friend.</p>"},{"location":"API%20Full%20REST%20API/friends/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/friendships\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes","title":"Attributes","text":"Name Type Required Description <code>username</code> string Yes The username of the player you want to send a friend request to."},{"location":"API%20Full%20REST%20API/friends/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/friends/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Friendship request sent successfully. <code>422</code> text/plain Username is missing or user does not exist. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object","title":"Response object","text":"Attribute name Type Description <code>message</code> string Success message confirming the friend request. <code>friendship_id</code> integer The ID of the created friendship request."},{"location":"API%20Full%20REST%20API/friends/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"username\": \"friend_username\"}' \\\n    \"https://gamefuse.co/api/v3/friendships\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response","title":"Response","text":"<pre><code>{\n  \"message\": \"Friend request sent to friend_username\",\n  \"friendship_id\": 123\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#accept-or-decline-a-friend-request","title":"Accept or Decline a Friend Request","text":""},{"location":"API%20Full%20REST%20API/friends/#scope_1","title":"Scope","text":"<p>Accept or decline a pending friendship request by specifying the <code>status</code> parameter.</p>"},{"location":"API%20Full%20REST%20API/friends/#method_1","title":"Method","text":"<p>PUT</p> <pre><code>/api/v3/friendships/{id}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The friendship request ID. <code>status</code> string Yes The new status of the friendship: <code>accepted</code> or <code>declined</code>."},{"location":"API%20Full%20REST%20API/friends/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/friends/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Success message indicating the new status of the friendship. <code>422</code> text/plain Invalid status or unauthorized to accept this friendship. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>message</code> string Message confirming the friendship status update."},{"location":"API%20Full%20REST%20API/friends/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl_1","title":"cURL","text":"<pre><code>curl --request PUT \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"status\": \"accepted\"}' \\\n    \"https://gamefuse.co/api/v3/friendships/1\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response_1","title":"Response","text":"<pre><code>{\n  \"message\": \"You have successfully accepted this friend request\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#cancel-a-friend-request","title":"Cancel a Friend Request","text":""},{"location":"API%20Full%20REST%20API/friends/#scope_2","title":"Scope","text":"<p>Cancel a pending friend request that was previously sent.</p>"},{"location":"API%20Full%20REST%20API/friends/#method_2","title":"Method","text":"<p>DELETE</p> <pre><code>/api/v3/friendships/{id}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The friendship request ID."},{"location":"API%20Full%20REST%20API/friends/#headers_2","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/friends/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Success message indicating the friend request has been cancelled. <code>422</code> text/plain Unauthorized or invalid friendship ID. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>message</code> string Message confirming the cancellation of the friend request."},{"location":"API%20Full%20REST%20API/friends/#examples_2","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl_2","title":"cURL","text":"<pre><code>curl --request DELETE \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/friendships/1\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response_2","title":"Response","text":"<pre><code>{\n  \"message\": \"Friend request destroyed successfully\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#unfriend-a-player","title":"Unfriend a Player","text":""},{"location":"API%20Full%20REST%20API/friends/#scope_3","title":"Scope","text":"<p>Remove an accepted friend from the current user's friend list.</p>"},{"location":"API%20Full%20REST%20API/friends/#method_3","title":"Method","text":"<p>DELETE</p> <pre><code>/api/v3/unfriend?user_id={friendUserId}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes_3","title":"Attributes","text":"Name Type Required Description <code>user_id</code> integer Yes The ID of the user you want to unfriend."},{"location":"API%20Full%20REST%20API/friends/#headers_3","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/friends/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Success message indicating the user has been unfriended. <code>422</code> text/plain Friendship does not exist or invalid user ID. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object_3","title":"Response object","text":"Attribute name Type Description <code>message</code> string Message confirming the user was unfriended."},{"location":"API%20Full%20REST%20API/friends/#examples_3","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl_3","title":"cURL","text":"<pre><code>curl --request DELETE \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/unfriend?user_id=1\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response_3","title":"Response","text":"<pre><code>{\n  \"message\": \"User has been unfriended successfully\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#get-friendship-data","title":"Get Friendship Data","text":""},{"location":"API%20Full%20REST%20API/friends/#scope_4","title":"Scope","text":"<p>Retrieve the list of friends, outgoing, and incoming friendship requests for the current user.</p>"},{"location":"API%20Full%20REST%20API/friends/#method_4","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/friendships\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes_4","title":"Attributes","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/friends/#headers_4","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/friends/#responses_4","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing friends, outgoing requests, and incoming friend requests. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object_4","title":"Response object","text":"Attribute name Type Description <code>friends</code> array List of friends (basic user info). <code>outgoing_friend_requests</code> array List of friend requests sent by the user. <code>incoming_friend_requests</code> array List of friend requests received by the user."},{"location":"API%20Full%20REST%20API/friends/#examples_4","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl_4","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/friendships\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response_4","title":"Response","text":"<pre><code>{\n  \"friends\": [\n    {\n      \"id\": 1,\n      \"username\": \"john_doe\",\n      \"email\": \"john.doe@example.com\",\n      \"display_email\": \"john.doe@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    }\n  ],\n  \"outgoing_friend_requests\": [\n    {\n      \"id\": 2,\n      \"username\": \"friend_username\",\n      \"email\": \"friend@example.com\",\n      \"display_email\": \"friend@example.com\",\n      \"credits\": 100,\n      \"score\": 900,\n      \"friendship_id\": 123,\n      \"requested_at\": \"2024-09-20T12:34:56Z\"\n    }\n  ],\n  \"incoming_friend_requests\": [\n    {\n      \"id\": 3,\n      \"username\": \"another_friend\",\n      \"email\": \"another_friend@example.com\",\n      \"display_email\": \"another_friend@example.com\",\n      \"credits\": 200,\n      \"score\": 1300,\n      \"friendship_id\": 124,\n      \"requested_at\": \"2024-09-19T11:22:33Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#retrieve-friends-list","title":"Retrieve Friends List","text":""},{"location":"API%20Full%20REST%20API/friends/#scope_5","title":"Scope","text":"<p>Retrieve the list of all accepted friends for the current user.</p>"},{"location":"API%20Full%20REST%20API/friends/#method_5","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/friends/:id\n</code></pre> <p>NOTE</p> <pre><code>Other users in the same game can be queried with this route.\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes_5","title":"Attributes","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/friends/#headers_5","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/friends/#responses_5","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Array of friends with basic info. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object_5","title":"Response object","text":"Attribute name Type Description <code>friends</code> array List of friends (basic user info)."},{"location":"API%20Full%20REST%20API/friends/#examples_5","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl_5","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/friends\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response_5","title":"Response","text":"<pre><code>{\n  \"friends\": [\n    {\n      \"id\": 1,\n      \"username\": \"john_doe\",\n      \"email\": \"john.doe@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#retrieve-outgoing-friend-requests","title":"Retrieve Outgoing Friend Requests","text":""},{"location":"API%20Full%20REST%20API/friends/#scope_6","title":"Scope","text":"<p>Retrieve a list of all pending friend requests sent by the current user.</p>"},{"location":"API%20Full%20REST%20API/friends/#method_6","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/outgoing_friend_requests\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes_6","title":"Attributes","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/friends/#headers_6","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/friends/#responses_6","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Array of outgoing friend requests. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object_6","title":"Response object","text":"Attribute name Type Description <code>outgoing_friend_requests</code> array List of friend requests sent by the user."},{"location":"API%20Full%20REST%20API/friends/#examples_6","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl_6","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/outgoing_friend_requests\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response_6","title":"Response","text":"<pre><code>{\n  \"outgoing_friend_requests\": [\n    {\n      \"id\": 2,\n      \"username\": \"friend_username\",\n      \"email\": \"friend@example.com\",\n      \"credits\": 100,\n      \"score\": 900,\n      \"friendship_id\": 123,\n      \"requested_at\": \"2024-09-20T12:34:56Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#retrieve-incoming-friend-requests","title":"Retrieve Incoming Friend Requests","text":""},{"location":"API%20Full%20REST%20API/friends/#scope_7","title":"Scope","text":"<p>Retrieve a list of all pending friend requests received by the current user.</p>"},{"location":"API%20Full%20REST%20API/friends/#method_7","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/incoming_friend_requests\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#attributes_7","title":"Attributes","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/friends/#headers_7","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/friends/#responses_7","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Array of incoming friend requests. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/friends/#response-object_7","title":"Response object","text":"Attribute name Type Description <code>incoming_friend_requests</code> array List of friend requests received by the user."},{"location":"API%20Full%20REST%20API/friends/#examples_7","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/friends/#curl_7","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/incoming_friend_requests\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/friends/#response_7","title":"Response","text":"<pre><code>{\n  \"incoming_friend_requests\": [\n    {\n      \"id\": 3,\n      \"username\": \"another_friend\",\n      \"email\": \"another_friend@example.com\",\n      \"credits\": 200,\n      \"score\": 1300,\n      \"friendship_id\": 124,\n      \"requested_at\": \"2024-09-19T11:22:33Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/","title":"Game Connection and Variables (API)","text":"<p>Once an account is created, you can verify your game before using other GameFuse enpoints.</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#gamefuse-verification","title":"GameFuse verification","text":""},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#scope","title":"Scope","text":"<p>Verify your game at GameFuse.</p> <p>Note</p> <p>This is not a required step but it can be useful to verify a connection before logging in specific users.</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#method","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/games/verify?game_id={gameId}&amp;game_token={gameToken}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#attributes","title":"Attributes","text":"Name Type Required Description <code>gameId</code> integer Yes Value found on your GameFuse.co dashboard <code>gameToken</code> string Yes API token found on your GameFuse.co dashboard"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#data-payload","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's game information <code>401</code> text/plain Failed to verify game <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#response-object","title":"Response object","text":"Attribute name Type Description <code>description</code> string Game description <code>game_variables</code> list All the games' attributes <code>id</code> integer Unique database ID of the game <code>name</code> string Name of the game <code>token</code> string API token of the game"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#curl","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    'https://gamefuse.co/api/v3/games/verify?game_id=1&amp;game_token=cde456'\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#response","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"name\": \"my game\",\n    \"token\": \"cde456\",\n    \"description\": \"This is a new game\",\n    \"game_variables\": [\n    {\n        \"id\": 0,\n        \"key\": \"this_key\",\n        \"value\": \"this_value\"\n    },\n    {\n        \"id\": 1,\n        \"key\": \"other_key\",\n        \"value\": \"other_value\"\n    },\n    ...\n    ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#game-variables","title":"Game Variables","text":""},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#scope_1","title":"Scope","text":"<p>Retrieve game data.</p> <p>Important</p> <p>The returned data is the same as the one in the verification endpoint.</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#method_1","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/games/fetch_game_variables?game_id={gameId}&amp;game_token={gameToken}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>gameId</code> integer Yes Value found on your GameFuse.co dashboard <code>gameToken</code> string Yes API token found on your GameFuse.co dashboard"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#data-payload_1","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's game information <code>401</code> text/plain Failed to fetch game variables. Check your <code>gameToken</code> and <code>gameId</code> <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>description</code> string Game description <code>game_variables</code> list All the games' attributes <code>id</code> integer Unique database ID of the game <code>name</code> string Name of the game <code>token</code> string API token of the game"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#curl_1","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    'https://gamefuse.co/api/v3/games/fetch_game_variables?game_id=1&amp;game_token=cde456'\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#response_1","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"name\": \"my game\",\n    \"token\": \"abc123\",\n    \"description\": \"This is a new game\",\n    \"game_variables\": [\n    {\n        \"id\": 0,\n        \"key\": \"this_key\",\n        \"value\": \"this_value\"\n    },\n    {\n        \"id\": 1,\n        \"key\": \"other_key\",\n        \"value\": \"other_value\"\n    },\n    ...\n    ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#get-server-time","title":"Get Server Time","text":""},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#scope_2","title":"Scope","text":"<p>Retrieve the current server time in UTC. This endpoint can be used to synchronize client-side operations with the server's time.</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#method_2","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/util/get_server_time\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Server time retrieved successfully. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>server_time</code> string The current server time in UTC."},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#examples_2","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#curl_2","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/util/get_server_time\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20connection%20and%20variables/#response_2","title":"Response","text":"<pre><code>{\n    \"server_time\": \"2024-09-20T10:00:00Z\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/","title":"Game Round API","text":"<p>The Game Round API allows users to manage game rounds in the GameFuse platform. This includes creating game rounds, updating them, viewing a user's game rounds, and deleting game rounds. Game rounds can also be part of multiplayer rounds.</p> <p>Note</p> <p>This feature is not supported in the js client library yet. </p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#create-a-game-round","title":"Create a Game Round","text":""},{"location":"API%20Full%20REST%20API/game%20rounds/#scope","title":"Scope","text":"<p>Create a new game round for a user. Game rounds can either be individual or part of a multiplayer round.  Multiplayer game rounds are all connected to the first one submitted.  Whichever user submits the first multiplayer round that the others connect to is the \"master\" of the general multiplayer round.  The master user can modify any of the connected multiplayer rounds.  Place is automatically generated for multiplayer rounds based on \"score\".  When getting game round info, multiplayer rounds will come with an additional payload called \"rankings\", which is sorting the individual round by score. Updates to already created rounds are supported and rankings will be updated for all when any one object in the connected multiplayer round is updated.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#method","title":"Method","text":"<p>POST</p> <p>/api/v3/game_rounds</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#attributes","title":"Attributes","text":"Name Type Required Description <code>game_user_id</code> integer Yes ID of the user to whom the game round belongs. <code>game_type</code> string Yes Type of game being played. <code>start_time</code> string No Start time of the game round. <code>end_time</code> string No End time of the game round. <code>score</code> integer No The score achieved in the game round. <code>place</code> integer No The place the user finished in during the game round (1st, 2nd, etc.). <code>multiplayer_game_round_id</code> integer No ID of the associated multiplayer game round if applicable. <code>metadata</code> object No Additional metadata related to the game round. <code>multiplayer</code> boolean No If <code>true</code>, create or join a multiplayer round."},{"location":"API%20Full%20REST%20API/game%20rounds/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/game%20rounds/#responses","title":"Responses","text":"HTTP status code content-type Description <code>201</code> application/json Game round created successfully. <code>422</code> text/plain Validation errors or missing parameters. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/game%20rounds/#response-object","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The ID of the created game round. <code>game_user_id</code> integer The ID of the user to whom the game round belongs. <code>start_time</code> string The start time of the game round. <code>end_time</code> string The end time of the game round. <code>score</code> integer The score achieved in the game round. <code>place</code> integer The place finished in the game round. <code>game_type</code> string The type of game played. <code>metadata</code> object Additional metadata related to the game round."},{"location":"API%20Full%20REST%20API/game%20rounds/#example-1-creating-a-non-multiplayer-game","title":"Example 1: Creating a Non-Multiplayer Game","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#request","title":"Request","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"game_user_id\": 1, \"start_time\": \"2024-09-20T10:00:00Z\", \"end_time\": \"2024-09-20T10:30:00Z\", \"score\": 1000, \"place\": 1, \"game_type\": \"solo_adventure\", \"metadata\": {\"difficulty\": \"Medium\"}}' \\\n    \"https://gamefuse.co/api/v3/game_rounds\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response","title":"Response","text":"<pre><code>{\n    \"id\": 101,\n    \"game_user_id\": 1,\n    \"start_time\": \"2024-09-20T10:00:00Z\",\n    \"end_time\": \"2024-09-20T10:30:00Z\",\n    \"score\": 1000,\n    \"place\": 1,\n    \"game_type\": \"solo_adventure\",\n    \"metadata\": {\n        \"difficulty\": \"Medium\"\n    }\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#example-2-creating-a-multiplayer-game-then-adding-more-game-rounds","title":"Example 2: Creating a Multiplayer Game, then Adding More Game Rounds","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#step-1-create-the-first-multiplayer-game-round","title":"Step 1: Create the First Multiplayer Game Round","text":"<p>This creates a multiplayer game round if one does not already exist.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#request_1","title":"Request","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"game_user_id\": 1, \"start_time\": \"2024-09-20T10:00:00Z\", \"end_time\": \"2024-09-20T10:30:00Z\", \"score\": 1200, \"place\": 1, \"game_type\": \"multiplayer_battle\", \"metadata\": {\"difficulty\": \"Hard\"}, \"multiplayer\": true}' \\\n    \"https://gamefuse.co/api/v3/game_rounds\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response_1","title":"Response","text":"<pre><code>{\n    \"id\": 102,\n    \"game_user_id\": 1,\n    \"start_time\": \"2024-09-20T10:00:00Z\",\n    \"end_time\": \"2024-09-20T10:30:00Z\",\n    \"score\": 1200,\n    \"place\": 1,\n    \"game_type\": \"multiplayer_battle\",\n    \"multiplayer_game_round_id\": 201,\n    \"metadata\": {\n        \"difficulty\": \"Hard\"\n    }\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#step-2-add-additional-game-rounds-to-the-multiplayer-game","title":"Step 2: Add Additional Game Rounds to the Multiplayer Game","text":"<p>Now that the multiplayer game round has been created (ID: 201), additional rounds can be added by referencing the <code>multiplayer_game_round_id</code>.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#request_2","title":"Request","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"game_user_id\": 2, \"start_time\": \"2024-09-20T10:30:00Z\", \"end_time\": \"2024-09-20T11:00:00Z\", \"score\": 1100, \"place\": 2, \"game_type\": \"multiplayer_battle\", \"metadata\": {\"difficulty\": \"Hard\"}, \"multiplayer_game_round_id\": 201}' \\\n    \"https://gamefuse.co/api/v3/game_rounds\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response_2","title":"Response","text":"<pre><code>{\n    \"id\": 103,\n    \"game_user_id\": 2,\n    \"start_time\": \"2024-09-20T10:30:00Z\",\n    \"end_time\": \"2024-09-20T11:00:00Z\",\n    \"score\": 1100,\n    \"place\": 2,\n    \"game_type\": \"multiplayer_battle\",\n    \"multiplayer_game_round_id\": 201,\n    \"metadata\": {\n        \"difficulty\": \"Hard\"\n    }\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#multiplayer-game-round-response-example","title":"Multiplayer Game Round Response Example","text":"<p>Example</p> <p>When querying a multiplayer game round, the response includes the rankings of all participants.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#scope_1","title":"Scope","text":"<p>Retrieve details about a multiplayer game round, including rankings.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#method_1","title":"Method","text":"<p>GET</p> <p>/api/v3/game_rounds/{id}</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#example-request","title":"Example Request","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/game_rounds/102\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#example-response","title":"Example Response","text":"<pre><code>{\n    \"id\": 102,\n    \"game_user_id\": 1,\n    \"start_time\": \"2024-09-20T10:00:00Z\",\n    \"end_time\": \"2024-09-20T10:30:00Z\",\n    \"score\": 1200,\n    \"place\": 1,\n    \"game_type\": \"multiplayer_battle\",\n    \"multiplayer_game_round_id\": 201,\n    \"metadata\": {\n        \"difficulty\": \"Hard\"\n    },\n    \"rankings\": [\n        {\n        \"place\": 1,\n        \"score\": 1200,\n        \"start_time\": \"2024-09-20T10:00:00Z\",\n        \"end_time\": \"2024-09-20T10:30:00Z\",\n        \"user\": {\n            \"id\": 1,\n            \"username\": \"player_one\",\n            \"email\": \"player_one@example.com\",\n            \"display_email\": \"player_one@example.com\",\n            \"credits\": 100,\n            \"score\": 1500\n        }\n        },\n        {\n        \"place\": 2,\n        \"score\": 1100,\n        \"start_time\": \"2024-09-20T10:30:00Z\",\n        \"end_time\": \"2024-09-20T11:00:00Z\",\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"player_two\",\n            \"email\": \"player_two@example.com\",\n            \"display_email\": \"player_two@example.com\",\n            \"credits\": 120,\n            \"score\": 1400\n        }\n        }\n    ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#show-a-game-round","title":"Show a Game Round","text":""},{"location":"API%20Full%20REST%20API/game%20rounds/#scope_2","title":"Scope","text":"<p>Retrieve details about a specific game round.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#method_2","title":"Method","text":"<p>GET</p> <p>/api/v3/game_rounds/{id}</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/game%20rounds/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Game round details retrieved successfully. <code>401</code> text/plain Unauthorized: You cannot view game rounds from another game. <code>404</code> text/plain Game round not found. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/game%20rounds/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The ID of the game round. <code>game_user_id</code> integer The ID of the user to whom the game round belongs. <code>start_time</code> string The start time of the game round. <code>end_time</code> string The end time of the game round. <code>score</code> integer The score achieved in the game round. <code>place</code> integer The place finished in the game round. <code>game_type</code> string The type of game played. <code>multiplayer_game_round_id</code> integer ID of the associated multiplayer game round, if applicable. <code>metadata</code> object Additional metadata related to the game round."},{"location":"API%20Full%20REST%20API/game%20rounds/#example","title":"Example","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#curl","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/game_rounds/101\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response_3","title":"Response","text":"<pre><code>{\n    \"id\": 101,\n    \"game_user_id\": 1,\n    \"start_time\": \"2024-09-20T10:00:00Z\",\n    \"end_time\": \"2024-09-20T11:00:00Z\",\n    \"score\": 1500,\n    \"place\": 1,\n    \"game_type\": \"battle\",\n    \"metadata\": {\n        \"level\": \"Hard\"\n    },\n    \"multiplayer_game_round_id\": null\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#multiplayer-example","title":"Multiplayer Example","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#curl_1","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/game_rounds/971\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response_4","title":"Response","text":"<pre><code>{\n    \"id\"=&gt;971,\n    \"game_id\"=&gt;12892,\n    \"game_user_id\"=&gt;30342,\n    \"multiplayer_game_round_id\"=&gt;275,\n    \"game_type\"=&gt;\"Fingerlime\",\n    \"place\"=&gt;1,\n    \"score\"=&gt;100.0,\n    \"start_time\"=&gt;\"2025-05-15T11:43:28.599-04:00\",\n    \"end_time\"=&gt;\"2025-05-15T11:49:28.599-04:00\",\n    \"metadata\"=&gt;nil,\n    \"created_at\"=&gt;\"2025-05-15T11:53:28.602-04:00\",\n    \"updated_at\"=&gt;\"2025-05-15T11:53:28.602-04:00\",\n    \"rankings\"=&gt;[\n        {\n        \"id\"=&gt;971,\n        \"place\"=&gt;1,\n        \"score\"=&gt;100.0,\n        \"start_time\"=&gt;\"2025-05-15T11:43:28.599-04:00\",\n        \"end_time\"=&gt;\"2025-05-15T11:49:28.599-04:00\",\n        \"user\"=&gt;{\n            \"id\"=&gt;30342,\n            \"username\"=&gt;\"Judy Kovacek\",\n            \"credits\"=&gt;0,\n            \"score\"=&gt;0,\n            \"email\"=&gt;\"truman@schneider.io\",\n            \"is_new_user\"=&gt;true\n            }\n        },\n        {\n        \"id\"=&gt;972,\n        \"place\"=&gt;2,\n        \"score\"=&gt;200.0,\n        \"start_time\"=&gt;\"2025-05-15T11:43:28.622-04:00\",\n        \"end_time\"=&gt;\"2025-05-15T11:49:28.622-04:00\",\n        \"user\"=&gt;{\n            \"id\"=&gt;30343,\n            \"username\"=&gt;\"Arnetta Schmeler\",\n            \"credits\"=&gt;0,\n            \"score\"=&gt;0,\n            \"email\"=&gt;\"nicola@dare.net\",\n            \"is_new_user\"=&gt;true\n            }\n        },\n        {\n        \"id\"=&gt;973,\n        \"place\"=&gt;3,\n        \"score\"=&gt;300.0,\n        \"start_time\"=&gt;\"2025-05-15T11:43:28.647-04:00\",\n        \"end_time\"=&gt;\"2025-05-15T11:49:28.647-04:00\",\n        \"user\"=&gt;{\n            \"id\"=&gt;30344,\n            \"username\"=&gt;\"Lorene Dickinson\",\n            \"credits\"=&gt;0,\n            \"score\"=&gt;0,\n            \"email\"=&gt;\"allan.oconner@keebler.biz\",\n            \"is_new_user\"=&gt;true\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#update-a-game-round","title":"Update a Game Round","text":""},{"location":"API%20Full%20REST%20API/game%20rounds/#scope_3","title":"Scope","text":"<p>Update an existing game round for the current user.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#method_3","title":"Method","text":"<p>PUT</p> <p>/api/v3/game_rounds/{id}</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes ID of the game round to update. <code>start_time</code> string No Start time of the game round. <code>end_time</code> string No End time of the game round. <code>score</code> integer No The score achieved in the game round. <code>place</code> integer No The place the user finished in during the game round. <code>game_type</code> string No Type of game being played. <code>metadata</code> object No Additional metadata related to the game round."},{"location":"API%20Full%20REST%20API/game%20rounds/#headers_2","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/game%20rounds/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Game round updated successfully. <code>401</code> text/plain Unauthorized: Only the owner can update the game round. <code>422</code> text/plain Validation errors or missing parameters. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/game%20rounds/#response-object_2","title":"Response object","text":"<p>The response will return the updated game round data, similar to the create response.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#curl_2","title":"cURL","text":"<pre><code>curl --request PUT \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"score\": 1600, \"place\": 2}' \\\n    \"https://gamefuse.co/api/v3/game_rounds/101\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response_5","title":"Response","text":"<pre><code>{\n    \"id\": 101,\n    \"game_user_id\": 1,\n    \"start_time\": \"2024-09-20T10:00:00Z\",\n    \"end_time\": \"2024-09-20T11:00:00Z\",\n    \"score\": 1600,\n    \"place\": 2,\n    \"game_type\": \"battle\",\n    \"metadata\": {\n        \"level\": \"Hard\"\n    }\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#view-a-users-game-rounds","title":"View a User's Game Rounds","text":""},{"location":"API%20Full%20REST%20API/game%20rounds/#scope_4","title":"Scope","text":"<p>Retrieve a list of game rounds for a specific user. Multiplayer game rounds retrieved in bulk will not have rankings attached.  To retrieve a game rounds rankings, a seperate call must be made to the #show route</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#method_4","title":"Method","text":"<p>GET</p> <p>/api/v3/game_rounds?user_id={user_id}</p> <p>NOTE</p> <pre><code>Other users in the same game can be queried with this route.\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>user_id</code> integer Yes ID of the user whose game rounds to retrieve. <code>page</code> integer No Page number (default 1) <code>per_page</code> integer No Number of game rounds returned in a single query (default and max 100)"},{"location":"API%20Full%20REST%20API/game%20rounds/#headers_3","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/game%20rounds/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json List of game rounds for the user. <code>401</code> text/plain Unauthorized: You cannot view another game's data. <code>422</code> text/plain Missing user ID parameter. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/game%20rounds/#response-object_3","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The ID of the game round. <code>game_user_id</code> integer The ID of the user to whom the game round belongs. <code>start_time</code> string The start time of the game round. <code>end_time</code> string The end time of the game round. <code>score</code> integer The score achieved in the game round. <code>place</code> integer The place finished in the game round. <code>game_type</code> string The type of game played. <code>metadata</code> object Additional metadata related to the game round."},{"location":"API%20Full%20REST%20API/game%20rounds/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#curl_3","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/game_rounds?user_id=1\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response_6","title":"Response","text":"<pre><code>{\n    \"game_rounds\": [\n        {\n            \"id\": 101,\n            \"game_user_id\": 1,\n            \"start_time\": \"2024-09-20T10:00:00Z\",\n            \"end_time\": \"2024-09-20T11:00:00Z\",\n            \"score\": 1500,\n            \"place\": 1,\n            \"game_type\": \"battle\",\n            \"metadata\": {\n            \"level\": \"Hard\"\n            }\n        },\n        {\n            \"id\": 102,\n            \"game_user_id\": 1,\n            \"start_time\": \"2024-09-21T10:00:00Z\",\n            \"end_time\": \"2024-09-21T11:00:00Z\",\n            \"score\": 1700,\n            \"place\": 1,\n            \"game_type\": \"adventure\",\n            \"metadata\": {\n            \"level\": \"Medium\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#delete-a-game-round","title":"Delete a Game Round","text":""},{"location":"API%20Full%20REST%20API/game%20rounds/#scope_5","title":"Scope","text":"<p>Delete an existing game round for the current user.</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#method_5","title":"Method","text":"<p>DELETE</p> <p>/api/v3/game_rounds/{id}</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#attributes_3","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The ID of the game round to delete."},{"location":"API%20Full%20REST%20API/game%20rounds/#headers_4","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/game%20rounds/#responses_4","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Game round deleted successfully. <code>401</code> text/plain Unauthorized: Only the owner can delete the game round. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/game%20rounds/#response-object_4","title":"Response object","text":"Attribute name Type Description <code>message</code> string Success message confirming the game round was deleted."},{"location":"API%20Full%20REST%20API/game%20rounds/#examples_2","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/game%20rounds/#curl_4","title":"cURL","text":"<pre><code>curl --request DELETE \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/game_rounds/101\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/game%20rounds/#response_7","title":"Response","text":"<pre><code>{\n    \"message\": \"Game Round destroyed successfully!\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/getting%20started/","title":"API Full REST API","text":"<p>The first step of integrating GameFuse with your project is to make an account at gamefuse.co.</p> <p>After creating your account you can begin making API calls.</p>"},{"location":"API%20Full%20REST%20API/groups/","title":"Group and Group Connection API","text":"<p>The Group and Group Connection API allows users to manage groups, join or leave them, and handle invitations and membership requests. It supports fetching group data, sending invites, processing join requests, and managing group members.</p> <p>Note</p> <pre><code>This feature is not supported in the js client library yet.\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#create-group","title":"Create Group","text":""},{"location":"API%20Full%20REST%20API/groups/#scope","title":"Scope","text":"<p>Allows a user to create a new group. Upon successful creation, the user will be made the group admin automatically.</p>"},{"location":"API%20Full%20REST%20API/groups/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/groups\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes","title":"Attributes","text":"Name Type Required Description <code>name</code> string Yes The name of the group <code>group_type</code> string No The type of the group (e.g., <code>Public</code>, <code>Private</code>, etc.) <code>max_group_size</code> integer No The maximum number of members allowed in the group <code>can_auto_join</code> boolean No Whether users can join the group automatically <code>is_invite_only</code> boolean No Whether the group requires an invite to join <code>searchable</code> boolean No Whether the group is searchable by other users <code>admins_only_can_create_attributes</code> boolean No Whether the admins are the only ones who can create attributes"},{"location":"API%20Full%20REST%20API/groups/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/groups/#responses","title":"Responses","text":"HTTP status code content-type Description <code>201</code> application/json Group created successfully. <code>422</code> text/plain Could not create the group due to invalid data. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The ID of the created group <code>name</code> string The name of the group <code>group_type</code> string The type of the group (e.g., <code>Public</code>, <code>Private</code>) <code>can_auto_join</code> boolean Whether users can join the group automatically <code>is_invite_only</code> boolean Whether the group requires an invite to join <code>max_group_size</code> integer The maximum number of members allowed in the group <code>searchable</code> boolean Whether the group is searchable by other users <code>member_count</code> integer The current number of members in the group <code>members</code> array List of members in the group <code>admins</code> array List of admins in the group <code>join_requests</code> array List of join requests (if available) <code>invites</code> array List of invites (if available)"},{"location":"API%20Full%20REST%20API/groups/#member-and-admin-object-structure","title":"Member and Admin Object Structure","text":"<p>Each <code>member</code> and <code>admin</code> contains:</p> Attribute name Type Description <code>id</code> integer User ID <code>username</code> string Username of the user <code>email</code> string Email of the user <code>credits</code> integer User credits <code>score</code> integer User score"},{"location":"API%20Full%20REST%20API/groups/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n        \"name\": \"Awesome Gamers\",\n        \"group_type\": \"Public\",\n        \"max_group_size\": 50,\n        \"can_auto_join\": true,\n        \"is_invite_only\": false\n    }' \\\n    \"https://gamefuse.co/api/v3/groups\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response","title":"Response","text":"<pre><code>{\n  \"id\": 1,\n  \"name\": \"Awesome Gamers\",\n  \"group_type\": \"Public\",\n  \"can_auto_join\": true,\n  \"is_invite_only\": false,\n  \"max_group_size\": 50,\n  \"searchable\": true,\n  \"member_count\": 1,\n  \"members\": [\n    {\n      \"id\": 10,\n      \"username\": \"john_doe\",\n      \"email\": \"john.doe@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    }\n  ],\n  \"admins\": [\n    {\n      \"id\": 10,\n      \"username\": \"john_doe\",\n      \"email\": \"john.doe@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    }\n  ],\n  \"join_requests\": [],\n  \"invites\": []\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#fetch-all-groups","title":"Fetch All Groups","text":""},{"location":"API%20Full%20REST%20API/groups/#scope_1","title":"Scope","text":"<p>Retrieve the list of groups available on the platform. This request will not give full group details (such as group members, admins, requests &amp; invites) are included.</p>"},{"location":"API%20Full%20REST%20API/groups/#method_1","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/groups\n</code></pre> <p>NOTE</p> <pre><code>Other users in the same game can be queried with this route.\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes_1","title":"Attributes","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/groups/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/groups/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json List of groups. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>groups</code> array List of groups, with basic information."},{"location":"API%20Full%20REST%20API/groups/#group-object-structure","title":"Group Object Structure","text":"<p>Each group contains:</p> Attribute name Type Description <code>id</code> integer Group ID <code>name</code> string Name of the group <code>group_type</code> string The type of group <code>can_auto_join</code> boolean Whether users can join the group automatically <code>is_invite_only</code> boolean Whether the group requires an invite to join <code>max_group_size</code> integer The maximum number of members allowed in the group <code>searchable</code> boolean Whether the group is searchable by other users <code>member_count</code> integer Number of members in the group"},{"location":"API%20Full%20REST%20API/groups/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl_1","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/groups\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response_1","title":"Response","text":"<pre><code>{\n  \"groups\": [\n    {\n      \"id\": 1,\n      \"name\": \"Awesome Gamers\",\n      \"group_type\": \"Public\",\n      \"can_auto_join\": true,\n      \"is_invite_only\": false,\n      \"max_group_size\": 50,\n      \"searchable\": true,\n      \"member_count\": 12\n    },\n    {\n      \"id\": 2,\n      \"name\": \"VIP Squad\",\n      \"group_type\": \"Private\",\n      \"can_auto_join\": false,\n      \"is_invite_only\": true,\n      \"max_group_size\": 10,\n      \"searchable\": false,\n      \"member_count\": 5\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#fetch-group-details","title":"Fetch Group Details","text":""},{"location":"API%20Full%20REST%20API/groups/#scope_2","title":"Scope","text":"<p>Retrieve the full details of a specific group, including its members, admins, join requests, and invites if available.</p>"},{"location":"API%20Full%20REST%20API/groups/#method_2","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/groups/{id}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The ID of the group to fetch details for."},{"location":"API%20Full%20REST%20API/groups/#headers_2","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/groups/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Detailed information about the group. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>id</code> integer Group ID <code>name</code> string Name of the group <code>group_type</code> string The type of group <code>can_auto_join</code> boolean Whether users can join the group automatically <code>is_invite_only</code> boolean Whether the group requires an invite to join <code>max_group_size</code> integer The maximum number of members allowed in the group <code>searchable</code> boolean Whether the group is searchable by other users <code>member_count</code> integer Number of members in the group <code>members</code> array List of members in the group (if <code>with_full_data</code> is true) <code>admins</code> array List of admins in the group (if <code>with_full_data</code> is true) <code>join_requests</code> array List of join requests for the group (if available) <code>invites</code> array List of invites to the group (if available)"},{"location":"API%20Full%20REST%20API/groups/#examples_2","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl_2","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/groups/1\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response_2","title":"Response","text":"<pre><code>{\n  \"id\": 1,\n  \"name\": \"Awesome Gamers\",\n  \"group_type\": \"Public\",\n  \"can_auto_join\": true,\n  \"is_invite_only\": false,\n  \"max_group_size\": 50,\n  \"searchable\": true,\n  \"member_count\": 12,\n  \"members\": [\n    {\n      \"id\": 10,\n      \"username\": \"john_doe\",\n      \"email\": \"john.doe@example.com\",\n      \"display_email\": \"john.doe@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    }\n  ],\n  \"admins\": [\n    {\n      \"id\": 10,\n      \"username\": \"john_doe\",\n      \"email\": \"john.doe@example.com\",\n      \"display_email\": \"john.doe@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    }\n  ],\n  \"join_requests\": [],\n  \"invites\": []\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#send-group-connection-request","title":"Send Group Connection Request","text":""},{"location":"API%20Full%20REST%20API/groups/#scope_3","title":"Scope","text":"<p>Create a new group connection, which may involve sending an invite or processing a membership request.</p>"},{"location":"API%20Full%20REST%20API/groups/#method_3","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/group_connections\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes_3","title":"Attributes","text":"Name Type Required Description <code>group_id</code> integer Yes The ID of the group to connect to. <code>user_id</code> integer Yes The ID of the user requesting to join the group or being invited."},{"location":"API%20Full%20REST%20API/groups/#headers_3","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/groups/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Group connection created successfully. <code>422</code> text/plain Invalid parameters or already connected. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object_3","title":"Response object","text":"Attribute name Type Description <code>id</code> integer Group connection ID <code>status</code> string The status of the group connection (<code>pending</code>, <code>accepted</code>, etc.) <code>inviter_id</code> integer ID of the user who sent the invite or created the connection <code>user</code> object The user involved in the group connection"},{"location":"API%20Full%20REST%20API/groups/#examples_3","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl_3","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"group_id\": 1, \"user_id\": 10}' \\\n    \"https://gamefuse.co/api/v3/group_connections\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response_3","title":"Response","text":"<pre><code>{\n  \"id\": 123,\n  \"status\": \"pending\",\n  \"inviter_id\": 1,\n  \"user\": {\n    \"id\": 10,\n    \"username\": \"john_doe\",\n    \"email\": \"john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 150,\n    \"score\": 1200\n  }\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#manage-group-membership-requests","title":"Manage Group Membership Requests","text":""},{"location":"API%20Full%20REST%20API/groups/#scope_4","title":"Scope","text":"<p>Handle join requests and invites for a group by accepting or rejecting them.</p>"},{"location":"API%20Full%20REST%20API/groups/#method_4","title":"Method","text":"<p>PUT</p> <pre><code>/api/v3/group_connections/{id}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes_4","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The group connection ID. <code>status</code> string Yes New status for the group connection (<code>accepted</code>, <code>declined</code>)."},{"location":"API%20Full%20REST%20API/groups/#headers_4","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/groups/#responses_4","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Group connection updated successfully. <code>422</code> text/plain Invalid status or unauthorized action. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object_4","title":"Response object","text":"Attribute name Type Description <code>id</code> integer Group connection ID <code>status</code> string The new status of the group connection (<code>accepted</code>, <code>declined</code>)"},{"location":"API%20Full%20REST%20API/groups/#examples_4","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl_4","title":"cURL","text":"<pre><code>curl --request PUT \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"status\": \"accepted\"}' \\\n    \"https://gamefuse.co/api/v3/group_connections/123\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response_4","title":"Response","text":"<pre><code>{\n  \"id\": 123,\n  \"status\": \"accepted\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#fetch-group-attributes","title":"Fetch Group Attributes","text":""},{"location":"API%20Full%20REST%20API/groups/#scope_5","title":"Scope","text":"<p>Retrieve all attributes for a specific group. Attributes include key-value pairs that represent customizable settings or metadata for the group.</p>"},{"location":"API%20Full%20REST%20API/groups/#method_5","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/groups/{id}/attributes\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes_5","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The ID of the group to fetch attributes for."},{"location":"API%20Full%20REST%20API/groups/#headers_5","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/groups/#responses_5","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Group attributes fetched successfully. <code>403</code> text/plain User does not have permission to view attributes for this group. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object_5","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The attribute ID <code>key</code> string The key for the attribute <code>value</code> string The value associated with the key <code>creator_id</code> integer The ID of the user who created the attribute <code>can_edit</code> boolean Whether the current user can edit the attribute"},{"location":"API%20Full%20REST%20API/groups/#examples_5","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl_5","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/groups/1/attributes\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response_5","title":"Response","text":"<pre><code>{\n\"attributes\": [\n    {\n    \"id\": 1,\n    \"key\": \"theme\",\n    \"value\": \"dark\",\n    \"creator_id\": 1001,\n    \"can_edit\": true\n    },\n    {\n    \"id\": 2,\n    \"key\": \"language\",\n    \"value\": \"English\",\n    \"creator_id\": 1002,\n    \"can_edit\": false\n    }\n]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#create-group-attribute","title":"Create Group Attribute","text":""},{"location":"API%20Full%20REST%20API/groups/#scope_6","title":"Scope","text":"<p>Add a new attribute to a group. Group attributes are key-value pairs that store metadata or settings for the group.</p>"},{"location":"API%20Full%20REST%20API/groups/#method_6","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/groups/{id}/add_attribute\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes_6","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The ID of the group to add attributes to. <code>attributes</code> array Yes Array of attributes to be added. <p>Each attribute object should have the following:</p> Name Type Required Description <code>key</code> string Yes The key for the attribute <code>value</code> string Yes The value associated with the key <code>others_can_edit</code> boolean No Allows non creators in the group to edit (defaults to <code>false</code>)"},{"location":"API%20Full%20REST%20API/groups/#headers_6","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/groups/#responses_6","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Group attributes created successfully. <code>403</code> text/plain User does not have permission to add attributes. <code>400</code> text/plain Missing or invalid parameters. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object_6","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The attribute ID <code>key</code> string The key for the attribute <code>value</code> string The value associated with the key <code>creator_id</code> integer The ID of the group who created the attribute <code>can_edit</code> boolean Whether the current user can edit the attribute"},{"location":"API%20Full%20REST%20API/groups/#examples_6","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl_6","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n        \"attributes\": [\n            {\"key\": \"theme\", \"value\": \"dark\"},\n            {\"key\": \"language\", \"value\": \"English\"}\n        ]\n    }' \\\n    \"https://gamefuse.co/api/v3/groups/1/add_attribute\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response_6","title":"Response","text":"<pre><code>{\n\"attributes\": [\n    {\n    \"id\": 1,\n    \"key\": \"theme\",\n    \"value\": \"dark\",\n    \"creator_id\": 1001, //group id not user\n    \"can_edit\": true\n    },\n    {\n    \"id\": 2,\n    \"key\": \"language\",\n    \"value\": \"English\",\n    \"creator_id\": 1002, //group id not user\n    \"can_edit\": true\n    }\n]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#modify-group-attribute","title":"Modify Group Attribute","text":""},{"location":"API%20Full%20REST%20API/groups/#scope_7","title":"Scope","text":"<p>Update the value of an existing group attribute. Only the creator of the attribute or an admin can modify it, depending on group settings.</p>"},{"location":"API%20Full%20REST%20API/groups/#method_7","title":"Method","text":"<p>PATCH</p> <pre><code>/api/v3/groups/{id}/modify_attribute\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#attributes_7","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The ID of the group whose attribute is being modified. <code>key</code> string Yes The key of the attribute to be modified. <code>value</code> string Yes The new value for the attribute."},{"location":"API%20Full%20REST%20API/groups/#headers_7","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/groups/#responses_7","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Group attribute modified successfully. <code>403</code> text/plain User does not have permission to modify the attribute. <code>400</code> text/plain Missing or invalid parameters. <code>404</code> text/plain Attribute not found. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/groups/#response-object_7","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The attribute ID <code>key</code> string The key for the attribute <code>value</code> string The updated value of the attribute <code>creator_id</code> integer The ID of the user who created the attribute <code>can_edit</code> boolean Whether the current user can edit the attribute"},{"location":"API%20Full%20REST%20API/groups/#examples_7","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/groups/#curl_7","title":"cURL","text":"<pre><code>curl --request PATCH \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\n        \"key\": \"setting1\",\n        \"value\": \"updated_value\"\n    }' \\\n    \"https://gamefuse.co/api/v3/groups/1/modify_attribute\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/groups/#response_7","title":"Response","text":"<pre><code>{\n\"id\": 1,\n\"key\": \"setting1\",\n\"value\": \"updated_value\",\n\"creator_id\": 1001,\n\"can_edit\": true\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/","title":"In Game Leaderboard (API)","text":""},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#submit-new-leaderboard-entry","title":"Submit New Leaderboard Entry","text":""},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#scope","title":"Scope","text":"<p>Add a leaderboard entry to a specific leaderboard within your game. designated by <code>leaderboard_name</code>, these can be pulled later and compared to other users.</p> <p>Note</p> <p>Leaderboards can be easily created within GameFuse From your JS game client.</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{user_id}/add_leaderboard_entry\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#attributes","title":"Attributes","text":"Name Type Required Description <code>user_id</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#data-payload","title":"Data (payload)","text":"Name Type Required Description <code>leaderboard_name</code> string Yes Leaderboard name within the game <code>score</code> integer Yes Score for the leaderboard <code>metadata</code> object No An object containing arbitrary attributes"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing all the user's attributes <code>400</code> text/plain Invalid extra attributes <code>401</code> text/plain Can only add entries for the current user <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response-object","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>display_email</code> string User's actual email used for notifications and login <code>email</code> string System email: a combination of <code>id</code> and <code>email</code> <code>events_total</code> integer Running API hits for this user <code>events_current_month</code> integer Running API hits for this user for the current month <code>game_sessions_current_month</code> integer unique game session for this user during the current month <code>game_sessions_total</code> integer Unique game session for this user <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#examples","title":"Examples","text":"<p>Example</p> <p>Example</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"score\": 21, \"leaderboard_name\": \"leaderboard test\", \"metadata\": {\"level\": \"10\", \"color\": \"blue\"}}' \\\n    \"https://gamefuse.co/api/v3/users/1/add_leaderboard_entry\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"john.doe\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 125,\n    \"score\": 10134,\n    \"last_login\": \"2022-01-15T10:30:00Z\",\n    \"number_of_logins\": 34,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 15,\n    \"events_current_month\": 7,\n    \"game_sessions_total\": 51,\n    \"game_sessions_current_month\": 9\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#curl_1","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"score\": 21, \"leaderboard_name\": \"leaderboard test\"}' \\\n    \"https://gamefuse.co/api/v3/users/1/add_leaderboard_entry\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response_1","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"john.doe\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 125,\n    \"score\": 10134,\n    \"last_login\": \"2022-01-15T10:30:00Z\",\n    \"number_of_logins\": 34,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 15,\n    \"events_current_month\": 7,\n    \"game_sessions_total\": 51,\n    \"game_sessions_current_month\": 9\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#clear-leaderboard-entries","title":"Clear Leaderboard Entries","text":""},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#scope_1","title":"Scope","text":"<p>Clear all leaderboard entries for a specific user.</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#method_1","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{user_id}/clear_my_leaderboard_entries?leaderboard_name={leaderboard_name}\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>user_id</code> integer Yes The user id value from the GameFuse game dashboard <code>leaderboard_name</code> integer Yes which leaderboard to clear for the current user"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#data-payload_1","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing all the user's attributes <code>401</code> text/plain Can only clear entries for current user <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>display_email</code> string User's actual email used for notifications and login <code>email</code> string System email: a combination of <code>id</code> and <code>email</code> <code>events_total</code> integer Running API hits for this user <code>events_current_month</code> integer Running API hits for this user for the current month <code>game_sessions_current_month</code> integer unique game session for this user during the current month <code>game_sessions_total</code> integer Unique game session for this user <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#curl_2","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/users/1/clear_my_leaderboard_entries\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response_2","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"john.doe\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 125,\n    \"score\": 10134,\n    \"last_login\": \"2022-01-15T10:30:00Z\",\n    \"number_of_logins\": 34,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 15,\n    \"events_current_month\": 7,\n    \"game_sessions_total\": 51,\n    \"game_sessions_current_month\": 9\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#leaderboard-entries","title":"Leaderboard Entries","text":""},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#scope_2","title":"Scope","text":"<p>Get leaderboard entries for a specific leaderboard name.</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#method_2","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/games/{gameId}/leaderboard_entries?leaderboard_name={leaderboardName}&amp;limit={limit}\n</code></pre> <p>Important</p> <p>You may have multiple leaderboards in your game indicated by <code>leaderboardName</code>.</p> <p>Note</p> <p>Leaderboards can be downloaded for a specific <code>leaderboardName</code>, which would gather all the high scores for all users in the game.</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>gameId</code> integer Yes Found on your GameFuse.co dashboard <code>leaderboard_name</code> string Yes Name of the leaderboard within the game <code>limit</code> integer Yes Limit the number of results. Set this value &gt;= 1"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#data-payload_2","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#headers_2","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing leaderboard entries <code>400</code> text/plain No entries for this leaderboard name <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>leaderboard_entries</code> list Contains leaderboard values and extra attributes"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#examples_2","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#curl_3","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/games/1/leaderboard_entries?leaderboard_name=leaderboard_for_game_1&amp;limit=10\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response_3","title":"Response","text":"<pre><code>{\n  \"leaderboard_entries\": [\n      {\n          \"username\": \"john.doe\",\n          \"score\": 1453,\n          \"leaderboard_name\": \"leaderboard_for_game_1\",\n          \"game_user_id\": 1,\n          \"metadata\": \"{}\",\n          \"created_at\": \"2024-07-23T15:20:09.424Z\"\n      },\n      {\n          \"username\": \"jane.doe\",\n          \"score\": 1234,\n          \"leaderboard_name\": \"leaderboard_for_game_1\",\n          \"game_user_id\": 1,\n          \"metadata\": {\"level\": \"10\", \"color\": \"blue\"},\n          \"created_at\": \"2024-07-23T15:20:09.424Z\"\n      }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#user-specific-leaderboard-entries","title":"User-specific leaderboard entries","text":""},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#scope_3","title":"Scope","text":"<p>Get all leaderboard entries for a specific user.</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#method_3","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/users/{user_id}/leaderboard_entries?leaderboard_name={leaderboardName}&amp;limit={limit}&amp;one_per_user={onePerUser}\n</code></pre> <p>NOTE</p> <pre><code>Other users can be queried with this route\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#attributes_3","title":"Attributes","text":"Name Type Required Description <code>leaderboard_name</code> string No Name of the leaderboard within the game. No value returns all leaderboard entries for the User <code>limit</code> integer Yes Limit the number of results. Set this value &gt;= 1 <code>user_id</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#data-payload_3","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#headers_3","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's remaining scores and a list of all their purchased store items <code>401</code> text/plain Can only get entries for the current user <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#examples_3","title":"Examples","text":"<p>Example</p> <p>Example</p>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#curl_4","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/users/1/leaderboard_entries?leaderboard_name=leaderboard_for_game_1&amp;limit=10\"\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response_4","title":"Response","text":"<pre><code>{\n  \"leaderboard_entries\": [\n      {\n          \"username\": \"john.doe\",\n          \"score\": 1453,\n          \"leaderboard_name\": \"leaderboard_for_game_1\",\n          \"game_user_id\": 1,\n          \"metadata\": \"{}\",\n          \"created_at\": \"2024-07-23T15:20:09.424Z\"\n      },\n      {\n          \"username\": \"jane.doe\",\n          \"score\": 1234,\n          \"leaderboard_name\": \"leaderboard_for_game_1\",\n          \"game_user_id\": 1,\n          \"metadata\": {\"level\": \"10\", \"color\": \"blue\"},\n          \"created_at\": \"2024-07-23T15:20:09.424Z\"\n      }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#curl_5","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v2/users/1/leaderboard_entries?limit=10\"\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/in%20game%20leaderboard/#response_5","title":"Response","text":"<pre><code>{\n  \"leaderboard_entries\": [\n      {\n          \"username\": \"john.doe\",\n          \"score\": 1453,\n          \"leaderboard_name\": \"leaderboard_1\",\n          \"game_user_id\": 1,\n          \"metadata\": \"{}\",\n          \"created_at\": \"2024-07-23T15:20:09.424Z\"\n      },\n      {\n          \"username\": \"john.doe\",\n          \"score\": 1453,\n          \"leaderboard_name\": \"leaderboard_2\",\n          \"game_user_id\": 1,\n          \"metadata\": \"{}\",\n          \"created_at\": \"2024-07-23T15:12:09.424Z\"\n      },\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/","title":"Chat and Message API","text":"<p>The Chat and Message API allows users to manage chats and send messages between players in the GameFuse platform. This includes creating chats, sending messages, paginating through chats and messages, and marking messages as read.</p> <p>Note</p> <pre><code>This feature is not supported in the js client library yet.\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#chats","title":"Chats","text":""},{"location":"API%20Full%20REST%20API/messaging/#fetch-paginated-chats","title":"Fetch Paginated Chats","text":""},{"location":"API%20Full%20REST%20API/messaging/#scope","title":"Scope","text":"<p>Retrieve the paginated list of chats (both direct and group chats) the user is a part of.</p>"},{"location":"API%20Full%20REST%20API/messaging/#method","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/chats/page/{page}\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#attributes","title":"Attributes","text":"Name Type Required Description <code>page</code> integer No Page number for pagination. If not provided, defaults to page 1."},{"location":"API%20Full%20REST%20API/messaging/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/messaging/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json List of direct and group chats. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/messaging/#response-object","title":"Response object","text":"Attribute name Type Description <code>direct_chats</code> array List of direct chats. <code>group_chats</code> array List of group chats."},{"location":"API%20Full%20REST%20API/messaging/#chat-object-structure","title":"Chat Object Structure","text":"<p>Each chat contains:</p> Attribute name Type Description <code>id</code> integer Chat ID <code>creator_id</code> integer ID of the user who created the chat <code>creator_type</code> string The type of creator (<code>User</code>, etc.) <code>messages</code> array List of most recent messages in the chat <code>participants</code> array List of users in the chat"},{"location":"API%20Full%20REST%20API/messaging/#message-object-structure-in-chat-object","title":"Message Object Structure (in Chat Object)","text":"<p>Each message contains:</p> Attribute name Type Description <code>id</code> integer Message ID <code>text</code> string Message text <code>user_id</code> integer ID of the user who sent the message <code>created_at</code> string Timestamp when the message was created <code>read_by</code> array List of user IDs who have read the message <code>read</code> boolean Whether the current user has read the message"},{"location":"API%20Full%20REST%20API/messaging/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/messaging/#curl","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/chats/page/1\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#response","title":"Response","text":"<pre><code>{\n  \"direct_chats\": [\n    {\n      \"id\": 1,\n      \"creator_id\": 10,\n      \"creator_type\": \"User\",\n      \"messages\": [\n        {\n          \"id\": 5,\n          \"text\": \"Hey there!\",\n          \"user_id\": 10,\n          \"created_at\": \"2024-09-20T12:00:00Z\",\n          \"read_by\": [10, 11],\n          \"read\": true\n        }\n      ],\n      \"participants\": [\n        {\n          \"id\": 10,\n          \"username\": \"john_doe\",\n          \"email\": \"john.doe@example.com\",\n          \"display_email\": \"john.doe@example.com\",\n          \"credits\": 150,\n          \"score\": 1200\n        },\n        {\n          \"id\": 11,\n          \"username\": \"jane_smith\",\n          \"email\": \"jane.smith@example.com\",\n          \"display_email\": \"jane.smith@example.com\",\n          \"credits\": 200,\n          \"score\": 1300\n        }\n      ]\n    }\n  ],\n  \"group_chats\": []\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#create-a-chat","title":"Create a Chat","text":""},{"location":"API%20Full%20REST%20API/messaging/#scope_1","title":"Scope","text":"<p>Create a new chat, either a direct chat or a group chat, and send the first message.</p>"},{"location":"API%20Full%20REST%20API/messaging/#method_1","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/chats\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>usernames</code> array No List of usernames to start a direct chat with. <code>group_id</code> integer No ID of the group to send a message to (for group chat). <code>text</code> string Yes The message text to send when creating the chat."},{"location":"API%20Full%20REST%20API/messaging/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/messaging/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Chat created successfully and message sent. <code>422</code> text/plain Invalid parameters or missing required attributes. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/messaging/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>chat</code> object The newly created chat object. <code>chat_users</code> array List of users in the chat."},{"location":"API%20Full%20REST%20API/messaging/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/messaging/#curl_1","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"usernames\": [\"user1\", \"user2\"], \"text\": \"Hello, everyone!\"}' \\\n    \"https://gamefuse.co/api/v3/chats\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#response_1","title":"Response","text":"<pre><code>{\n  \"chat\": {\n    \"id\": 123,\n    \"creator_id\": 10,\n    \"creator_type\": \"User\",\n    \"messages\": [\n      {\n        \"id\": 5,\n        \"text\": \"Hello, everyone!\",\n        \"user_id\": 10,\n        \"created_at\": \"2024-09-20T12:34:56Z\",\n        \"read_by\": [10, 11],\n        \"read\": true\n      }\n    ],\n    \"participants\": [...]\n  },\n  \"chat_users\": [...]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#messages","title":"Messages","text":""},{"location":"API%20Full%20REST%20API/messaging/#fetch-paginated-messages","title":"Fetch Paginated Messages","text":""},{"location":"API%20Full%20REST%20API/messaging/#scope_2","title":"Scope","text":"<p>Retrieve the paginated list of messages for a specific chat.</p>"},{"location":"API%20Full%20REST%20API/messaging/#method_2","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/messages/page/{page}?chat_id={chat_id}\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>page</code> integer No Page number for pagination. Defaults to page 1 if not provided. <code>chat_id</code> integer Yes The chat ID to fetch messages for."},{"location":"API%20Full%20REST%20API/messaging/#headers_2","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/messaging/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json List of messages in the chat. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/messaging/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>messages</code> array List of messages in the chat."},{"location":"API%20Full%20REST%20API/messaging/#message-object-structure","title":"Message Object Structure","text":"<p>Each message contains:</p> Attribute name Type Description <code>id</code> integer Message ID <code>text</code> string Message text <code>user_id</code> integer ID of the user who sent the message <code>created_at</code> string Timestamp when the message was created <code>read_by</code> array List of user IDs who have read the message <code>read</code> boolean Whether the current user has read the message"},{"location":"API%20Full%20REST%20API/messaging/#examples_2","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/messaging/#curl_2","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/messages/page/1?chat_id=123\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#response_2","title":"Response","text":"<pre><code>{\n  \"messages\": [\n    {\n      \"id\": 1,\n      \"text\": \"Hello!\",\n      \"user_id\": 10,\n      \"created_at\": \"2024-09-20T12:00:00Z\",\n      \"read_by\": [10, 11],\n      \"read\": true\n    },\n    {\n      \"id\": 2,\n      \"text\": \"Hi there!\",\n      \"user_id\": 11,\n      \"created_at\": \"2024-09-20T12:05:00Z\",\n      \"read_by\": [10],\n      \"read\": false\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#send-a-message","title":"Send a Message","text":""},{"location":"API%20Full%20REST%20API/messaging/#scope_3","title":"Scope","text":"<p>Send a new message to an existing chat.</p>"},{"location":"API%20Full%20REST%20API/messaging/#method_3","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/messages\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#attributes_3","title":"Attributes","text":"Name Type Required Description <code>text</code> string Yes The message text to send. <code>chat_id</code> integer Yes The chat ID to send the message to."},{"location":"API%20Full%20REST%20API/messaging/#headers_3","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/messaging/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Message sent successfully. <code>422</code> text/plain Invalid parameters or missing attributes. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/messaging/#response-object_3","title":"Response object","text":"Attribute name Type Description <code>message</code> object The newly created message object."},{"location":"API%20Full%20REST%20API/messaging/#examples_3","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/messaging/#curl_3","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"text\": \"Hello everyone!\", \"chat_id\": 123}' \\\n    \"https://gamefuse.co/api/v3/messages\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#response_3","title":"Response","text":"<pre><code>{\n  \"message\": {\n    \"id\": 3,\n    \"text\": \"Hello everyone!\",\n    \"user_id\": 10,\n    \"created_at\": \"2024-09-20T12:34:56Z\",\n    \"read_by\": [10],\n    \"read\": true\n  }\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#mark-a-message-as-read","title":"Mark a Message as Read","text":""},{"location":"API%20Full%20REST%20API/messaging/#scope_4","title":"Scope","text":"<p>Mark a specific message in a chat as read by the current user.</p>"},{"location":"API%20Full%20REST%20API/messaging/#method_4","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/messages/{id}/mark_as_read\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#attributes_4","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The ID of the message to mark as read."},{"location":"API%20Full%20REST%20API/messaging/#headers_4","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/messaging/#responses_4","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Message successfully marked as read. <code>422</code> text/plain Message already marked as read or invalid ID. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/messaging/#response-object_4","title":"Response object","text":"Attribute name Type Description <code>message</code> string Success message indicating the message has been marked as read."},{"location":"API%20Full%20REST%20API/messaging/#examples_4","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/messaging/#curl_4","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/messages/1/mark_as_read\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/messaging/#response_4","title":"Response","text":"<pre><code>{\n  \"message\": \"Message marked as read\"\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/other%20users/","title":"Fetching Users details","text":"<p>Retrieve details about a specific user. This can be used to fetch information about the signed-in user or another user in the same game.</p>"},{"location":"API%20Full%20REST%20API/other%20users/#method","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/users/{id}\n</code></pre> <p>NOTE</p> <pre><code>Other users in the same game can be queried with this route.\n</code></pre>"},{"location":"API%20Full%20REST%20API/other%20users/#attributes","title":"Attributes","text":"Name Type Required Description <code>id</code> integer Yes The ID of the user to retrieve details for."},{"location":"API%20Full%20REST%20API/other%20users/#data-payload","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/other%20users/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions."},{"location":"API%20Full%20REST%20API/other%20users/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json User details retrieved successfully. <code>401</code> text/plain Unauthorized: You cannot view users from another game. <code>404</code> text/plain User not found. <code>500</code> text/plain Unknown server error."},{"location":"API%20Full%20REST%20API/other%20users/#response-object","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The ID of the user. <code>username</code> string The username of the user. <code>email</code> string The email of the user. <code>credits</code> integer The number of credits the user has. <code>score</code> integer The score of the user. <code>is_new_user</code> boolean Indicates if the user is new. <code>last_login</code> string The last login date of the user. <code>number_of_logins</code> integer The total number of logins by the user."},{"location":"API%20Full%20REST%20API/other%20users/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/other%20users/#curl","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/users/1\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/other%20users/#response","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"john.doe\",\n    \"email\": \"john.doe@example.com\",\n    \"credits\": 1000,\n    \"score\": 1500,\n    \"is_new_user\": false,\n    \"last_login\": \"2024-07-23\",\n    \"number_of_logins\": 42\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/other%20users/#fetching-other-users-data","title":"Fetching Other User's Data","text":"<p>After sign in, a signed in user will have an authentication-token that can be placed in the header of subsequent API calls.  Now the user can create, read, update and destroy their data in any of the GameFuse constructs.  LeaderboardEntries, GameRounds, PurchasedStoreItems, GameUserAttributes, Friends, Groups, Messages and more can be accessed to keep track of your user's game state.</p> <p>In accessing leaderboards, groups, multiplayer game rounds and more, you may want to query other users in those collections that are not signed in. Other users' data cannot be created or modified, but it can be read to display to the signed-in user, perhaps showing a competitor's avatar image URL on a leaderboard or on a friend's chat message window.</p> <p>Below is a list of accessible routes that a signed-in user can query other users' data with. The ID of the user passed in must not be the signed-in user; it must be the user being queried.  </p>"},{"location":"API%20Full%20REST%20API/other%20users/#api-paths","title":"API Paths","text":"Method Path Description GET <code>/v3/users/:id/game_user_attributes</code> Fetch game user attributes for a user GET <code>/v3/users/:id/game_user_store_items</code> Fetch store items for a user GET <code>/v3/users/:id/leaderboard_entries</code> Fetch leaderboard entries for a user GET <code>/ve/users/:id</code> Fetch details of a user (show route) GET <code>/v3/friends?user_id=xxx</code> Fetch the list of friends GET <code>/v3/game_rounds?user_id=xxx</code> Fetch all game rounds GET <code>/v3/game_rounds/:id</code> Fetch details of a specific game round <p>Detail about these paths and expected responses can be found in the subsequent chapters. To access the user object for yourself of another user, use the following method:</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/","title":"Signing Game Users In (API)","text":"<p>After sign up, you should provide a sign in function for users to log-in at a later time.</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#sign-in-users","title":"Sign in users","text":""},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#scope","title":"Scope","text":"<p>Make users log-in.</p> <p>Important</p> <p>This step returns the <code>authentication-token</code> HTTP header which is to be used for most API requests.</p> <p>Tip</p> <p>If you get a message like <code>Request missing user authentication token</code> from other API endpoints that require the <code>authentication-token</code> header, try connecting to this endpoint again and use the newly generated  <code>authentication_token</code> string.</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/sessions\n</code></pre>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#attributes","title":"Attributes","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#data-payload","title":"Data (payload)","text":"Name Type Required Description <code>email</code> string Yes User's email, used for login and forgot password functionality <code>gameId</code> integer Yes Value found on your GameFuse.co dashboard <code>gameToken</code> string Yes API token found on your GameFuse.co dashboard <code>password</code> string Yes User's password"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#headers","title":"Headers","text":"Name Type Description <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's remaining scores and a list of all their purchased store items <code>402</code> text/plain Game is disabled. Check the GameFuse dashboard <code>404</code> text/plain User not found or incorrect password <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#response-object","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>display_email</code> string User's actual email used for notifications and login <code>email</code> string System email: a combination of <code>id</code> and <code>email</code> <code>events_total</code> integer Running API hits for this user <code>events_current_month</code> integer Running API hits for this user for the current month <code>game_sessions_current_month</code> integer unique game session for this user during the current month <code>game_sessions_total</code> integer Unique game session for this user <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"email: \"john.doe@example.com\", \"password\": 1234\", \"password_confirmation\": \"1234\", \"username\": \"jdoe\", \"game_id\": 1, \"game_token\": \"abc123\"}' \\\n    https://gamefuse.co/api/v3/sessions\n</code></pre>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20in/#response","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"john.doe\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 0,\n    \"score\": 0,\n    \"last_login\": \"2024-07-21\",\n    \"number_of_logins\": 1,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 1,\n    \"events_current_month\": 1,\n    \"game_sessions_total\": 1,\n    \"game_sessions_current_month\": 1,\n    \"game_user_attributes\": \"game_user_attributes\": [\n        {\n            \"id\": 0,\n            \"key\": \"this_key\",\n            \"value\": \"this_value\"\n        },\n        {\n            \"id\": 1,\n            \"key\": \"other_key\",\n            \"value\": \"other_value\"\n        },\n        {\n            \"id\": 2,\n            \"key\": \"some key\",\n            \"value\": \"some value\"\n        }\n    ],\n    \"game_user_store_items\": [\n        {\n        \"id\": 337,\n        \"name\": \"test\",\n        \"cost\": 123,\n        \"description\": \"a test item\",\n        \"category\": \"generic\",\n        \"icon_url\": null\n        },\n        {\n        \"id\": 338,\n        \"name\": \"test 2\",\n        \"cost\": 321,\n        \"description\": \"another test item\",\n        \"category\": \"main\",\n        \"icon_url\": null\n        }\n    ],\n    \"friends\": [{\n      \"id\": 1,\n      \"username\": \"john_doe\",\n      \"email\": \"john.doe@example.com\",\n      \"display_email\": \"john.doe@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    },\n    {\n      \"id\": 2,\n      \"username\": \"dee_doo\",\n      \"email\": \"dee.doo@example.com\",\n      \"display_email\": \"dee.doo@example.com\",\n      \"credits\": 150,\n      \"score\": 1200\n    }],\n    \"outgoing_friend_requests\": [\n        {\n        \"id\": 2,\n        \"username\": \"friend_username\",\n        \"email\": \"friend@example.com\",\n        \"display_email\": \"friend@example.com\",\n        \"credits\": 100,\n        \"score\": 900,\n        \"friendship_id\": 123,\n        \"requested_at\": \"2024-09-20T12:34:56Z\"\n        }\n    ],\n    \"incoming_friend_requests\": [\n        {\n        \"id\": 3,\n        \"username\": \"another_friend\",\n        \"email\": \"another_friend@example.com\",\n        \"display_email\": \"another_friend@example.com\",\n        \"credits\": 200,\n        \"score\": 1300,\n        \"friendship_id\": 124,\n        \"requested_at\": \"2024-09-19T11:22:33Z\"\n        }\n    ],\n    \"groups\": [\n        {\n        \"id\": 1,\n        \"name\": \"Awesome Gamers\",\n        \"group_type\": \"Public\",\n        \"can_auto_join\": true,\n        \"is_invite_only\": false,\n        \"max_group_size\": 50,\n        \"searchable\": true,\n        \"member_count\": 12\n        },\n        {\n        \"id\": 2,\n        \"name\": \"VIP Squad\",\n        \"group_type\": \"Private\",\n        \"can_auto_join\": false,\n        \"is_invite_only\": true,\n        \"max_group_size\": 10,\n        \"searchable\": false,\n        \"member_count\": 5\n        }\n    ],\n    \"group_join_requests\": [],\n    \"group_invites\": [{\n        \"invite\": [],\n        \"user\": {\n        \"id\": 3,\n        \"username\": \"me\",\n        \"email\": \"me@example.com\",\n        \"display_email\": \"me@example.com\",\n        \"credits\": 200,\n        \"score\": 1300,\n        \"requested_at\": \"2024-09-19T11:22:33Z\"\n        },\n        \"inviter\": {\n        \"id\": 3,\n        \"username\": \"inviter\",\n        \"email\": \"inviter@example.com\",\n        \"display_email\": \"inviter@example.com\",\n        \"credits\": 100,\n        \"score\": 200,\n        \"requested_at\": \"2024-09-19T11:22:33Z\"\n        },\n        \"group\": {\n            \"id\": 1,\n            \"name\": \"Awesome Gamers\",\n            \"group_type\": \"Public\",\n            \"can_auto_join\": true,\n            \"is_invite_only\": false,\n            \"max_group_size\": 50,\n            \"searchable\": true,\n            \"member_count\": 1,\n            \"members\": [\n                {\n                \"id\": 10,\n                \"username\": \"john_doe\",\n                \"email\": \"john.doe@example.com\",\n                \"credits\": 150,\n                \"score\": 1200\n                }\n            ],\n            \"admins\": [\n                {\n                \"id\": 10,\n                \"username\": \"john_doe\",\n                \"email\": \"john.doe@example.com\",\n                \"credits\": 150,\n                \"score\": 1200\n                }\n            ]\n        }\n\n    }]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/","title":"Signing Game Users Up (API)","text":"<p>Once your account is verified, you should take note of the API token and ID. You will need them on each subsequent request.</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#sign-up-users","title":"Sign up users","text":""},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#scope","title":"Scope","text":"<p>Sign up a new user in your game.</p> <p>Important</p> <p>This step returns the <code>authentication-token</code> HTTP header which is to be used for most API requests.</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users\n</code></pre>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#attributes","title":"Attributes","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#data-payload","title":"Data (payload)","text":"Name Type Required Description <code>email</code> string Yes User's email, used for login and forgot password functionality <code>gameId</code> Value found on your GameFuse.co dashboard <code>gameToken</code> string Yes API token found on your GameFuse.co dashboard <code>password</code> string Yes User's password <code>passwordConfirmation</code> string Yes Same as <code>password</code> <code>username</code> string Yes User's display name used on leaderboards. It must be unique for your game"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#headers","title":"Headers","text":"Name Type Description <code>Content-Type</code> string Set it to <code>application/json</code>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's remaining scores and a list of all their purchased store items <code>404</code> text/plain Failed to fetch game variables. <code>gameId</code> or <code>gameToken</code> might be wrong <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#response-object","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>email</code> string Users email field added on registration <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#example","title":"Example","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"email: \"john.doe@example.com\", \"password\": 1234\", \"password_confirmation\": \"1234\", \"username\": \"jdoe\", \"game_id\": 1, \"game_token\": \"abc123\"}' \\\n    https://gamefuse.co/api/v2/users\n</code></pre>"},{"location":"API%20Full%20REST%20API/signing%20game%20users%20up/#response","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"some_username\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 0,\n    \"score\": 0,\n    \"last_login\": \"2024-07-21T14:23:37.457-04:00\",\n    \"number_of_logins\": 0,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 0,\n    \"events_current_month\": 0,\n    \"game_sessions_total\": 0,\n    \"game_sessions_current_month\": 0\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20credits/","title":"Using Credits (API)","text":"<p>Credits are a numeric attribute of each game user. It is a simple integer value that you can add manually.</p> <p>Credits are automatically detracted upon store item purchases. You can manually add and remove them via an API call.</p>"},{"location":"API%20Full%20REST%20API/using%20credits/#adding-credits","title":"Adding Credits","text":""},{"location":"API%20Full%20REST%20API/using%20credits/#scope","title":"Scope","text":"<p>Alter the relative amount of credits a users has.</p>"},{"location":"API%20Full%20REST%20API/using%20credits/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{signedInUserId}/add_credits\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20credits/#attributes","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/using%20credits/#data-payload","title":"Data (payload)","text":"Name Type Required Description <code>credits</code> integer Yes The amount of credits (positive or negative) you want to alter the user's current credits by"},{"location":"API%20Full%20REST%20API/using%20credits/#headers","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/using%20credits/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's remaining credits and a list of all their purchased store items <code>400</code> text/plain <code>credits</code> attribute missing <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/using%20credits/#response-object","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>display_email</code> string User's actual email used for notifications and login <code>email</code> string System email: a combination of <code>id</code> and <code>email</code> <code>events_total</code> integer Running API hits for this user <code>events_current_month</code> integer Running API hits for this user for the current month <code>game_sessions_current_month</code> integer unique game session for this user during the current month <code>game_sessions_total</code> integer Unique game session for this user <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/using%20credits/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/using%20credits/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"credits\": 10}' \\\n    \"https://gamefuse.co/api/v3/users/1/add_credits\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20credits/#response","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"some_username\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 10,\n    \"score\": 0,\n    \"last_login\": \"2024-07-21T14:23:37.457-04:00\",\n    \"number_of_logins\": 0,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 0,\n    \"events_current_month\": 0,\n    \"game_sessions_total\": 0,\n    \"game_sessions_current_month\": 0\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20credits/#setting-credits","title":"Setting Credits","text":""},{"location":"API%20Full%20REST%20API/using%20credits/#scope_1","title":"Scope","text":"<p>Set the absolute amount of credits a users has.</p> <p>Note</p> <p>The <code>credits</code> parameter you set here will be new total credit amount of the user.</p>"},{"location":"API%20Full%20REST%20API/using%20credits/#method_1","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{signedInUserId}/set_credits\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20credits/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/using%20credits/#data-payload_1","title":"Data (payload)","text":"Name Type Required Description <code>credits</code> integer Yes The amount of credits (positive or negative) you want to alter the user's current credits by"},{"location":"API%20Full%20REST%20API/using%20credits/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/using%20credits/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the user's remaining credits and a list of all their purchased store items <code>400</code> text/plain <code>credits</code> attribute missing <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/using%20credits/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>authentication_token</code> string Token that must be saved and added as a parameter to all authenticated requests <code>credits</code> integer Number of credits the user has. These can be used in your in game store <code>display_email</code> string User's actual email used for notifications and login <code>email</code> string System email: a combination of <code>id</code> and <code>email</code> <code>events_total</code> integer Running API hits for this user <code>events_current_month</code> integer Running API hits for this user for the current month <code>game_sessions_current_month</code> integer unique game session for this user during the current month <code>game_sessions_total</code> integer Unique game session for this user <code>id</code> integer User's id <code>last_login</code> string Timestamp of last login <code>number_of_logins</code> integer Total logins <code>score</code> integer A generic score metric <code>username</code> string User's display username"},{"location":"API%20Full%20REST%20API/using%20credits/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/using%20credits/#curl_1","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json \\\n    --data '{\"credits\": 10}' \\\n    \"https://gamefuse.co/api/v3/users/1/set_credits\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20credits/#response_1","title":"Response","text":"<pre><code>{\n    \"id\": 1,\n    \"username\": \"some_username\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 10,\n    \"score\": 0,\n    \"last_login\": \"2024-07-21T14:23:37.457-04:00\",\n    \"number_of_logins\": 0,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 0,\n    \"events_current_month\": 0,\n    \"game_sessions_total\": 0,\n    \"game_sessions_current_month\": 0\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/","title":"Using Store Items in Your Game (API)","text":""},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#getting-available-store-items","title":"Getting Available Store Items","text":""},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#scope","title":"Scope","text":"<p>Get all the store items from a specific game.</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#method","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/games/store_items?game_id={gameId}&amp;game_token={gameToken}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#attributes","title":"Attributes","text":"Name Type Required Description <code>gameId</code> Value found on your GameFuse.co dashboard <code>gameToken</code> string Yes API token found on your GameFuse.co dashboard"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#data-payload","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#headers","title":"Headers","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#responses","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the game store items <code>404</code> text/plain Failed to fetch game variables. <code>gameId</code> or <code>gameToken</code> might be wrong <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response-object","title":"Response object","text":"Attribute name Type Description <code>store_items</code> list A list of objects where each one represents the fields of a store item"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#example","title":"Example","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#curl","title":"cURL","text":"<pre><code>curl --request GET \\\n    \"https://gamefuse.co/api/v3/games/store_items?game_id=1&amp;game_token=abc123\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response","title":"Response","text":"<pre><code>{\n  \"store_items\": [\n    {\n      \"id\": 337,\n      \"name\": \"test\",\n      \"cost\": 123,\n      \"description\": \"a test item\",\n      \"category\": \"generic\",\n      \"icon_url\": null\n    },\n    {\n      \"id\": 338,\n      \"name\": \"test 2\",\n      \"cost\": 321,\n      \"description\": \"another test item\",\n      \"category\": \"main\",\n      \"icon_url\": null\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#purchasing-a-store-item","title":"Purchasing a Store Item","text":""},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#scope_1","title":"Scope","text":"<p>Purchase a store item.</p> <p>Important</p> <p>A user must be signed in and have enough credits to call this endpoint! </p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#method_1","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/users/{signedInUserId}/purchase_game_user_store_item\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#data-payload_1","title":"Data (payload)","text":"Name Type Required Description <code>store_item_id</code> integer Yes Id of the store item"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#headers_1","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the game store items belonging to the user and the credits <code>403</code> text/plain Not enough credits or item already purchased <code>404</code> text/plain Item not found <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>credits</code> integer The user's remaining credits <code>game_user_store_items</code> list A list of objects where each one represents the fields of a store item purchased by the user"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#example_1","title":"Example","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#curl_1","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"Content-Type: application/json\" \\\n    --header \"authentication-token: abc123\" \\\n    --data '{\"store_item_id\": 337}' \\\n    'https://gamefuse.co/api/v3/users/1/purchase_game_user_store_item'\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response_1","title":"Response","text":"<pre><code>{\n  \"credits\": 135,\n  \"store_items\": [\n    {\n      \"id\": 337,\n      \"name\": \"test\",\n      \"cost\": 123,\n      \"description\": \"a test item\",\n      \"category\": \"generic\",\n      \"icon_url\": null\n    },\n    {\n      \"id\": 338,\n      \"name\": \"test 2\",\n      \"cost\": 321,\n      \"description\": \"another test item\",\n      \"category\": \"main\",\n      \"icon_url\": null\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#removing-a-store-item","title":"Removing a Store Item","text":""},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#scope_2","title":"Scope","text":"<p>Revoke a store item purchase.</p> <p>Important</p> <p>A user must be signed in and have enough credits to call this endpoint! </p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#method_2","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/users/{signedInUserId}/remove_game_user_store_item?store_item_id={storeItemId}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard <code>storeItemId</code> integer Yes Id of the store item to remove"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#data-payload_2","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#headers_2","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the game store items belonging to the user and the credits <code>404</code> text/plain Item not found or not previously purchased <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>credits</code> integer The user's remaining credits <code>game_user_store_items</code> list A list of objects where each one represents the fields of a store item purchased by the user"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#example_2","title":"Example","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#curl_2","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/users/1/purchase_game_user_store_item?store_item_id=337\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response_2","title":"Response","text":"<pre><code>{\n  \"credits\": 135,\n  \"store_items\": [\n    {\n      \"id\": 337,\n      \"name\": \"test\",\n      \"cost\": 123,\n      \"description\": \"a test item\",\n      \"category\": \"generic\",\n      \"icon_url\": null\n    },\n    {\n      \"id\": 338,\n      \"name\": \"test 2\",\n      \"cost\": 321,\n      \"description\": \"another test item\",\n      \"category\": \"main\",\n      \"icon_url\": null\n    }\n  ]\n}\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#getting-purchased-store-items","title":"Getting Purchased Store Items","text":""},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#scope_3","title":"Scope","text":"<p>Get all of the user's purchased store items.</p> <p>Important</p> <p>A user must be signed in and have enough credits to call this endpoint! </p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#method_3","title":"Method","text":"<p>GET</p> <pre><code>/api/v3/users/{signedInUserId}/game_user_store_items\n</code></pre> <p>NOTE</p> <pre><code>Other users can be queried with this route\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#attributes_3","title":"Attributes","text":"Name Type Required Description <code>signedInUserId</code> integer Yes The user id value from the GameFuse game dashboard"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#data-payload_3","title":"Data (payload)","text":"<p>None</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#headers_3","title":"Headers","text":"Name Type Description <code>authentication-token</code> string Found in sign-in or sign-up responses. This token is used for user sessions"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Object containing the game store items belonging to the user and the credits <code>500</code> text/plain Unknown server error"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response-object_3","title":"Response object","text":"Attribute name Type Description <code>credits</code> integer The user's remaining credits <code>game_user_store_items</code> list A list of objects where each one represents the fields of a store item purchased by the user"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#example_3","title":"Example","text":"<p>Example</p>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#curl_3","title":"cURL","text":"<pre><code>curl --request GET \\\n    --header \"authentication-token: abc123\" \\\n    \"https://gamefuse.co/api/v3/users/1/game_user_store_items\"\n</code></pre>"},{"location":"API%20Full%20REST%20API/using%20the%20store%20in%20your%20game/#response_3","title":"Response","text":"<pre><code>{\n  \"credits\": 135,\n  \"store_items\": [\n    {\n      \"id\": 337,\n      \"name\": \"test\",\n      \"cost\": 123,\n      \"description\": \"a test item\",\n      \"category\": \"generic\",\n      \"icon_url\": null\n    },\n    {\n      \"id\": 338,\n      \"name\": \"test 2\",\n      \"cost\": 321,\n      \"description\": \"another test item\",\n      \"category\": \"main\",\n      \"icon_url\": null\n    }\n  ]\n}\n</code></pre>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/","title":"V2.9 Blueprint Migration Guide","text":"<p>This guide will help you migrate your Blueprint code from GameFuse V2.8 to V2.9. There are several breaking changes in this version that require updates to your existing Blueprint code.</p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#getting-started","title":"Getting Started","text":"<p>You should received the update through the Epic Games Launcher, inside <code>Installed Plugins</code> under the Launch button.</p> <p>Start your project and hit play, you will see a list of Blueprint assets that need to be updated. It recommended to open all errored blueprints and work through one blueprint at a time.</p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#the-tldr-for-this-guide","title":"The TLDR for this guide","text":"<ul> <li>compile your blueprints and replace any deprecated functions with their counterpart on the GameFuseManager subsystem.</li> <li>Structs replaced UObjects, your loops need to be refreshed with the new types.</li> <li>Latent nodes have been replaced with delegates, you'll need to bind to them before making API calls. </li> <li>Any Delegates passed to the API now reply with the FGFAPIResponse struct. Your existing delegate bindings on GameFuseUser need to be updated.</li> </ul> <p>What follows are some common fixes for the breaking changes in this update.</p> <p>Splitting Structs</p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#replacing-gamefusecore-with-gamefusemanager","title":"Replacing GameFuseCore with GameFuseManager","text":"<p>The <code>GameFuseCore</code> class has been deprecated and replaced with the new <code>GameFuseManager</code> subsystem. You should be getting compiler warnings about the deprecated functions. Here's how to update your Blueprint code:</p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#1-latent-node-replacement","title":"1. Latent Node Replacement","text":"<p>All functions that previously returned via latent execution pins (OnSuccess, OnFailure) now use delegates instead. You'll need to bind to these delegates to handle callbacks.</p> <p>Example for SetUpGame:</p> <p>Before: </p> <p>After: </p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#2-event-binding","title":"2. Event Binding","text":"<p>For handling responses, you'll need to bind to the appropriate delegate before making the API call. You will likely see these warnings related to the GameFuseUser subsystem.</p> <p>Before: </p> <p>Setting up the delegate: </p> <p>The callback signature has changed and now returns the <code>FGFAPIResponse</code> struct. Update your custom event or function with the new signature:</p> <p>After: </p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#working-with-new-data-structures","title":"Working with New Data Structures","text":""},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#store-items","title":"Store Items","text":"<p>Previously, store items were UObjects (<code>UGameFuseStoreItem</code>). Now they are structs (<code>FGFStoreItem</code>).</p> <p>Before: </p> <p>After: </p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#leaderboard-entries","title":"Leaderboard Entries","text":"<p>These are fixed in the same way as store items.</p>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#additional-notes","title":"Additional Notes","text":"<ol> <li>All deprecated functions will show warning messages in the Blueprint editor</li> <li>The new struct-based system is more efficient and follows Unreal Engine best practices</li> <li>Direct member access to structs is faster than calling getter functions on UObjects</li> <li>See the example project for complete migration examples: https://github.com/game-fuse/game-fuse-unreal-example</li> </ol>"},{"location":"Blueprints%20Unreal/V2.9%20Blueprint%20Migration%20Guide/#common-migration-issues","title":"Common Migration Issues","text":"<ol> <li>Compile Errors: If you see compile errors about missing GameFuseCore, replace with GameFuseManager subsystem</li> <li>Type Mismatches: Update any code that expects UObjects to work with the new struct types</li> <li>Blueprint References: Update any direct references to GameFuseCore in your Blueprint assets</li> </ol>"},{"location":"Blueprints%20Unreal/blueprint-links/","title":"Blueprint links","text":""},{"location":"Blueprints%20Unreal/blueprint-links/#gamefuse-manager","title":"GameFuse Manager","text":"<ul> <li> <p>GameFuse Set Up Game</p> <ul> <li>https://blueprintue.com/blueprint/-u0sbt3i/</li> </ul> </li> <li> <p>GameFuse Fetch Game Variables</p> <ul> <li>https://blueprintue.com/blueprint/ukm1wzgq/</li> </ul> </li> <li> <p>GameFuse Fetch Server Time</p> <ul> <li>https://blueprintue.com/blueprint/-7ex_mom/</li> </ul> </li> <li> <p>GameFuse Forgot Password</p> <ul> <li>https://blueprintue.com/blueprint/2fyyxgwn/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/blueprint-links/#gamefuse-user","title":"GameFuse User","text":"<ul> <li>GameFuse Sign User Up<ul> <li>https://blueprintue.com/blueprint/rpej2u3g/</li> </ul> </li> <li>GameFuse Sign User In<ul> <li>https://blueprintue.com/blueprint/x2ult6su/</li> </ul> </li> <li>GameFuse Log Out<ul> <li>https://blueprintue.com/blueprint/_8l3payu/</li> </ul> </li> <li>GameFuse Credits Functions<ul> <li>https://blueprintue.com/blueprint/45msnril/</li> </ul> </li> <li>GameFuse Score Functions<ul> <li>https://blueprintue.com/blueprint/zc7p784y/</li> </ul> </li> <li>GameFuse Attribute Functions<ul> <li>https://blueprintue.com/blueprint/i3f58-9p/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/blueprint-links/#using-the-store","title":"Using the Store","text":"<ul> <li>GameFuse Fetch Store Items<ul> <li>https://blueprintue.com/blueprint/mxg5x-ii/</li> </ul> </li> <li>GameFuse Fetch Purchased Items<ul> <li>https://blueprintue.com/blueprint/1goi60ut/</li> </ul> </li> <li>GameFuse Purchasing Store Items<ul> <li>https://blueprintue.com/blueprint/sjv71g-n/</li> </ul> </li> <li>GameFuse Removing Store Items<ul> <li>https://blueprintue.com/blueprint/44-lel-u/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/blueprint-links/#leaderboard","title":"Leaderboard","text":"<ul> <li>Fetch Leaderboard Entries<ul> <li>https://blueprintue.com/blueprint/ysmr11jw/</li> </ul> </li> <li>Add Leaderboard Entries<ul> <li>https://blueprintue.com/blueprint/4krvppva/</li> </ul> </li> <li>Clear Leaderboard Entries<ul> <li>https://blueprintue.com/blueprint/ctt8-0po/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/blueprint-links/#friends","title":"Friends","text":"<ul> <li>Fetch Friends List<ul> <li>https://blueprintue.com/blueprint/-8xuz9gt/</li> </ul> </li> <li>Fetch All Friendship Data<ul> <li>https://blueprintue.com/blueprint/ze-b8lrs/</li> </ul> </li> <li>Fetch Friend Requests<ul> <li>https://blueprintue.com/blueprint/4pm0-r_m/</li> </ul> </li> <li>Send Friend Request<ul> <li>https://blueprintue.com/blueprint/fozhy3yq/</li> </ul> </li> <li>Respond to Friend Requests (Accept/Decline/Cancel)<ul> <li>https://blueprintue.com/blueprint/rqyh-9uy/</li> </ul> </li> <li>Unfriend Players<ul> <li>https://blueprintue.com/blueprint/19-36k0g/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/blueprint-links/#groups","title":"Groups","text":"<ul> <li>Create a Group<ul> <li>https://blueprintue.com/blueprint/1idvg84b/</li> </ul> </li> <li>Fetch/Search for Groups<ul> <li>https://blueprintue.com/blueprint/z47mewgv/</li> </ul> </li> <li>Join Groups<ul> <li>https://blueprintue.com/blueprint/6-1o0k7s/</li> </ul> </li> <li>Accept/Decline Group Join Requests<ul> <li>https://blueprintue.com/blueprint/g_elf_as/</li> </ul> </li> <li>Leave a Group<ul> <li>https://blueprintue.com/blueprint/cwhosp1g</li> </ul> </li> <li>Delete a Group<ul> <li>https://blueprintue.com/blueprint/tfeb8hus/</li> </ul> </li> <li>Manage Group Admins<ul> <li>https://blueprintue.com/blueprint/52pf4emg/</li> </ul> </li> <li>Manage Group Attributes<ul> <li>https://blueprintue.com/blueprint/ylrsthg4/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/blueprint-links/#rounds","title":"Rounds","text":"<ul> <li>Create a Game Round<ul> <li>https://blueprintue.com/blueprint/5dl5z2g-/</li> </ul> </li> <li>Fetching Game Rounds<ul> <li>https://blueprintue.com/blueprint/-2v924k2/</li> </ul> </li> <li>Update a Game Round<ul> <li>https://blueprintue.com/blueprint/ia1je9m2/</li> </ul> </li> <li>Delete a Game Round<ul> <li>https://blueprintue.com/blueprint/ix988if_/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/blueprint-links/#chat","title":"Chat","text":"<ul> <li>Create a Chat<ul> <li>https://blueprintue.com/blueprint/2wo07x91/</li> </ul> </li> <li>Fetch Chats and Messages<ul> <li>https://blueprintue.com/blueprint/53u4e0xf/</li> </ul> </li> <li>Send a Message, mark as read<ul> <li>https://blueprintue.com/blueprint/zx6megax/</li> </ul> </li> </ul>"},{"location":"Blueprints%20Unreal/callback%20reference/","title":"GameFuse Callback Reference","text":"<p>This page serves as a reference for all callback types used in the GameFuse systems. It includes information on the different callback types, their signatures, and examples of how to bind to them using various methods.</p> <p>Note</p> <p>These callbacks are the main benefit of using C++ with GameFuse. By using them, you no longer need to retrieve the data from the subsystem, as it is called as a parameter to your function.</p>"},{"location":"Blueprints%20Unreal/callback%20reference/#binding-to-callbacks","title":"Binding to Callbacks","text":"<p>There are several ways to bind to callbacks in Unreal Engine.  Credit to BenUI for the information. Here are the most common methods:</p>"},{"location":"Blueprints%20Unreal/callback%20reference/#using-bindlambda","title":"Using BindLambda","text":"<p>The <code>BindLambda</code> method is useful for simple, anonymous functions:</p> <pre><code>FGFFriendRequestCallback OnSendFriendRequest;\nOnSendFriendRequest.BindLambda([this](const FGFFriendRequest&amp; Request) {\n    // use FriendRequest data ...\n});\n\nFriendsSystem-&gt;SendFriendRequest(Username, OnSendFriendRequest);\n</code></pre>"},{"location":"Blueprints%20Unreal/callback%20reference/#using-binduobject","title":"Using BindUObject","text":"<p>The <code>BindUObject</code> method requires that the target be a UObject:</p> <pre><code>FGFFriendRequestCallback OnSendFriendRequest;\nOnSendFriendRequest.BindUObject(this, &amp;ThisClass::HandleFriendRequestSent);\n\nFriendsSystem-&gt;SendFriendRequest(Username, OnSendFriendRequest);\n\nvoid HandleFriendRequestSent(const FGFFriendRequest&amp; Request) {\n    // use FriendRequest data ...\n}\n</code></pre>"},{"location":"Blueprints%20Unreal/callback%20reference/#using-binddynamic-for-blueprint-accesible-functions","title":"Using BindDynamic (for Blueprint accesible functions)","text":"<p>The <code>BindDynamic</code> method is used for Blueprint-exposed callbacks:</p> <pre><code>FGFFriendRequestCallback OnSendFriendRequest;\nOnSendFriendRequest.BindUObject(this, &amp;ThisClass::HandleFriendRequestSent);\n\n\nFriendsSystem-&gt;SendFriendRequest(Username, Callback);\n\nUFUNCTION(BlueprintCallable)\nvoid HandleFriendRequestSent(const FGFFriendRequest&amp; Request) {\n    // use FriendRequest data ...\n}\n</code></pre>"},{"location":"Blueprints%20Unreal/callback%20reference/#callback-types-overview","title":"Callback Types Overview","text":"<p>GameFuse uses a variety of callback types for different operations. These callbacks follow a consistent naming pattern:</p> <ul> <li><code>FGF[Feature]Callback</code>: For callbacks that return a single item</li> <li><code>FGF[Feature]sCallback</code>: For callbacks that return an array of items</li> <li><code>FGF[Feature]ActionCallback</code>: For callbacks that return a success/failure boolean</li> </ul> <p>For Blueprint compatibility, there's also a generic callback type: - <code>FGFApiCallback</code>: Generic callback for Blueprint usage</p>"},{"location":"Blueprints%20Unreal/callback%20reference/#common-callback-types","title":"Common Callback Types","text":""},{"location":"Blueprints%20Unreal/callback%20reference/#friends-system-callbacks","title":"Friends System Callbacks","text":"Callback Type Signature Description <code>FGFFriendRequestCallback</code> <code>void(const FGFFriendRequest&amp;)</code> Called when a friend request is sent <code>FGFFriendRequestsCallback</code> <code>void(const TArray&lt;FGFFriendRequest&gt;&amp;)</code> Called when friend requests are fetched <code>FGFFriendsCallback</code> <code>void(const TArray&lt;FGFUserData&gt;&amp;)</code> Called when friends list is fetched <code>FGFFriendActionCallback</code> <code>void(bool)</code> Called when a friend action (accept/decline/cancel/unfriend) is performed ### Groups System Callbacks Callback Type Signature Description <code>FGFGroupCallback</code> <code>void(const FGFGroup&amp;)</code> Called when a group is created or fetched <code>FGFGroupsCallback</code> <code>void(const TArray&lt;FGFGroup&gt;&amp;)</code> Called when multiple groups are fetched <code>FGFGroupActionCallback</code> <code>void(bool)</code> Called when a group action is performed"},{"location":"Blueprints%20Unreal/callback%20reference/#chat-system-callbacks","title":"Chat System Callbacks","text":"Callback Type Signature Description <code>FGFChatCallback</code> <code>void(const FGFChat&amp;)</code> Called when a chat is created or fetched <code>FGFChatsCallback</code> <code>void(const TArray&lt;FGFChat&gt;&amp;)</code> Called when multiple chats are fetched <code>FGFMessageCallback</code> <code>void(const FGFMessage&amp;)</code> Called when a message is sent <code>FGFMessagesCallback</code> <code>void(const TArray&lt;FGFMessage&gt;&amp;)</code> Called when messages are fetched <code>FGFMessageActionCallback</code> <code>void(bool)</code> Called when a message action is performed"},{"location":"Blueprints%20Unreal/callback%20reference/#rounds-system-callbacks","title":"Rounds System Callbacks","text":"Callback Type Signature Description <code>FGFGameRoundCallback</code> <code>void(const FGFGameRound&amp;)</code> Called when a game round is created, fetched, or updated <code>FGFGameRoundsCallback</code> <code>void(const TArray&lt;FGFGameRound&gt;&amp;)</code> Called when multiple game rounds are fetched <code>FGFGameRoundActionCallback</code> <code>void(bool)</code> Called when a game round action is performed"},{"location":"Blueprints%20Unreal/callback%20reference/#additional-resources","title":"Additional Resources","text":"<p>For more information on delegates in Unreal Engine, check out these resources:</p> <ul> <li>Advanced Delegates in C++ - A comprehensive guide to delegates in Unreal Engine</li> <li>Unreal Engine Documentation on Delegates</li> </ul>"},{"location":"Blueprints%20Unreal/chat/","title":"Chat System","text":"<p>The GameFuse Chat System allows you to implement real-time chat functionality in your game. This includes creating chats, sending messages, and managing message read status.</p>"},{"location":"Blueprints%20Unreal/chat/#getting-started-with-chat","title":"Getting Started with Chat","text":"<p>To use the GameFuse Chat system in Blueprints, you'll need to access the GameFuse Chat subsystem through Get Game Instance \u2192 Get Subsystem \u2192 GameFuse Chat.</p>"},{"location":"Blueprints%20Unreal/chat/#creating-a-chat","title":"Creating a Chat","text":"<p>Create a new chat conversation with multiple participants:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/chat/#fetching-chats-and-messages","title":"Fetching Chats and Messages","text":""},{"location":"Blueprints%20Unreal/chat/#fetch-all-chats","title":"Fetch All Chats","text":"<p>Get all chats the current user is participating in:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/chat/#fetch-messages-for-a-chat","title":"Fetch Messages for a Chat","text":"<p>Get all messages in a specific chat:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/chat/#sending-messages","title":"Sending Messages","text":"<p>Send a message in an existing chat:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/chat/#marking-messages-as-read","title":"Marking Messages as Read","text":"<p>Mark messages as read to track message status:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/chat/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/chat/#create-chat","title":"Create Chat","text":"Parameter Type Description <code>Participant Usernames</code> <code>Array of Strings</code> Usernames of users to include in the chat <code>Initial Message</code> <code>String</code> Optional first message for the chat"},{"location":"Blueprints%20Unreal/chat/#send-message","title":"Send Message","text":"Parameter Type Description <code>Chat ID</code> <code>Integer</code> Unique identifier of the chat <code>Message Text</code> <code>String</code> The message content to send"},{"location":"Blueprints%20Unreal/chat/#fetchmark-messages","title":"Fetch/Mark Messages","text":"Parameter Type Description <code>Chat ID</code> <code>Integer</code> Unique identifier of the chat (for fetching) <code>Message ID</code> <code>Integer</code> Unique identifier of the message (for marking as read)"},{"location":"Blueprints%20Unreal/chat/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/chat/#create-chat_1","title":"Create Chat","text":"HTTP Status Code Description <code>200</code> OK - Chat created successfully <code>400</code> Bad request - Invalid parameters or usernames <code>401</code> Unauthorized - User not signed in <code>404</code> One or more users not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/chat/#send-message_1","title":"Send Message","text":"HTTP Status Code Description <code>200</code> OK - Message sent successfully <code>400</code> Bad request - Invalid chat ID or empty message <code>401</code> Unauthorized - User not signed in <code>403</code> Forbidden - User not participant in chat <code>404</code> Chat not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/chat/#fetch-chatsmessages","title":"Fetch Chats/Messages","text":"HTTP Status Code Description <code>200</code> OK - Data fetched successfully <code>401</code> Unauthorized - User not signed in <code>404</code> Chat not found (for specific chat fetch) <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/chat/#mark-message-as-read","title":"Mark Message as Read","text":"HTTP Status Code Description <code>200</code> OK - Message marked as read <code>400</code> Bad request - Invalid message ID <code>401</code> Unauthorized - User not signed in <code>404</code> Message not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/chat/#data-structures","title":"Data Structures","text":""},{"location":"Blueprints%20Unreal/chat/#chat-struct","title":"Chat Struct","text":"Property Type Description <code>ID</code> <code>Integer</code> Unique chat identifier <code>Participants</code> <code>Array</code> List of chat participants <code>Last Message</code> <code>Message Struct</code> Most recent message in the chat <code>Unread Count</code> <code>Integer</code> Number of unread messages for current user <code>Created At</code> <code>String</code> When the chat was created <code>Updated At</code> <code>String</code> When the chat was last updated"},{"location":"Blueprints%20Unreal/chat/#message-struct","title":"Message Struct","text":"Property Type Description <code>ID</code> <code>Integer</code> Unique message identifier <code>Chat ID</code> <code>Integer</code> ID of the chat this message belongs to <code>Sender Username</code> <code>String</code> Username of the message sender <code>Sender ID</code> <code>Integer</code> User ID of the message sender <code>Message Text</code> <code>String</code> Content of the message <code>Is Read</code> <code>Boolean</code> Whether the current user has read this message <code>Created At</code> <code>String</code> When the message was sent"},{"location":"Blueprints%20Unreal/chat/#chat-participant-struct","title":"Chat Participant Struct","text":"Property Type Description <code>User ID</code> <code>Integer</code> Unique user identifier <code>Username</code> <code>String</code> User's display name <code>Last Read At</code> <code>String</code> When the user last read messages in this chat"},{"location":"Blueprints%20Unreal/chat/#next-steps","title":"Next Steps","text":"<ul> <li>Friends - Create chats with friends</li> <li>Groups - Implement group chat functionality</li> <li>Custom User Data - Store chat preferences</li> <li>Using Credits - Premium chat features </li> </ul>"},{"location":"Blueprints%20Unreal/class%20methods/","title":"Class Methods","text":"<p>Check each model below for a list of plugin nodes and attributes. This is also available in the Example Project blueprint called \"BlueprintDocs\"</p>"},{"location":"Blueprints%20Unreal/creating%20store%20items%20on%20the%20web/","title":"Creating store items on the web","text":"<p>See Generic: Creating store items on the web.</p>"},{"location":"Blueprints%20Unreal/custom%20user%20data/","title":"Custom User Data","text":"<p>Custom user data allows you to store key-value pairs for each user, providing flexible data storage for game-specific information beyond the standard user properties.</p>"},{"location":"Blueprints%20Unreal/custom%20user%20data/#overview","title":"Overview","text":"<p>Custom user data (also known as user attributes) is a simple way to save any kind of data for a specific user. This system allows you to store arbitrary key-value pairs that are automatically synced across sessions.</p>"},{"location":"Blueprints%20Unreal/custom%20user%20data/#managing-user-attributes","title":"Managing User Attributes","text":""},{"location":"Blueprints%20Unreal/custom%20user%20data/#getsetremove-user-attributes","title":"Get/Set/Remove User Attributes","text":"<p>Store and retrieve custom data for the current user:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/custom%20user%20data/#data-format-and-limitations","title":"Data Format and Limitations","text":"<ul> <li>Keys: Must be strings (e.g., \"world_2_unlocked\", \"player_color\")</li> <li>Values: Must be strings (e.g., \"true\", \"red\", \"Onion\")</li> <li>Complex Data: Use JSON strings for arrays/objects</li> <li>Automatic Sync: Data is downloaded on login and synced when updated</li> </ul>"},{"location":"Blueprints%20Unreal/custom%20user%20data/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/custom%20user%20data/#set-user-attribute","title":"Set User Attribute","text":"Parameter Type Description <code>Attribute Key</code> <code>String</code> The name/identifier for the attribute <code>Attribute Value</code> <code>String</code> The value to store"},{"location":"Blueprints%20Unreal/custom%20user%20data/#getremove-user-attribute","title":"Get/Remove User Attribute","text":"Parameter Type Description <code>Attribute Key</code> <code>String</code> The name/identifier of the attribute to retrieve/remove"},{"location":"Blueprints%20Unreal/custom%20user%20data/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/custom%20user%20data/#setremove-user-attribute","title":"Set/Remove User Attribute","text":"HTTP Status Code Description <code>200</code> OK - Attribute updated/removed successfully <code>400</code> Bad request - Invalid key or value <code>401</code> Unauthorized - User not signed in <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/custom%20user%20data/#get-user-attribute","title":"Get User Attribute","text":"HTTP Status Code Description <code>200</code> OK - Attribute retrieved successfully <code>401</code> Unauthorized - User not signed in <code>404</code> Attribute not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/custom%20user%20data/#next-steps","title":"Next Steps","text":"<ul> <li>Using Credits - Manage user currency</li> <li>In Game Leaderboard - Track user achievements</li> <li>Friends - Social features and user data</li> <li>Groups - Group-specific user data</li> </ul>"},{"location":"Blueprints%20Unreal/forgot%20password/","title":"Forgot Password","text":"<p>The GameFuse Forgot Password system provides a seamless way to help users recover their accounts when they forget their login credentials.</p>"},{"location":"Blueprints%20Unreal/forgot%20password/#overview","title":"Overview","text":"<p>You can implement this simple method in your app and GameFuse will handle all the emails and password resets on the backend. The system automatically sends branded emails that match your app's appearance.</p>"},{"location":"Blueprints%20Unreal/forgot%20password/#password-recovery-process","title":"Password Recovery Process","text":"<p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/forgot%20password/#function-parameters","title":"Function Parameters","text":"Parameter Type Description <code>Email</code> <code>String</code> The email address of the user requesting password reset"},{"location":"Blueprints%20Unreal/forgot%20password/#function-return-values","title":"Function Return Values","text":"HTTP Status Code Description <code>200</code> OK - Password reset email sent successfully <code>400</code> Bad request - Invalid email format <code>404</code> Email address not found in system <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/forgot%20password/#how-it-works","title":"How It Works","text":"<ol> <li>User Requests Reset: Player enters their email in your app</li> <li>Email Sent: GameFuse sends a branded password reset email</li> <li>User Clicks Link: Email contains a secure reset link</li> <li>Password Reset: User creates a new password on GameFuse website</li> <li>Return to App: User is instructed to login with new password</li> </ol>"},{"location":"Blueprints%20Unreal/forgot%20password/#email-branding","title":"Email Branding","text":"<p>The password reset email is automatically branded with: - Your app's name - Your app's logo image - Your app's color scheme - Sender email masked with your app's name</p> <p>This ensures a cohesive user experience that matches your game's branding.</p> <p>For detailed information about the user experience flow, see Generic: Forgot Password - User Experience.</p>"},{"location":"Blueprints%20Unreal/forgot%20password/#next-steps","title":"Next Steps","text":"<ul> <li>Signing Game Users In - After password reset</li> <li>Signing Game Users Up - For new users</li> <li>Getting Started - Initial setup guide</li> </ul>"},{"location":"Blueprints%20Unreal/friends/","title":"Friends System","text":"<p>The GameFuse Friends System allows you to implement social features in your game, such as sending friend requests, accepting or declining requests, and managing a friends list.</p>"},{"location":"Blueprints%20Unreal/friends/#getting-started-with-friends","title":"Getting Started with Friends","text":"<p>To use the GameFuse Friends system in Blueprints, you'll need to access the GameFuse Friends subsystem through Get Game Instance \u2192 Get Subsystem \u2192 GameFuse Friends.</p>"},{"location":"Blueprints%20Unreal/friends/#sending-friend-requests","title":"Sending Friend Requests","text":"<p>You can send a friend request to another user by their username:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#accepting-friend-requests","title":"Accepting Friend Requests","text":"<p>When someone sends you a friend request, you can accept it:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#declining-friend-requests","title":"Declining Friend Requests","text":"<p>You can decline a friend request:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#canceling-friend-requests","title":"Canceling Friend Requests","text":"<p>If you've sent a friend request and want to cancel it:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#fetching-friends-list","title":"Fetching Friends List","text":"<p>To get the current user's friends list:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#fetching-friend-requests","title":"Fetching Friend Requests","text":"<p>To get pending friend requests:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#fetching-all-friendship-data","title":"Fetching All Friendship Data","text":"<p>To get comprehensive friendship information including friends, sent requests, and received requests:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#unfriending-players","title":"Unfriending Players","text":"<p>To remove someone from your friends list:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/friends/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/friends/#send-friend-request","title":"Send Friend Request","text":"Parameter Type Description <code>Username</code> <code>String</code> The username of the player to send a friend request to"},{"location":"Blueprints%20Unreal/friends/#acceptdeclinecancel-friend-request-unfriend","title":"Accept/Decline/Cancel Friend Request &amp; Unfriend","text":"Parameter Type Description <code>Friendship ID</code> <code>Integer</code> The unique ID of the friendship/friend request"},{"location":"Blueprints%20Unreal/friends/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/friends/#send-friend-request_1","title":"Send Friend Request","text":"HTTP Status Code Description <code>200</code> OK - Friend request sent successfully <code>400</code> Bad request - Invalid username or parameters <code>401</code> Unauthorized - User not signed in <code>404</code> User not found <code>409</code> Conflict - Friend request already exists or users are already friends <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/friends/#acceptdeclinecancel-friend-request","title":"Accept/Decline/Cancel Friend Request","text":"HTTP Status Code Description <code>200</code> OK - Action completed successfully <code>400</code> Bad request - Invalid friendship ID <code>401</code> Unauthorized - User not signed in <code>404</code> Friend request not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/friends/#fetch-friendsrequests","title":"Fetch Friends/Requests","text":"HTTP Status Code Description <code>200</code> OK - Data fetched successfully <code>401</code> Unauthorized - User not signed in <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/friends/#unfriend","title":"Unfriend","text":"HTTP Status Code Description <code>200</code> OK - Friend removed successfully <code>400</code> Bad request - Invalid friendship ID <code>401</code> Unauthorized - User not signed in <code>404</code> Friendship not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/friends/#data-structures","title":"Data Structures","text":""},{"location":"Blueprints%20Unreal/friends/#friend-request-struct","title":"Friend Request Struct","text":"Property Type Description <code>Friendship ID</code> <code>Integer</code> Unique identifier for the friendship <code>Other User</code> <code>User Struct</code> Information about the other user <code>Status</code> <code>String</code> Status of the request (pending, accepted, etc.) <code>Created At</code> <code>String</code> When the request was created"},{"location":"Blueprints%20Unreal/friends/#user-struct","title":"User Struct","text":"Property Type Description <code>ID</code> <code>Integer</code> Unique user ID <code>Username</code> <code>String</code> User's display name <code>Email</code> <code>String</code> User's email address <code>Credits</code> <code>Integer</code> User's current credit balance"},{"location":"Blueprints%20Unreal/friends/#next-steps","title":"Next Steps","text":"<ul> <li>Groups - Learn about group functionality</li> <li>Chat - Implement messaging between friends</li> <li>Custom User Data - Store additional user information</li> <li>In Game Leaderboard - Show friends' scores </li> </ul>"},{"location":"Blueprints%20Unreal/game%20connection%20and%20variables/","title":"Game Connection and Variables","text":""},{"location":"Blueprints%20Unreal/game%20connection%20and%20variables/#connecting-to-gamefuse","title":"Connecting To GameFuse","text":"<p>The first step in using GameFuse after it is installed and your account is  regestered is to use the <code>SetUpGame</code> node.</p> <p>After the step you can run other nodes to register, sign in users, read and write game data.</p> <p>This process should be one of the first things that happen when your game starts. It is reccommneded to do this from UGameInstance or Starting from any blueprints in your game use the <code>SetUpGame</code> node as part of your game initialization process. </p> <p>Copy Code</p>"},{"location":"Blueprints%20Unreal/game%20connection%20and%20variables/#game-variables","title":"Game Variables","text":"<p>Your Game Variables will be fetched when you verify and connect with your game. You can also re-fetch them whenever you like.</p> <p>In any Blueprints use:</p> <p>Copy Code</p>"},{"location":"Blueprints%20Unreal/getting%20started/","title":"Getting Started with GameFuse Blueprints","text":"<p>The first step of integrating GameFuse with your project is to make an account.</p> <p>Sign Up</p> <p>After creating your account, add your first game and note the ID and API Token.</p> <p>With this setup, you can now connect via your game client.</p>"},{"location":"Blueprints%20Unreal/getting%20started/#installation","title":"Installation","text":"<ol> <li>Download the Plugin from GitHub or the Unreal Store</li> <li>Unzip the code</li> <li>Add it to your UnrealEngine project in the Plugins folder</li> <li>Enable the plugin inside the engine</li> </ol> <ul> <li>Fab Store</li> <li>Unreal Plugin Source</li> </ul>"},{"location":"Blueprints%20Unreal/getting%20started/#quick-start-example","title":"Quick Start Example","text":"<p>Here's a basic example of how to set up GameFuse in your game using Blueprints:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/getting%20started/#key-changes-in-v29","title":"Key Changes in V2.9","text":"<p>GameFuse V2.9 introduced significant architectural changes:</p> <ul> <li>Subsystem Architecture: All GameFuse functionality is now provided through Unreal Engine subsystems</li> <li>Callback Events: Replaced latent nodes with callback events for better performance</li> <li>Struct-Based Data: Replaced UObjects with structs for better performance and memory usage</li> <li>Request Tracking: All API calls return a unique request ID for tracking</li> </ul> <p>For detailed migration information, see the V2.9 Migration Guide.</p>"},{"location":"Blueprints%20Unreal/getting%20started/#example-project","title":"Example Project","text":"<p>Click on the following link to see an example of GameFuse implemented in Unreal 5.4.4:</p> <p>Unreal Example</p>"},{"location":"Blueprints%20Unreal/getting%20started/#next-steps","title":"Next Steps","text":"<ul> <li>Sign Up Users - Learn how to create user accounts</li> <li>Sign In Users - Learn how to authenticate users</li> <li>Class Methods - Reference for all available methods</li> <li>Callback Reference - Learn about the callback system</li> </ul>"},{"location":"Blueprints%20Unreal/groups/","title":"Groups System","text":"<p>The GameFuse Groups System allows you to create and manage groups of users in your game. This includes creating groups, joining groups, managing group membership, and handling group attributes.</p>"},{"location":"Blueprints%20Unreal/groups/#getting-started-with-groups","title":"Getting Started with Groups","text":"<p>To use the GameFuse Groups system in Blueprints, you'll need to access the GameFuse Groups subsystem through Get Game Instance \u2192 Get Subsystem \u2192 GameFuse Groups.</p>"},{"location":"Blueprints%20Unreal/groups/#creating-a-group","title":"Creating a Group","text":"<p>You can create a new group with customizable properties:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#fetching-groups","title":"Fetching Groups","text":""},{"location":"Blueprints%20Unreal/groups/#searchfetch-all-groups","title":"Search/Fetch All Groups","text":"<p>Get all available groups or search for specific groups:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#fetch-specific-group","title":"Fetch Specific Group","text":"<p>Get detailed information about a specific group:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#joining-groups","title":"Joining Groups","text":""},{"location":"Blueprints%20Unreal/groups/#join-public-groups","title":"Join Public Groups","text":"<p>Join a public group directly:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#request-to-join-private-groups","title":"Request to Join Private Groups","text":"<p>Request to join a private or invite-only group:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#managing-join-requests","title":"Managing Join Requests","text":""},{"location":"Blueprints%20Unreal/groups/#accept-join-requests","title":"Accept Join Requests","text":"<p>As a group admin, accept pending join requests:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#decline-join-requests","title":"Decline Join Requests","text":"<p>As a group admin, decline pending join requests:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#leaving-groups","title":"Leaving Groups","text":"<p>Leave a group you're currently a member of:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#deleting-groups","title":"Deleting Groups","text":"<p>As a group owner, delete a group:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#managing-group-admins","title":"Managing Group Admins","text":""},{"location":"Blueprints%20Unreal/groups/#addremove-group-admins","title":"Add/Remove Group Admins","text":"<p>Manage administrative privileges within the group:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#managing-group-attributes","title":"Managing Group Attributes","text":""},{"location":"Blueprints%20Unreal/groups/#setget-group-attributes","title":"Set/Get Group Attributes","text":"<p>Store and retrieve custom data for groups:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/groups/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/groups/#create-group","title":"Create Group","text":"Parameter Type Description <code>Group Name</code> <code>String</code> The name of the group <code>Group Type</code> <code>String</code> Type: \"public\", \"private\", or \"invite-only\" <code>Max Group Size</code> <code>Integer</code> Maximum number of members (optional) <code>Description</code> <code>String</code> Group description (optional)"},{"location":"Blueprints%20Unreal/groups/#joinleavedelete-group","title":"Join/Leave/Delete Group","text":"Parameter Type Description <code>Group ID</code> <code>Integer</code> Unique identifier of the group"},{"location":"Blueprints%20Unreal/groups/#manage-membersadmins","title":"Manage Members/Admins","text":"Parameter Type Description <code>Group ID</code> <code>Integer</code> Unique identifier of the group <code>User ID</code> <code>Integer</code> Unique identifier of the user"},{"location":"Blueprints%20Unreal/groups/#group-attributes","title":"Group Attributes","text":"Parameter Type Description <code>Group ID</code> <code>Integer</code> Unique identifier of the group <code>Attribute Key</code> <code>String</code> Name of the attribute <code>Attribute Value</code> <code>String</code> Value to store"},{"location":"Blueprints%20Unreal/groups/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/groups/#create-group_1","title":"Create Group","text":"HTTP Status Code Description <code>200</code> OK - Group created successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>409</code> Conflict - Group name already exists <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/groups/#joinleave-group","title":"Join/Leave Group","text":"HTTP Status Code Description <code>200</code> OK - Action completed successfully <code>400</code> Bad request - Invalid group ID <code>401</code> Unauthorized - User not signed in <code>403</code> Forbidden - Not allowed to perform action <code>404</code> Group not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/groups/#manage-group","title":"Manage Group","text":"HTTP Status Code Description <code>200</code> OK - Management action completed <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>403</code> Forbidden - Insufficient permissions <code>404</code> Group or user not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/groups/#data-structures","title":"Data Structures","text":""},{"location":"Blueprints%20Unreal/groups/#group-struct","title":"Group Struct","text":"Property Type Description <code>ID</code> <code>Integer</code> Unique group identifier <code>Name</code> <code>String</code> Group name <code>Description</code> <code>String</code> Group description <code>Group Type</code> <code>String</code> Type of group (public, private, invite-only) <code>Max Group Size</code> <code>Integer</code> Maximum number of members <code>Current Size</code> <code>Integer</code> Current number of members <code>Owner ID</code> <code>Integer</code> User ID of the group owner <code>Created At</code> <code>String</code> When the group was created <code>Members</code> <code>Array</code> List of group members <code>Admins</code> <code>Array</code> List of group administrators"},{"location":"Blueprints%20Unreal/groups/#group-member-struct","title":"Group Member Struct","text":"Property Type Description <code>User ID</code> <code>Integer</code> Unique user identifier <code>Username</code> <code>String</code> User's display name <code>Role</code> <code>String</code> Member role (owner, admin, member) <code>Joined At</code> <code>String</code> When the user joined the group"},{"location":"Blueprints%20Unreal/groups/#next-steps","title":"Next Steps","text":"<ul> <li>Chat - Implement group chat functionality</li> <li>Friends - Invite friends to groups</li> <li>In Game Leaderboard - Create group leaderboards</li> <li>Custom User Data - Store group-related user data </li> </ul>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/","title":"In Game Leaderboard","text":"<p>GameFuse provides a comprehensive leaderboard system that allows you to track and display player scores, achievements, and progress across different categories.</p>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#overview","title":"Overview","text":"<p>The leaderboard system supports multiple named leaderboards, allowing you to categorize different types of achievements (e.g., \"High Score\", \"Speed Run\", \"Daily Challenge\"). Each entry can include additional attributes for rich metadata.</p>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#adding-leaderboard-entries","title":"Adding Leaderboard Entries","text":""},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#basic-score-entry","title":"Basic Score Entry","text":"<p>You can add a simple score entry to a leaderboard:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#score-entry-with-attributes","title":"Score Entry with Attributes","text":"<p>For more detailed leaderboard entries, you can include additional metadata:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#fetching-leaderboard-entries","title":"Fetching Leaderboard Entries","text":""},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#fetch-all-entries-for-a-leaderboard","title":"Fetch All Entries for a Leaderboard","text":"<p>Get all high scores for a specific leaderboard:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#fetch-user-specific-entries","title":"Fetch User-Specific Entries","text":"<p>Get all entries for the current user across a specific leaderboard:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#clearing-leaderboard-entries","title":"Clearing Leaderboard Entries","text":"<p>You can clear all entries for the current user on a specific leaderboard:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#add-leaderboard-entry","title":"Add Leaderboard Entry","text":"Parameter Type Description <code>Leaderboard Name</code> <code>String</code> The name/category of the leaderboard <code>Score</code> <code>Integer</code> The score value to add"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#add-leaderboard-entry-with-attributes","title":"Add Leaderboard Entry With Attributes","text":"Parameter Type Description <code>Leaderboard Name</code> <code>String</code> The name/category of the leaderboard <code>Score</code> <code>Integer</code> The score value to add <code>Extra Attributes</code> <code>String</code> Additional metadata in JSON format"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#fetchclear-leaderboard-entries","title":"Fetch/Clear Leaderboard Entries","text":"Parameter Type Description <code>Leaderboard Name</code> <code>String</code> The name/category of the leaderboard"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#add-leaderboard-entry_1","title":"Add Leaderboard Entry","text":"HTTP Status Code Description <code>200</code> OK - Entry added successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#fetch-leaderboard-entries","title":"Fetch Leaderboard Entries","text":"HTTP Status Code Description <code>200</code> OK - Entries fetched successfully <code>400</code> Bad request - Invalid leaderboard name <code>401</code> Unauthorized - User not signed in <code>404</code> Leaderboard not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#clear-leaderboard-entries","title":"Clear Leaderboard Entries","text":"HTTP Status Code Description <code>200</code> OK - Entries cleared successfully <code>400</code> Bad request - Invalid leaderboard name <code>401</code> Unauthorized - User not signed in <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#data-structures","title":"Data Structures","text":""},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#leaderboard-entry-struct","title":"Leaderboard Entry Struct","text":"Property Type Description <code>ID</code> <code>Integer</code> Unique identifier for the entry <code>Score</code> <code>Integer</code> The score value <code>Username</code> <code>String</code> Username of the player who achieved this score <code>User ID</code> <code>Integer</code> Unique ID of the player <code>Leaderboard Name</code> <code>String</code> Name of the leaderboard category <code>Extra Attributes</code> <code>String</code> Additional metadata in JSON format <code>Created At</code> <code>String</code> Timestamp when the entry was created"},{"location":"Blueprints%20Unreal/in%20game%20leaderboard/#next-steps","title":"Next Steps","text":"<ul> <li>Friends - Show friends' scores on leaderboards</li> <li>Using Credits - Reward players with credits for achievements</li> <li>Custom User Data - Store additional player statistics</li> <li>Groups - Create group-based leaderboards</li> </ul>"},{"location":"Blueprints%20Unreal/rounds/","title":"Rounds System","text":"<p>The GameFuse Rounds System allows you to track and manage game rounds in your game. This includes creating rounds, fetching round data, updating rounds, and managing round metadata.</p>"},{"location":"Blueprints%20Unreal/rounds/#getting-started-with-rounds","title":"Getting Started with Rounds","text":"<p>To use the GameFuse Rounds system in Blueprints, you'll need to access the GameFuse Rounds subsystem through Get Game Instance \u2192 Get Subsystem \u2192 GameFuse Rounds.</p>"},{"location":"Blueprints%20Unreal/rounds/#creating-a-game-round","title":"Creating a Game Round","text":"<p>Create a new game round to track player performance and statistics:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/rounds/#fetching-game-rounds","title":"Fetching Game Rounds","text":""},{"location":"Blueprints%20Unreal/rounds/#fetch-all-rounds","title":"Fetch All Rounds","text":"<p>Get all game rounds for the current user:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/rounds/#fetch-rounds-by-game-type","title":"Fetch Rounds by Game Type","text":"<p>Get rounds filtered by a specific game type:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/rounds/#updating-a-game-round","title":"Updating a Game Round","text":"<p>Update an existing game round with new data:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/rounds/#deleting-a-game-round","title":"Deleting a Game Round","text":"<p>Remove a game round from the system:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/rounds/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/rounds/#create-game-round","title":"Create Game Round","text":"Parameter Type Description <code>Score</code> <code>Integer</code> Player's score for this round <code>Game Type</code> <code>String</code> Type/category of the game round <code>Start Time</code> <code>String</code> When the round started (ISO format, optional) <code>End Time</code> <code>String</code> When the round ended (ISO format, optional) <code>Metadata</code> <code>String</code> Additional data in JSON format (optional)"},{"location":"Blueprints%20Unreal/rounds/#update-game-round","title":"Update Game Round","text":"Parameter Type Description <code>Round ID</code> <code>Integer</code> Unique identifier of the round to update <code>Score</code> <code>Integer</code> Updated score (optional) <code>Game Type</code> <code>String</code> Updated game type (optional) <code>Metadata</code> <code>String</code> Updated metadata in JSON format (optional)"},{"location":"Blueprints%20Unreal/rounds/#fetchdelete-game-round","title":"Fetch/Delete Game Round","text":"Parameter Type Description <code>Round ID</code> <code>Integer</code> Unique identifier of the round (for deletion) <code>Game Type</code> <code>String</code> Filter by game type (for filtered fetch)"},{"location":"Blueprints%20Unreal/rounds/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/rounds/#createupdate-game-round","title":"Create/Update Game Round","text":"HTTP Status Code Description <code>200</code> OK - Round created/updated successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/rounds/#fetch-game-rounds","title":"Fetch Game Rounds","text":"HTTP Status Code Description <code>200</code> OK - Rounds fetched successfully <code>401</code> Unauthorized - User not signed in <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/rounds/#delete-game-round","title":"Delete Game Round","text":"HTTP Status Code Description <code>200</code> OK - Round deleted successfully <code>400</code> Bad request - Invalid round ID <code>401</code> Unauthorized - User not signed in <code>404</code> Round not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/rounds/#data-structures","title":"Data Structures","text":""},{"location":"Blueprints%20Unreal/rounds/#game-round-struct","title":"Game Round Struct","text":"Property Type Description <code>ID</code> <code>Integer</code> Unique round identifier <code>User ID</code> <code>Integer</code> ID of the user who played this round <code>Score</code> <code>Integer</code> Player's score for this round <code>Game Type</code> <code>String</code> Type/category of the game round <code>Start Time</code> <code>String</code> When the round started <code>End Time</code> <code>String</code> When the round ended <code>Duration</code> <code>Integer</code> Round duration in seconds <code>Metadata</code> <code>String</code> Additional data in JSON format <code>Created At</code> <code>String</code> When the round record was created <code>Updated At</code> <code>String</code> When the round record was last updated"},{"location":"Blueprints%20Unreal/rounds/#next-steps","title":"Next Steps","text":"<ul> <li>In Game Leaderboard - Use round scores for leaderboards</li> <li>Using Credits - Award credits based on performance</li> <li>Custom User Data - Store additional player statistics</li> <li>Friends - Compare round performance with friends </li> </ul>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/","title":"Signing Game Users In","text":"<p>GameFuse provides a secure authentication system that allows registered users to sign in to your game from any device.</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#overview","title":"Overview","text":"<p>The sign-in process authenticates users using their email and password. Once successfully signed in, users can access their saved data, credits, store items, and other GameFuse features.</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#user-authentication","title":"User Authentication","text":"<p>Blueprint Example</p> <p></p> <p>Important: Email and password (not username) are required for sign-in.</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#user-logout","title":"User Logout","text":"<p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#sign-in","title":"Sign In","text":"Parameter Type Description <code>Email</code> <code>String</code> User's registered email address <code>Password</code> <code>String</code> User's password"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#log-out","title":"Log Out","text":"<p>No parameters required - simply clears the current user session.</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#sign-in_1","title":"Sign In","text":"HTTP Status Code Description <code>200</code> OK - User signed in successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - Invalid email or password <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#log-out_1","title":"Log Out","text":"HTTP Status Code Description <code>200</code> OK - User logged out successfully <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#session-management","title":"Session Management","text":"<p>After successful sign-in: - User data is automatically cached locally - All GameFuse features become available - User remains signed in until logout or session expiry</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#security-considerations","title":"Security Considerations","text":"<ul> <li>Never store passwords in plain text</li> <li>Use secure methods for credential storage</li> <li>Implement proper session timeout handling</li> <li>Consider implementing multi-factor authentication for sensitive games</li> </ul>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20in/#next-steps","title":"Next Steps","text":"<p>After successful sign-in: - Using Credits - Learn about the credit system - Using the Store - Access store functionality - Custom User Data - Work with user-specific data - Friends - Implement social features</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20up/","title":"Signing Game Users Up","text":"<p>GameFuse provides a comprehensive user registration system that allows players to create accounts, which are saved online and accessible across devices.</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20up/#overview","title":"Overview","text":"<p>Enable users to sign up in your Unreal Engine game using GameFuse's user management system. These users will be saved in your GameFuse game database and can then login from other devices, since the data is saved online.</p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20up/#user-registration","title":"User Registration","text":"<p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/signing%20game%20users%20up/#function-parameters","title":"Function Parameters","text":"Parameter Type Description <code>Email</code> <code>String</code> User's email address (must be unique and valid format) <code>Password</code> <code>String</code> User's password (minimum requirements set in GameFuse dashboard) <code>Password Confirmation</code> <code>String</code> Must exactly match the password field <code>Username</code> <code>String</code> User's display name (must be unique)"},{"location":"Blueprints%20Unreal/signing%20game%20users%20up/#function-return-values","title":"Function Return Values","text":"HTTP Status Code Description <code>200</code> OK - User registered successfully <code>400</code> Bad request - Invalid parameters or validation errors <code>409</code> Conflict - Email or username already exists <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/signing%20game%20users%20up/#next-steps","title":"Next Steps","text":"<p>After successful registration: - Sign In Users - Learn how to authenticate users - Using Credits - Learn about the credit system - Custom User Data - Learn how to store additional user information</p>"},{"location":"Blueprints%20Unreal/using%20credits/","title":"Using Credits","text":"<p>Credits are GameFuse's virtual currency system. Each user has a credit balance that can be used to purchase store items, unlock features, or power your game's economy.</p>"},{"location":"Blueprints%20Unreal/using%20credits/#overview","title":"Overview","text":"<p>Credits are a numeric attribute of each game user stored as a simple integer value. They can be added manually through API calls and are automatically deducted when users purchase store items.</p>"},{"location":"Blueprints%20Unreal/using%20credits/#getting-user-credits","title":"Getting User Credits","text":"<p>You can retrieve the current user's credit balance:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20credits/#adding-credits","title":"Adding Credits","text":"<p>You can add credits to the current user's account:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20credits/#subtracting-credits","title":"Subtracting Credits","text":"<p>You can subtract credits from the current user's account:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20credits/#setting-credits","title":"Setting Credits","text":"<p>You can set the user's credits to a specific amount:</p> <p>Blueprint Example</p> <p></p> <p>Blueprint Implementation: 1. Get the GameFuse User subsystem 2. Call Set Credits with the target amount 3. Connect to the On Success or On Failure execution pins 4. The On Success pin provides the new credit balance</p>"},{"location":"Blueprints%20Unreal/using%20credits/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/using%20credits/#add-credits","title":"Add Credits","text":"Parameter Type Description <code>Credits</code> <code>Integer</code> The amount of credits to add (must be positive)"},{"location":"Blueprints%20Unreal/using%20credits/#subtract-credits","title":"Subtract Credits","text":"Parameter Type Description <code>Credits</code> <code>Integer</code> The amount of credits to subtract (must be positive)"},{"location":"Blueprints%20Unreal/using%20credits/#set-credits","title":"Set Credits","text":"Parameter Type Description <code>Credits</code> <code>Integer</code> The target credit amount to set (must be non-negative)"},{"location":"Blueprints%20Unreal/using%20credits/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/using%20credits/#addsubtractset-credits","title":"Add/Subtract/Set Credits","text":"HTTP Status Code Description <code>200</code> OK - Credits updated successfully <code>400</code> Bad request - Invalid parameters (negative values, etc.) <code>401</code> Unauthorized - User not signed in <code>403</code> Forbidden - Insufficient credits (for subtract operation) <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/using%20credits/#next-steps","title":"Next Steps","text":"<ul> <li>Using the Store - Learn how credits integrate with purchases</li> <li>Custom User Data - Store additional user information</li> <li>In Game Leaderboard - Display user achievements and rankings</li> </ul>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/","title":"Using the Store in Your Game","text":"<p>The GameFuse Store system allows you to create, manage, and purchase store items in your game. Store items are fetched when you call <code>Fetch Store Items</code> and are refreshed every time you call it again.</p>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#getting-started-with-store","title":"Getting Started with Store","text":"<p>To use the GameFuse Store system, you'll need to access the <code>GameFuse Manager</code> and <code>GameFuse User</code> subsystems through Blueprint nodes.</p>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#fetching-available-store-items","title":"Fetching Available Store Items","text":"<p>Store items are fetched when you call <code>Fetch Store Items</code>. The items will be refreshed every time you call it again.</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#fetching-purchased-store-items","title":"Fetching Purchased Store Items","text":""},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#fetching-current-users-purchased-store-items","title":"Fetching Current User's Purchased Store Items","text":"<p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#fetching-other-users-purchased-store-items","title":"Fetching Other Users' Purchased Store Items","text":"<p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#purchasing-store-items","title":"Purchasing Store Items","text":"<p>To purchase a store item, you can use the store item ID. If the user doesn't have enough credits, the purchase will fail.</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#removing-store-items","title":"Removing Store Items","text":"<p>You can remove a store item from a user's inventory:</p> <p>Blueprint Example</p> <p></p>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#function-parameters","title":"Function Parameters","text":""},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#fetching-store-items","title":"Fetching Store Items","text":"Parameter Type Description <code>User ID</code> <code>Integer</code> The user ID to fetch purchased items for (optional, for user-specific fetch)"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#purchasing-and-removing-store-items","title":"Purchasing and Removing Store Items","text":"Parameter Type Description <code>Store Item ID</code> <code>Integer</code> The ID of the store item to purchase or remove"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#function-return-values","title":"Function Return Values","text":""},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#purchase-store-item","title":"<code>Purchase Store Item</code>","text":"HTTP status code Description <code>200</code> OK - Item purchased successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>403</code> Not enough credits or item already purchased <code>404</code> Item not found <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#remove-store-item","title":"<code>Remove Store Item</code>","text":"HTTP status code Description <code>200</code> OK - Item removed successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>404</code> Item not found or not owned by user <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#fetch-my-purchased-store-items-fetch-user-purchased-store-items","title":"<code>Fetch My Purchased Store Items</code> / <code>Fetch User Purchased Store Items</code>","text":"HTTP status code Description <code>200</code> OK - Purchased items fetched successfully <code>401</code> Unauthorized - User not signed in <code>404</code> User not found (for user-specific fetch) <code>500</code> Unknown server error"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#cached-data-access","title":"Cached Data Access","text":"<p>You can access cached store data without making API calls:</p> <p>Blueprint Example</p> <p>Blueprint Implementation: 1. Get Cached Available Store Items:    - Get Game Instance \u2192 Get Subsystem \u2192 GameFuse Manager \u2192 Get Game Store Items    - Returns array of <code>Store Item</code> structs</p> <ol> <li>Get Cached Purchased Store Items:</li> <li>Get Game Instance \u2192 Get Subsystem \u2192 GameFuse User \u2192 Get Purchased Store Items</li> <li>Returns array of <code>Store Item</code> structs</li> </ol>"},{"location":"Blueprints%20Unreal/using%20the%20store%20in%20your%20game/#store-item-struct-reference","title":"Store Item Struct Reference","text":"<p>The <code>Store Item</code> struct contains the following properties:</p> Property Type Description <code>ID</code> <code>Integer</code> Unique identifier for the store item <code>Name</code> <code>String</code> Display name of the store item <code>Description</code> <code>String</code> Detailed description of the store item <code>Category</code> <code>String</code> Category classification of the item <code>Cost</code> <code>Integer</code> Cost in credits to purchase the item <code>Icon URL</code> <code>String</code> URL to the item's icon image"},{"location":"C%23%20Unity%203D/chat/","title":"Chat System","text":"<p>GameFuse provides a flexible chat system that allows players to communicate directly with each other and in groups. The messaging functionality is accessible through the authenticated <code>GameFuseUser.CurrentUser</code> instance.</p>"},{"location":"C%23%20Unity%203D/chat/#getting-started","title":"Getting Started","text":"<p>All chat methods require user authentication. Ensure you have a signed-in user before calling any chat methods:</p> <p>Example</p> <pre><code>if (GameFuseUser.CurrentUser == null)\n{\n    Debug.LogError(\"User must be authenticated first\");\n    return;\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#fetching-chats","title":"Fetching Chats","text":"<p>Use <code>FetchMyPaginatedChatsAsync</code> to retrieve all chats the current user is part of:</p> <p>Example</p> <pre><code>async void LoadMyChats()\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.FetchMyPaginatedChatsAsync(page: 1);\n\n        Debug.Log($\"Found {response.Chats.Count} chats\");\n        Debug.Log($\"Current page: {response.CurrentPage}, Total pages: {response.TotalPages}\");\n\n        foreach (var chat in response.Chats)\n        {\n            Debug.Log($\"Chat ID: {chat.Id}\");\n            Debug.Log($\"Chat Type: {chat.ChatType}\");\n            Debug.Log($\"Participants: {chat.Participants.Count}\");\n\n            // Show latest message if available\n            if (chat.Messages?.Count &gt; 0)\n            {\n                var latestMessage = chat.Messages.First();\n                Debug.Log($\"Latest: {latestMessage.Text} (from user {latestMessage.UserId})\");\n            }\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to load chats: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#creating-chats","title":"Creating Chats","text":""},{"location":"C%23%20Unity%203D/chat/#create-direct-chat","title":"Create Direct Chat","text":"<p>Use <code>CreateDirectChatAsync</code> to start a direct conversation with other users:</p> <p>Example</p> <pre><code>async void CreateDirectChat()\n{\n    try\n    {\n        var usernames = new List&lt;string&gt; { \"playerUsername\", \"anotherPlayer\" };\n        string initialMessage = \"Hey! Want to team up for the next match?\";\n\n        var chat = await GameFuseUser.CurrentUser.CreateDirectChatAsync(usernames, initialMessage);\n\n        Debug.Log($\"Direct chat created! Chat ID: {chat.Id}\");\n        Debug.Log($\"Participants: {chat.Participants.Count}\");\n\n        // The initial message is automatically sent\n        if (chat.Messages?.Count &gt; 0)\n        {\n            Debug.Log($\"Initial message sent: {chat.Messages.First().Text}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to create direct chat: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#create-group-chat","title":"Create Group Chat","text":"<p>Use <code>CreateGroupChatAsync</code> to create a chat for a specific group:</p> <p>Example</p> <pre><code>async void CreateGroupChat(int groupId)\n{\n    try\n    {\n        string initialMessage = \"Welcome to our group chat! Let's coordinate our strategy.\";\n\n        var chat = await GameFuseUser.CurrentUser.CreateGroupChatAsync(groupId, initialMessage);\n\n        Debug.Log($\"Group chat created! Chat ID: {chat.Id}\");\n        Debug.Log($\"Chat type: {chat.ChatType}\");\n        Debug.Log($\"Group members in chat: {chat.Participants.Count}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to create group chat: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#retrieving-messages","title":"Retrieving Messages","text":"<p>Use <code>FetchPaginatedMessagesForChatAsync</code> to get messages from a specific chat:</p> <p>Example</p> <pre><code>async void LoadChatMessages(int chatId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.FetchPaginatedMessagesForChatAsync(\n            chatId, \n            page: 1);\n\n        Debug.Log($\"Retrieved {response.Messages.Count} messages\");\n        Debug.Log($\"Page {response.CurrentPage} of {response.TotalPages}\");\n\n        foreach (var message in response.Messages)\n        {\n            Debug.Log($\"Message ID: {message.Id}\");\n            Debug.Log($\"From User: {message.UserId}\");\n            Debug.Log($\"Text: {message.Text}\");\n            Debug.Log($\"Sent: {message.CreatedAt}\");\n            Debug.Log($\"Read by current user: {message.ReadByCurrentUser}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to load messages: {ex.Message}\");\n    }\n}\n\nasync void LoadOlderMessages(int chatId, int page)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.FetchPaginatedMessagesForChatAsync(chatId, page);\n\n        // Handle older messages...\n        Debug.Log($\"Loaded page {page} with {response.Messages.Count} older messages\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to load older messages: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#sending-messages","title":"Sending Messages","text":"<p>Use <code>SendMessageToChatAsync</code> to send a message to an existing chat:</p> <p>Example</p> <pre><code>async void SendMessage(int chatId, string messageText)\n{\n    try\n    {\n        var message = await GameFuseUser.CurrentUser.SendMessageToChatAsync(chatId, messageText);\n\n        Debug.Log($\"Message sent! Message ID: {message.Id}\");\n        Debug.Log($\"Message text: {message.Text}\");\n        Debug.Log($\"Sent at: {message.CreatedAt}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to send message: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#marking-messages-as-read","title":"Marking Messages as Read","text":"<p>Use <code>MarkMessageAsReadAsync</code> to mark messages as read:</p> <p>Example</p> <pre><code>async void MarkMessageAsRead(int messageId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.MarkMessageAsReadAsync(messageId);\n        Debug.Log($\"Message marked as read: {response.Message}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to mark message as read: {ex.Message}\");\n    }\n}\n\nasync void MarkAllMessagesAsRead(List&lt;Message&gt; messages)\n{\n    try\n    {\n        foreach (var message in messages)\n        {\n            if (!message.ReadByCurrentUser)\n            {\n                await GameFuseUser.CurrentUser.MarkMessageAsReadAsync(message.Id);\n            }\n        }\n        Debug.Log(\"All messages marked as read\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to mark messages as read: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing how to implement a chat system:</p> <p>Example</p> <pre><code>using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing GameFuse;\nusing GameFuse.Models.Shared;\nusing System.Linq;\n\npublic class ChatManager : MonoBehaviour\n{\n    [Header(\"UI References\")]\n    public Transform chatsListParent;\n    public Transform messagesListParent;\n    public GameObject chatItemPrefab;\n    public GameObject messageItemPrefab;\n    public InputField messageInput;\n    public Button sendButton;\n    public Text chatTitleText;\n    public Button createDirectChatButton;\n\n    [Header(\"Chat Creation\")]\n    public InputField usernameInput;\n\n    private Chat currentChat;\n    private List&lt;Message&gt; currentMessages = new List&lt;Message&gt;();\n\n    void Start()\n    {\n        sendButton.onClick.AddListener(OnSendMessageClicked);\n        createDirectChatButton.onClick.AddListener(OnCreateDirectChatClicked);\n\n        RefreshChatsList();\n    }\n\n    async void OnSendMessageClicked()\n    {\n        if (currentChat == null || string.IsNullOrEmpty(messageInput.text))\n            return;\n\n        await SendMessage(messageInput.text);\n    }\n\n    async void OnCreateDirectChatClicked()\n    {\n        string username = usernameInput.text.Trim();\n        if (string.IsNullOrEmpty(username))\n            return;\n\n        await CreateDirectChat(username);\n    }\n\n    public async System.Threading.Tasks.Task RefreshChatsList()\n    {\n        try\n        {\n            var response = await GameFuseUser.CurrentUser.FetchMyPaginatedChatsAsync(1);\n\n            // Clear existing items\n            foreach (Transform child in chatsListParent)\n            {\n                Destroy(child.gameObject);\n            }\n\n            // Create UI items for each chat\n            foreach (var chat in response.Chats)\n            {\n                var chatItem = Instantiate(chatItemPrefab, chatsListParent);\n                var chatUI = chatItem.GetComponent&lt;ChatItemUI&gt;();\n                if (chatUI != null)\n                {\n                    chatUI.Setup(chat, this);\n                }\n            }\n\n            Debug.Log($\"Loaded {response.Chats.Count} chats\");\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error refreshing chats: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task SelectChat(Chat chat)\n    {\n        currentChat = chat;\n        chatTitleText.text = GetChatDisplayName(chat);\n\n        await LoadChatMessages(chat.Id);\n    }\n\n    async System.Threading.Tasks.Task LoadChatMessages(int chatId)\n    {\n        try\n        {\n            var response = await GameFuseUser.CurrentUser.FetchPaginatedMessagesForChatAsync(chatId, 1);\n\n            currentMessages.Clear();\n            currentMessages.AddRange(response.Messages);\n\n            // Clear existing message items\n            foreach (Transform child in messagesListParent)\n            {\n                Destroy(child.gameObject);\n            }\n\n            // Create UI items for each message\n            foreach (var message in currentMessages)\n            {\n                var messageItem = Instantiate(messageItemPrefab, messagesListParent);\n                var messageUI = messageItem.GetComponent&lt;MessageItemUI&gt;();\n                if (messageUI != null)\n                {\n                    bool isFromCurrentUser = message.UserId == GameFuseUser.CurrentUser.Id;\n                    messageUI.Setup(message, isFromCurrentUser);\n                }\n            }\n\n            // Mark unread messages as read\n            await MarkUnreadMessagesAsRead();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error loading messages: {ex.Message}\");\n        }\n    }\n\n    async System.Threading.Tasks.Task MarkUnreadMessagesAsRead()\n    {\n        try\n        {\n            foreach (var message in currentMessages)\n            {\n                if (!message.ReadByCurrentUser)\n                {\n                    await GameFuseUser.CurrentUser.MarkMessageAsReadAsync(message.Id);\n                }\n            }\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error marking messages as read: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task SendMessage(string messageText)\n    {\n        try\n        {\n            var sentMessage = await GameFuseUser.CurrentUser.SendMessageToChatAsync(\n                currentChat.Id, \n                messageText);\n\n            // Add to current messages\n            currentMessages.Add(sentMessage);\n\n            // Create UI for new message\n            var messageItem = Instantiate(messageItemPrefab, messagesListParent);\n            var messageUI = messageItem.GetComponent&lt;MessageItemUI&gt;();\n            if (messageUI != null)\n            {\n                messageUI.Setup(sentMessage, true); // true = from current user\n            }\n\n            // Clear input\n            messageInput.text = \"\";\n\n            Debug.Log(\"Message sent successfully\");\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error sending message: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task CreateDirectChat(string username)\n    {\n        try\n        {\n            var usernames = new List&lt;string&gt; { username };\n            string initialMessage = \"Hello! I'd like to chat with you.\";\n\n            var chat = await GameFuseUser.CurrentUser.CreateDirectChatAsync(usernames, initialMessage);\n\n            // Clear input\n            usernameInput.text = \"\";\n\n            // Refresh chats list and select new chat\n            await RefreshChatsList();\n            await SelectChat(chat);\n\n            Debug.Log($\"Created direct chat with {username}\");\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error creating direct chat: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task CreateGroupChat(int groupId)\n    {\n        try\n        {\n            string initialMessage = \"Welcome to our group chat!\";\n\n            var chat = await GameFuseUser.CurrentUser.CreateGroupChatAsync(groupId, initialMessage);\n\n            // Refresh chats list and select new chat\n            await RefreshChatsList();\n            await SelectChat(chat);\n\n            Debug.Log($\"Created group chat for group {groupId}\");\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error creating group chat: {ex.Message}\");\n        }\n    }\n\n    string GetChatDisplayName(Chat chat)\n    {\n        if (chat.ChatType == \"direct\")\n        {\n            // Find other participants (not current user)\n            var otherParticipants = chat.Participants.Where(p =&gt; p.Id != GameFuseUser.CurrentUser.Id);\n            return string.Join(\", \", otherParticipants.Select(p =&gt; p.Username));\n        }\n        else\n        {\n            return $\"Group Chat ({chat.Participants.Count} members)\";\n        }\n    }\n}\n\npublic class ChatItemUI : MonoBehaviour\n{\n    public Text chatNameText;\n    public Text lastMessageText;\n    public Button selectButton;\n\n    private Chat chat;\n    private ChatManager manager;\n\n    void Start()\n    {\n        selectButton.onClick.AddListener(() =&gt; manager.SelectChat(chat));\n    }\n\n    public void Setup(Chat chatData, ChatManager chatManager)\n    {\n        chat = chatData;\n        manager = chatManager;\n\n        // Set chat name\n        chatNameText.text = manager.GetChatDisplayName(chat);\n\n        // Set last message preview\n        if (chat.Messages?.Count &gt; 0)\n        {\n            var lastMessage = chat.Messages.First();\n            bool isFromCurrentUser = lastMessage.UserId == GameFuseUser.CurrentUser.Id;\n            string sender = isFromCurrentUser ? \"You\" : \"Other\";\n            lastMessageText.text = $\"{sender}: {lastMessage.Text}\";\n        }\n        else\n        {\n            lastMessageText.text = \"No messages yet\";\n        }\n    }\n}\n\npublic class MessageItemUI : MonoBehaviour\n{\n    public Text messageText;\n    public Text timestampText;\n    public GameObject currentUserBubble;\n    public GameObject otherUserBubble;\n\n    public void Setup(Message message, bool isFromCurrentUser)\n    {\n        messageText.text = message.Text;\n\n        // Format timestamp\n        if (System.DateTime.TryParse(message.CreatedAt, out System.DateTime dateTime))\n        {\n            timestampText.text = dateTime.ToString(\"HH:mm\");\n        }\n\n        // Show appropriate bubble\n        currentUserBubble.SetActive(isFromCurrentUser);\n        otherUserBubble.SetActive(!isFromCurrentUser);\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/chat/#method-reference","title":"Method Reference","text":""},{"location":"C%23%20Unity%203D/chat/#fetchmypaginatedchatsasync","title":"<code>FetchMyPaginatedChatsAsync</code>","text":"<p>Retrieves a paginated list of chats the current user is part of.</p> <p>Parameters: - <code>page</code> (int, optional): Page number for pagination (default 1) - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;PaginatedChatsResponse&gt;</code> - Paginated list of chats with metadata</p>"},{"location":"C%23%20Unity%203D/chat/#createdirectchatasync","title":"<code>CreateDirectChatAsync</code>","text":"<p>Creates a new direct chat with specified users and sends an initial message.</p> <p>Parameters: - <code>usernames</code> (List): List of usernames to add to the chat - <code>initialMessageText</code> (string): First message to send in the chat - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation <p>Returns: <code>Task&lt;Chat&gt;</code> - The created chat with initial message</p>"},{"location":"C%23%20Unity%203D/chat/#creategroupchatasync","title":"<code>CreateGroupChatAsync</code>","text":"<p>Creates a new group chat for a specific group and sends an initial message.</p> <p>Parameters: - <code>groupId</code> (int): ID of the group to create a chat for - <code>initialMessageText</code> (string): First message to send in the chat - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;Chat&gt;</code> - The created group chat with initial message</p>"},{"location":"C%23%20Unity%203D/chat/#fetchpaginatedmessagesforchatasync","title":"<code>FetchPaginatedMessagesForChatAsync</code>","text":"<p>Retrieves a paginated list of messages for a specific chat.</p> <p>Parameters: - <code>chatId</code> (int): ID of the chat to fetch messages for - <code>page</code> (int, optional): Page number for pagination (default 1) - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;PaginatedMessagesResponse&gt;</code> - Paginated list of messages</p>"},{"location":"C%23%20Unity%203D/chat/#sendmessagetochatasync","title":"<code>SendMessageToChatAsync</code>","text":"<p>Sends a message to an existing chat.</p> <p>Parameters: - <code>chatId</code> (int): ID of the chat to send the message to - <code>messageText</code> (string): Text content of the message - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;Message&gt;</code> - The newly created message</p>"},{"location":"C%23%20Unity%203D/chat/#markmessageasreadasync","title":"<code>MarkMessageAsReadAsync</code>","text":"<p>Marks a specific message as read by the current user.</p> <p>Parameters: - <code>messageId</code> (int): ID of the message to mark as read - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;MarkAsReadResponse&gt;</code> - Response confirming the message was marked as read</p>"},{"location":"C%23%20Unity%203D/chat/#data-models","title":"Data Models","text":""},{"location":"C%23%20Unity%203D/chat/#chat","title":"Chat","text":"<p>Contains information about a chat conversation: - <code>Id</code> (int): Chat identifier - <code>ChatType</code> (string): Type of chat (\"direct\" or \"group\") - <code>Participants</code> (List): List of chat participants - <code>Messages</code> (List): Recent messages in the chat"},{"location":"C%23%20Unity%203D/chat/#message","title":"Message","text":"<p>Contains information about an individual message: - <code>Id</code> (int): Message identifier - <code>Text</code> (string): Message content - <code>UserId</code> (int): ID of the user who sent the message - <code>CreatedAt</code> (string): Timestamp when the message was created - <code>ReadByCurrentUser</code> (bool): Whether the current user has read the message</p>"},{"location":"C%23%20Unity%203D/chat/#paginatedchatsresponse","title":"PaginatedChatsResponse","text":"<p>Response from fetching chats: - <code>Chats</code> (List): List of chats for the current page - <code>CurrentPage</code> (int): Current page number - <code>TotalPages</code> (int): Total number of pages - <code>TotalCount</code> (int): Total number of chats"},{"location":"C%23%20Unity%203D/chat/#paginatedmessagesresponse","title":"PaginatedMessagesResponse","text":"<p>Response from fetching messages: - <code>Messages</code> (List): List of messages for the current page - <code>CurrentPage</code> (int): Current page number - <code>TotalPages</code> (int): Total number of pages - <code>TotalCount</code> (int): Total number of messages"},{"location":"C%23%20Unity%203D/chat/#error-handling","title":"Error Handling","text":"<p>All chat methods are async and may throw exceptions. Always wrap calls in try-catch blocks:</p> <ul> <li>Network connectivity issues - Connection problems</li> <li>Authentication errors - User not signed in</li> <li>Invalid parameters - User not found, chat not found, empty message text</li> <li>Permission errors - Attempting to access chats the user isn't part of</li> <li>Server errors - Temporary GameFuse service issues</li> </ul>"},{"location":"C%23%20Unity%203D/chat/#function-return-values","title":"Function return values","text":""},{"location":"C%23%20Unity%203D/chat/#http-status-codes","title":"HTTP Status Codes","text":"HTTP status code Description <code>200</code> OK - Operation completed successfully <code>400</code> Bad Request - Invalid parameters (empty usernames, invalid chat ID) <code>401</code> Unauthorized - User not authenticated <code>403</code> Forbidden - Insufficient permissions <code>404</code> Not Found - Chat or user not found <code>500</code> Internal Server Error - Server error"},{"location":"C%23%20Unity%203D/chat/#important-notes","title":"Important Notes","text":"<ul> <li>Pagination: All fetch methods support pagination to handle large amounts of data efficiently</li> <li>Initial Messages: Both direct and group chat creation methods require an initial message</li> <li>Real-time Updates: Consider implementing polling or websockets for real-time message updates</li> <li>Read Status: Track message read status to provide better user experience</li> <li>Chat Types: Direct chats are for person-to-person communication, group chats are tied to specific groups</li> </ul>"},{"location":"C%23%20Unity%203D/class%20methods/","title":"Class Methods","text":"<p>This document provides a comprehensive list of all public methods available in the GameFuse SDK for Unity C#, organized by functionality.</p>"},{"location":"C%23%20Unity%203D/class%20methods/#authentication-account-management","title":"Authentication &amp; Account Management","text":""},{"location":"C%23%20Unity%203D/class%20methods/#sign-up-and-sign-in","title":"Sign Up and Sign In","text":"<pre><code>// Sign up a new user\npublic static async Task&lt;GameFuseUser&gt; SignUpAsync(string email, string password, string username, string gameId = null, string gameApiKey = null, CancellationToken cancellationToken = default)\n\n// Sign in an existing user  \npublic static async Task&lt;GameFuseUser&gt; SignInAsync(string emailOrUsername, string password, string gameId = null, string gameApiKey = null, CancellationToken cancellationToken = default)\n\n// Sign out the current user (static)\npublic static void SignOut(CancellationToken cancellationToken = default)\n\n// Sign out this user instance\npublic void SignOut()\n\n// Check if user is authenticated\npublic bool IsAuthenticated()\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#password-management","title":"Password Management","text":"<pre><code>// Initiate forgot password process\npublic static Task ForgotPasswordAsync(string email, string gameId = null, string gameApiKey = null, CancellationToken cancellationToken = default)\n\n// Reset password using token from email\npublic static Task ResetPasswordAsync(string token, string password, string gameId = null, string gameApiKey = null, CancellationToken cancellationToken = default)\n\n// Update current user's password\npublic async Task&lt;User&gt; UpdatePasswordAsync(string currentPassword, string newPassword, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#user-profile-data-management","title":"User Profile &amp; Data Management","text":""},{"location":"C%23%20Unity%203D/class%20methods/#profile-information","title":"Profile Information","text":"<pre><code>// Get current user details (refresh from server)\npublic async Task&lt;User&gt; GetUserDetailsAsync(CancellationToken cancellationToken = default)\n\n// Get details for a specific user by ID\npublic async Task&lt;User&gt; GetUserDetailsAsync(int userIdToFetch, CancellationToken cancellationToken = default)\n\n// Update current user's profile\npublic async Task&lt;User&gt; UpdateProfileAsync(string username = null, string email = null, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#user-properties","title":"User Properties","text":"<pre><code>// Access user properties (read-only)\npublic int Id { get; }\npublic string Username { get; }\npublic string Email { get; }\npublic string DisplayEmail { get; }\npublic int Credits { get; }\npublic int Score { get; }\npublic string LastLogin { get; }\npublic int NumberOfLogins { get; }\npublic int EventsTotal { get; }\npublic int EventsCurrentMonth { get; }\npublic int GameSessionsTotal { get; }\npublic int GameSessionsCurrentMonth { get; }\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#custom-attributes","title":"Custom Attributes","text":"<pre><code>// Set a single custom attribute\npublic async Task&lt;User&gt; SetUserAttributeAsync(string key, string value, CancellationToken cancellationToken = default)\n\n// Set multiple attributes at once\npublic async Task&lt;User&gt; SetUserAttributesBatchAsync(List&lt;KeyValuePair&lt;string, string&gt;&gt; attributesToSet, CancellationToken cancellationToken = default)\n\n// Get all custom attributes for current user\npublic async Task&lt;UserAttributes&gt; GetUserAttributesAsync(CancellationToken cancellationToken = default)\n\n// Get custom attributes for a specific user\npublic async Task&lt;UserAttributes&gt; GetUserAttributesAsync(int userIdToFetch, CancellationToken cancellationToken = default)\n\n// Delete a user attribute\npublic async Task&lt;User&gt; DeleteUserAttributeAsync(string attributeKey, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#score-management","title":"Score Management","text":"<pre><code>// Add to current score\npublic async Task&lt;User&gt; AddScoreAsync(int scoreAmount, CancellationToken cancellationToken = default)\n\n// Set absolute score value\npublic async Task&lt;User&gt; SetScoreAsync(int scoreAmount, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#credits-management","title":"Credits Management","text":"<pre><code>// Add to current credits\npublic async Task&lt;User&gt; AddCreditsAsync(int creditsAmount, CancellationToken cancellationToken = default)\n\n// Set absolute credits value\npublic async Task&lt;User&gt; SetCreditsAsync(int newCredits, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#store-purchases","title":"Store &amp; Purchases","text":""},{"location":"C%23%20Unity%203D/class%20methods/#store-items","title":"Store Items","text":"<pre><code>// Get all available store items (requires game credentials)\npublic async Task&lt;IReadOnlyList&lt;StoreItem&gt;&gt; GetAvailableStoreItemsAsync(string gameId, string gameToken, CancellationToken cancellationToken = default)\n\n// Get all available store items (uses settings)\npublic async Task&lt;IReadOnlyList&lt;StoreItem&gt;&gt; GetAvailableStoreItemsAsync(CancellationToken cancellationToken = default)\n\n// Get current user's purchased store items\npublic async Task&lt;UserStore&gt; GetUserStoreItemsAsync(CancellationToken cancellationToken = default)\n\n// Get store items for a specific user\npublic async Task&lt;UserStore&gt; GetUserStoreItemsAsync(int userIdToFetch, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#purchase-management","title":"Purchase Management","text":"<pre><code>// Purchase a store item\npublic async Task&lt;UserStore&gt; PurchaseStoreItemAsync(int storeItemId, CancellationToken cancellationToken = default)\n\n// Remove a purchased store item\npublic async Task&lt;UserStore&gt; RemoveStoreItemAsync(int storeItemId, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#friends-social","title":"Friends &amp; Social","text":""},{"location":"C%23%20Unity%203D/class%20methods/#friend-requests","title":"Friend Requests","text":"<pre><code>// Send a friend request\npublic async Task&lt;FriendshipResponse&gt; SendFriendRequestAsync(string friendUsername, CancellationToken cancellationToken = default)\n\n// Accept a friend request\npublic async Task&lt;FriendshipStatusResponse&gt; AcceptFriendRequestAsync(int friendshipId, CancellationToken cancellationToken = default)\n\n// Decline a friend request\npublic async Task&lt;FriendshipStatusResponse&gt; DeclineFriendRequestAsync(int friendshipId, CancellationToken cancellationToken = default)\n\n// Cancel a sent friend request\npublic async Task&lt;FriendshipStatusResponse&gt; CancelFriendRequestAsync(int friendshipId, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#friends-management","title":"Friends Management","text":"<pre><code>// Get complete friendship data (friends, incoming/outgoing requests)\npublic async Task&lt;FriendshipDataResponse&gt; GetFriendshipDataAsync(CancellationToken cancellationToken = default)\n\n// Get friends list for current user\npublic async Task&lt;IReadOnlyList&lt;Friend&gt;&gt; GetFriendsListAsync(CancellationToken cancellationToken = default)\n\n// Get friends list for another user\npublic async Task&lt;IReadOnlyList&lt;Friend&gt;&gt; GetFriendsListForOtherUserAsync(int otherUserId, CancellationToken cancellationToken = default)\n\n// Get incoming friend requests\npublic async Task&lt;IReadOnlyList&lt;FriendRequest&gt;&gt; GetIncomingFriendRequestsAsync(CancellationToken cancellationToken = default)\n\n// Get outgoing friend requests\npublic async Task&lt;IReadOnlyList&lt;FriendRequest&gt;&gt; GetOutgoingFriendRequestsAsync(CancellationToken cancellationToken = default)\n\n// Remove a friend\npublic async Task&lt;FriendshipResponse&gt; UnfriendPlayerAsync(int friendUserId, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#groups","title":"Groups","text":""},{"location":"C%23%20Unity%203D/class%20methods/#group-management","title":"Group Management","text":"<pre><code>// Create a new group\npublic async Task&lt;Group&gt; CreateGroupAsync(CreateGroupPayload payload, CancellationToken cancellationToken = default)\n\n// Fetch all available groups\npublic async Task&lt;IReadOnlyList&lt;GroupSummary&gt;&gt; FetchAllGroupsAsync(CancellationToken cancellationToken = default)\n\n// Get detailed group information\npublic async Task&lt;Group&gt; FetchGroupDetailsAsync(int groupId, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#group-membership","title":"Group Membership","text":"<pre><code>// Send request to join a group\npublic async Task&lt;GroupConnectionResponse&gt; SendGroupConnectionRequestAsync(int groupId, CancellationToken cancellationToken = default)\n\n// Accept a group membership request (admin action)\npublic async Task&lt;GroupConnectionStatusUpdateResponse&gt; AcceptGroupMembershipRequestAsync(int groupConnectionId, CancellationToken cancellationToken = default)\n\n// Decline a group membership request (admin action)\npublic async Task&lt;GroupConnectionStatusUpdateResponse&gt; DeclineGroupMembershipRequestAsync(int groupConnectionId, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#group-attributes","title":"Group Attributes","text":"<pre><code>// Create multiple group attributes\npublic async Task&lt;CreateGroupAttributesResponse&gt; CreateGroupAttributesAsync(int groupId, List&lt;GroupAttributePayloadItem&gt; attributesToCreate, CancellationToken cancellationToken = default)\n\n// Create a single group attribute\npublic async Task&lt;GroupAttributeResponseItem&gt; CreateGroupAttributeAsync(int groupId, string key, string value, bool? othersCanEdit = null, CancellationToken cancellationToken = default)\n\n// Get all group attributes\npublic async Task&lt;IReadOnlyList&lt;GroupAttributeResponseItem&gt;&gt; FetchGroupAttributesAsync(int groupId, CancellationToken cancellationToken = default)\n\n// Modify a group attribute\npublic async Task&lt;GroupAttributeResponseItem&gt; ModifyGroupAttributeAsync(int groupId, ModifyGroupAttributePayload payload, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#game-rounds","title":"Game Rounds","text":""},{"location":"C%23%20Unity%203D/class%20methods/#game-round-management","title":"Game Round Management","text":"<pre><code>// Create a non-multiplayer game round\npublic Task&lt;GameRound&gt; CreateGameRoundAsync(string gameType, string startTime = null, string endTime = null, int? score = null, int? place = null, Dictionary&lt;string, object&gt; metadata = null, CancellationToken cancellationToken = default)\n\n// Create or join a multiplayer game round\npublic Task&lt;GameRound&gt; CreateMultiplayerGameRoundAsync(string gameType, string startTime = null, string endTime = null, int? score = null, int? place = null, Dictionary&lt;string, object&gt; metadata = null, int? multiplayerGameRoundId = null, CancellationToken cancellationToken = default)\n\n// Get a specific game round\npublic Task&lt;GameRound&gt; GetGameRoundAsync(int gameRoundId, CancellationToken cancellationToken = default)\n\n// Update a game round\npublic Task&lt;GameRound&gt; UpdateGameRoundAsync(int gameRoundId, string startTime = null, string endTime = null, int? score = null, int? place = null, string gameType = null, Dictionary&lt;string, object&gt; metadata = null, CancellationToken cancellationToken = default)\n\n// Delete a game round\npublic Task&lt;GameRoundDeleteResponse&gt; DeleteGameRoundAsync(int gameRoundId, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#game-round-queries","title":"Game Round Queries","text":"<pre><code>// Get game rounds for current user\npublic Task&lt;IReadOnlyList&lt;GameRound&gt;&gt; GetCurrentUserGameRoundsAsync(int page = 1, int perPage = 100, CancellationToken cancellationToken = default)\n\n// Get game rounds for a specific user\npublic Task&lt;IReadOnlyList&lt;GameRound&gt;&gt; GetGameRoundsForUserAsync(int userId, int page = 1, int perPage = 100, CancellationToken cancellationToken = default)\n\n// Get game leaderboard\npublic Task&lt;IReadOnlyList&lt;LeaderboardEntry&gt;&gt; GetLeaderboardAsync(int limit = 100, CancellationToken cancellationToken = default)\n\n// Get current user's rank\npublic Task&lt;LeaderboardEntry&gt; GetUserRankAsync(CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#leaderboards","title":"Leaderboards","text":""},{"location":"C%23%20Unity%203D/class%20methods/#leaderboard-management","title":"Leaderboard Management","text":"<pre><code>// Submit a leaderboard entry\npublic Task&lt;User&gt; SubmitLeaderboardEntryAsync(string leaderboardName, double score, Dictionary&lt;string, object&gt; metadata = null, CancellationToken cancellationToken = default)\n\n// Clear all leaderboard entries for current user\npublic Task&lt;User&gt; ClearLeaderboardEntriesAsync(string leaderboardName, CancellationToken cancellationToken = default)\n\n// Get leaderboard entries for a specific leaderboard\npublic Task&lt;LeaderboardEntriesResponse&gt; GetLeaderboardEntriesAsync(int gameId, string leaderboardName, int limit, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#leaderboard-queries","title":"Leaderboard Queries","text":"<pre><code>// Get current user's leaderboard entries\npublic Task&lt;LeaderboardEntriesResponse&gt; GetCurrentUserLeaderboardEntriesAsync(int limit, string leaderboardName = null, bool? onePerUser = null, CancellationToken cancellationToken = default)\n\n// Get leaderboard entries for a specific user\npublic Task&lt;LeaderboardEntriesResponse&gt; GetUserLeaderboardEntriesAsync(int userId, int limit, string leaderboardName = null, bool? onePerUser = null, CancellationToken cancellationToken = default)\n\n// Get user leaderboard entries (alternative method)\npublic async Task&lt;LeaderboardEntries&gt; GetUserLeaderboardEntriesAsync(string leaderboardName = null, int? limit = null, bool? onePerUser = null, CancellationToken cancellationToken = default)\n\n// Get leaderboard entries for specific user by ID\npublic async Task&lt;LeaderboardEntries&gt; GetUserLeaderboardEntriesAsync(int userIdToFetch, string leaderboardName = null, int? limit = null, bool? onePerUser = null, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#messaging-chat","title":"Messaging &amp; Chat","text":""},{"location":"C%23%20Unity%203D/class%20methods/#chat-management","title":"Chat Management","text":"<pre><code>// Get paginated list of chats\npublic Task&lt;PaginatedChatsResponse&gt; FetchMyPaginatedChatsAsync(int page = 1, CancellationToken cancellationToken = default)\n\n// Create a direct chat with users\npublic async Task&lt;Chat&gt; CreateDirectChatAsync(List&lt;string&gt; usernames, string initialMessageText, CancellationToken cancellationToken = default)\n\n// Create a group chat\npublic async Task&lt;Chat&gt; CreateGroupChatAsync(int groupId, string initialMessageText, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#message-management","title":"Message Management","text":"<pre><code>// Get paginated messages for a chat\npublic Task&lt;PaginatedMessagesResponse&gt; FetchPaginatedMessagesForChatAsync(int chatId, int page = 1, CancellationToken cancellationToken = default)\n\n// Send a message to a chat\npublic Task&lt;Message&gt; SendMessageToChatAsync(int chatId, string messageText, CancellationToken cancellationToken = default)\n\n// Mark a message as read\npublic Task&lt;MarkAsReadResponse&gt; MarkMessageAsReadAsync(int messageId, CancellationToken cancellationToken = default)\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#static-access","title":"Static Access","text":""},{"location":"C%23%20Unity%203D/class%20methods/#current-user-access","title":"Current User Access","text":"<pre><code>// Get the currently authenticated user\npublic static GameFuseUser CurrentUser { get; private set; }\n</code></pre>"},{"location":"C%23%20Unity%203D/class%20methods/#collection-properties","title":"Collection Properties","text":""},{"location":"C%23%20Unity%203D/class%20methods/#user-collections","title":"User Collections","text":"<pre><code>// Read-only collections accessible via properties\npublic IReadOnlyList&lt;UserAttribute&gt; GameUserAttributes { get; }\npublic IReadOnlyList&lt;StoreItem&gt; GameUserStoreItems { get; }\npublic IReadOnlyList&lt;Friend&gt; Friends { get; }\npublic IReadOnlyList&lt;FriendRequest&gt; OutgoingFriendRequests { get; }\npublic IReadOnlyList&lt;FriendRequest&gt; IncomingFriendRequests { get; }\npublic IReadOnlyList&lt;GroupSummary&gt; Groups { get; }\npublic IReadOnlyList&lt;GroupConnectionResponse&gt; GroupJoinRequests { get; }\npublic IReadOnlyList&lt;MyGroupInvite&gt; GroupInvites { get; }\n</code></pre>"},{"location":"C%23%20Unity%203D/creating%20store%20items%20on%20the%20web/","title":"Creating Store Items on the Web (C#)","text":"<p>See Generic: Creating store items on the web.</p>"},{"location":"C%23%20Unity%203D/custom%20user%20data/","title":"Custom User Data (C#)","text":"<p>Custom user data or key-value pairs are a simple way to save any kind of data for a specific user. An example might be:</p> <pre><code>{\"world_2_unlocked\":\"true\"} {\"player_color\",\"red\"}, {\"favorite_food\",\"Onion\"}\n</code></pre> <p>These are downloaded to your system upon login and synced when one is updated.</p> <p>All values and keys must be strings. If you want to use other data structures like arrays, you could stringify the array while saving. When loading the data you must then convert the saved string into an array.</p>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#setting-single-attributes","title":"Setting Single Attributes","text":"<p>Use <code>SetUserAttributeAsync</code> to set a single attribute for the current user:</p> <p>Example</p> <pre><code>async void SetSingleAttribute()\n{\n    try\n    {\n        var updatedUser = await GameFuseUser.CurrentUser.SetUserAttributeAsync(\"CURRENT_LEVEL\", \"5\");\n        Debug.Log($\"Level set successfully: {updatedUser.Username}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error setting attribute: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#setting-multiple-attributes","title":"Setting Multiple Attributes","text":"<p>Use <code>SetUserAttributesBatchAsync</code> to set multiple attributes at once:</p> <p>Example</p> <pre><code>async void SetMultipleAttributes()\n{\n    try\n    {\n        var attributesToSet = new List&lt;KeyValuePair&lt;string, string&gt;&gt;\n        {\n            new KeyValuePair&lt;string, string&gt;(\"POINTS\", \"1000\"),\n            new KeyValuePair&lt;string, string&gt;(\"LEVEL\", \"5\"),\n            new KeyValuePair&lt;string, string&gt;(\"CHARACTER\", \"Ninja\")\n        };\n\n        var updatedUser = await GameFuseUser.CurrentUser.SetUserAttributesBatchAsync(attributesToSet);\n        Debug.Log(\"Batch update complete\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error setting attributes: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#getting-user-attributes","title":"Getting User Attributes","text":"<p>Use <code>GetUserAttributesAsync</code> to retrieve all custom attributes for the current user or another user:</p> <p>Example</p> <pre><code>async void GetCurrentUserAttributes()\n{\n    try\n    {\n        var attributes = await GameFuseUser.CurrentUser.GetUserAttributesAsync();\n        Debug.Log($\"Found {attributes.Count} attributes\");\n\n        foreach (var attribute in attributes)\n        {\n            Debug.Log($\"{attribute.Key}: {attribute.Value}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error getting attributes: {ex.Message}\");\n    }\n}\n\nasync void GetOtherUserAttributes()\n{\n    try\n    {\n        int otherUserId = 123;\n        var attributes = await GameFuseUser.CurrentUser.GetUserAttributesAsync(otherUserId);\n        Debug.Log($\"User {otherUserId} has {attributes.Count} attributes\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error getting user attributes: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#deleting-attributes","title":"Deleting Attributes","text":"<p>Use <code>DeleteUserAttributeAsync</code> to remove a specific attribute:</p> <p>Example</p> <pre><code>async void DeleteAttribute()\n{\n    try\n    {\n        var updatedUser = await GameFuseUser.CurrentUser.DeleteUserAttributeAsync(\"CURRENT_LEVEL\");\n        Debug.Log(\"Attribute deleted successfully\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error deleting attribute: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing all attribute operations:</p> <p>Example</p> <pre><code>using System.Collections.Generic;\nusing UnityEngine;\nusing GameFuse;\n\npublic class UserAttributeExample : MonoBehaviour\n{\n    async void Start()\n    {\n        // Ensure user is authenticated first\n        if (GameFuseUser.CurrentUser == null)\n        {\n            Debug.LogError(\"User must be authenticated first\");\n            return;\n        }\n\n        await DemonstrateAttributeOperations();\n    }\n\n    async System.Threading.Tasks.Task DemonstrateAttributeOperations()\n    {\n        try\n        {\n            // 1. Set a single attribute\n            await GameFuseUser.CurrentUser.SetUserAttributeAsync(\"player_level\", \"10\");\n            Debug.Log(\"Single attribute set\");\n\n            // 2. Set multiple attributes\n            var batchAttributes = new List&lt;KeyValuePair&lt;string, string&gt;&gt;\n            {\n                new KeyValuePair&lt;string, string&gt;(\"coins\", \"500\"),\n                new KeyValuePair&lt;string, string&gt;(\"gems\", \"25\"),\n                new KeyValuePair&lt;string, string&gt;(\"last_world\", \"forest\")\n            };\n            await GameFuseUser.CurrentUser.SetUserAttributesBatchAsync(batchAttributes);\n            Debug.Log(\"Batch attributes set\");\n\n            // 3. Get all attributes\n            var allAttributes = await GameFuseUser.CurrentUser.GetUserAttributesAsync();\n            Debug.Log($\"Retrieved {allAttributes.Count} attributes:\");\n            foreach (var attr in allAttributes)\n            {\n                Debug.Log($\"  {attr.Key} = {attr.Value}\");\n            }\n\n            // 4. Delete an attribute\n            await GameFuseUser.CurrentUser.DeleteUserAttributeAsync(\"last_world\");\n            Debug.Log(\"Attribute deleted\");\n\n            // 5. Verify deletion\n            var updatedAttributes = await GameFuseUser.CurrentUser.GetUserAttributesAsync();\n            Debug.Log($\"After deletion: {updatedAttributes.Count} attributes remain\");\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error in attribute operations: {ex.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#method-reference","title":"Method Reference","text":""},{"location":"C%23%20Unity%203D/custom%20user%20data/#setuserattributeasync","title":"<code>SetUserAttributeAsync</code>","text":"<p>Sets a single custom attribute for the current user.</p> <p>Parameters: - <code>key</code> (string): The attribute key - <code>value</code> (string): The attribute value - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;User&gt;</code> - The updated user data after refreshing</p>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#setuserattributesbatchasync","title":"<code>SetUserAttributesBatchAsync</code>","text":"<p>Sets multiple custom attributes for the current user in a single operation.</p> <p>Parameters: - <code>attributesToSet</code> (List&gt;): List of key-value pairs to set - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation <p>Returns: <code>Task&lt;User&gt;</code> - The updated user data after refreshing</p>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#getuserattributesasync","title":"<code>GetUserAttributesAsync</code>","text":"<p>Retrieves all custom attributes for the current user or a specified user.</p> <p>Parameters: - <code>userIdToFetch</code> (int, optional): The ID of the user whose attributes to fetch. If not provided, gets current user's attributes - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;UserAttributes&gt;</code> - The user's custom attributes</p>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#deleteuserattributeasync","title":"<code>DeleteUserAttributeAsync</code>","text":"<p>Deletes a specific user attribute by its key.</p> <p>Parameters: - <code>attributeKey</code> (string): The key of the attribute to delete - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;User&gt;</code> - The updated user data after refreshing</p>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#error-handling","title":"Error Handling","text":"<p>All methods are async and may throw exceptions. Always wrap calls in try-catch blocks or handle exceptions appropriately. Common error scenarios include:</p> <ul> <li>Network connectivity issues</li> <li>Invalid authentication</li> <li>Server errors</li> <li>Invalid attribute keys or values</li> </ul>"},{"location":"C%23%20Unity%203D/custom%20user%20data/#function-return-values","title":"Function return values","text":""},{"location":"C%23%20Unity%203D/custom%20user%20data/#http-status-codes","title":"HTTP Status Codes","text":"HTTP status code Description <code>200</code> OK <code>400</code> Missing or invalid parameters, or some attribute is missing a <code>key</code> or <code>value</code> parameter <code>401</code> Unauthorized - user not authenticated <code>500</code> Unknown server error"},{"location":"C%23%20Unity%203D/forgot%20password/","title":"Forgot Password","text":"<p>You can implement this simple method in your app and we will handle all the emails and password resets on our end.</p> <p>Once you run this function, our system will send an email to that user if it exists. The email will be branded like your app: it will have your app's name, image logo and color so it will look cohesive. The sender's email is even masked with your app's name.</p> <p>The user will then reset their password online and then will be instructed that they can login into your app.</p>"},{"location":"C%23%20Unity%203D/forgot%20password/#sending-password-reset-email","title":"Sending Password Reset Email","text":"<p>Use <code>ForgotPasswordAsync</code> to initiate the password reset process for a user:</p> <p>Example</p> <pre><code>async void SendPasswordResetEmail()\n{\n    try\n    {\n        await GameFuseUser.ForgotPasswordAsync(\"john.doe@example.com\");\n        Debug.Log(\"Password reset email sent successfully\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error sending password reset email: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/forgot%20password/#with-custom-game-credentials","title":"With Custom Game Credentials","text":"<p>If you need to override the default game credentials from GameFuseSettings:</p> <p>Example</p> <pre><code>async void SendPasswordResetEmailWithCustomCredentials()\n{\n    try\n    {\n        await GameFuseUser.ForgotPasswordAsync(\n            \"john.doe@example.com\",\n            \"your-game-id\",\n            \"your-api-key\");\n\n        Debug.Log(\"Password reset email sent successfully\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error sending password reset email: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/forgot%20password/#complete-example-with-ui-integration","title":"Complete Example with UI Integration","text":"<p>Here's a comprehensive example showing how to integrate forgot password functionality with a UI:</p> <p>Example</p> <pre><code>using UnityEngine;\nusing UnityEngine.UI;\nusing GameFuse;\nusing System.Threading;\n\npublic class ForgotPasswordUI : MonoBehaviour\n{\n    [Header(\"UI References\")]\n    public InputField emailInputField;\n    public Button sendResetButton;\n    public Text statusText;\n    public GameObject loadingIndicator;\n\n    private CancellationTokenSource _cancellationTokenSource;\n\n    void Start()\n    {\n        sendResetButton.onClick.AddListener(OnSendResetButtonClicked);\n    }\n\n    void OnDestroy()\n    {\n        _cancellationTokenSource?.Cancel();\n        _cancellationTokenSource?.Dispose();\n    }\n\n    async void OnSendResetButtonClicked()\n    {\n        string email = emailInputField.text.Trim();\n\n        if (string.IsNullOrEmpty(email))\n        {\n            ShowStatus(\"Please enter your email address\", true);\n            return;\n        }\n\n        if (!IsValidEmail(email))\n        {\n            ShowStatus(\"Please enter a valid email address\", true);\n            return;\n        }\n\n        await SendPasswordReset(email);\n    }\n\n    async System.Threading.Tasks.Task SendPasswordReset(string email)\n    {\n        try\n        {\n            // Cancel any previous operation\n            _cancellationTokenSource?.Cancel();\n            _cancellationTokenSource = new CancellationTokenSource();\n\n            // Show loading state\n            SetLoadingState(true);\n            ShowStatus(\"Sending password reset email...\", false);\n\n            await GameFuseUser.ForgotPasswordAsync(email, cancellationToken: _cancellationTokenSource.Token);\n\n            ShowStatus($\"Password reset email sent to {email}. Please check your inbox.\", false);\n\n            // Optionally clear the input field\n            emailInputField.text = \"\";\n        }\n        catch (System.OperationCanceledException)\n        {\n            ShowStatus(\"Operation cancelled\", true);\n        }\n        catch (System.ArgumentException ex)\n        {\n            ShowStatus($\"Invalid input: {ex.Message}\", true);\n        }\n        catch (System.Exception ex)\n        {\n            ShowStatus($\"Error: {ex.Message}\", true);\n        }\n        finally\n        {\n            SetLoadingState(false);\n        }\n    }\n\n    private void SetLoadingState(bool isLoading)\n    {\n        sendResetButton.interactable = !isLoading;\n        loadingIndicator.SetActive(isLoading);\n    }\n\n    private void ShowStatus(string message, bool isError)\n    {\n        statusText.text = message;\n        statusText.color = isError ? Color.red : Color.green;\n    }\n\n    private bool IsValidEmail(string email)\n    {\n        try\n        {\n            var emailAddress = new System.Net.Mail.MailAddress(email);\n            return emailAddress.Address == email;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/forgot%20password/#method-reference","title":"Method Reference","text":""},{"location":"C%23%20Unity%203D/forgot%20password/#forgotpasswordasync","title":"<code>ForgotPasswordAsync</code>","text":"<p>Initiates the forgot password process for a user.</p> <p>Parameters: - <code>email</code> (string): The email address of the user who forgot their password - <code>gameId</code> (string, optional): The game ID. If not provided, uses value from GameFuseSettings - <code>gameApiKey</code> (string, optional): The game API key. If not provided, uses value from GameFuseSettings - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task</code> - Completes when the password reset email has been sent</p> <p>Usage Notes: - This is a static method that does not require an authenticated user - The method will send a branded email if the user exists - No sensitive information is revealed if the email doesn't exist (for security) - The email contains a secure reset link that expires after a certain time - Users complete the password reset process through the web interface</p>"},{"location":"C%23%20Unity%203D/forgot%20password/#error-handling","title":"Error Handling","text":"<p>The method may throw exceptions for various scenarios. Always wrap calls in try-catch blocks:</p> <p>Example</p> <pre><code>async void SafeForgotPassword(string email)\n{\n    try\n    {\n        await GameFuseUser.ForgotPasswordAsync(email);\n        // Success - email sent\n        Debug.Log(\"Reset email sent successfully\");\n    }\n    catch (System.ArgumentNullException ex)\n    {\n        Debug.LogError($\"Missing required parameter: {ex.ParamName}\");\n    }\n    catch (System.ArgumentException ex)\n    {\n        Debug.LogError($\"Invalid parameter: {ex.Message}\");\n    }\n    catch (System.OperationCanceledException)\n    {\n        Debug.Log(\"Operation was cancelled\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Unexpected error: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/forgot%20password/#common-error-scenarios","title":"Common Error Scenarios","text":"<ul> <li>Network connectivity issues - User has no internet connection</li> <li>Invalid email format - Email address is malformed</li> <li>Missing game credentials - GameId or GameApiKey not configured properly</li> <li>Server errors - Temporary issues with the GameFuse service</li> <li>Rate limiting - Too many requests sent in a short time period</li> </ul>"},{"location":"C%23%20Unity%203D/forgot%20password/#function-return-values","title":"Function return values","text":""},{"location":"C%23%20Unity%203D/forgot%20password/#http-status-codes","title":"HTTP Status Codes","text":"HTTP status code Description <code>200</code> OK - Password reset email sent successfully <code>400</code> Bad Request - Invalid email format or missing parameters <code>403</code> Forbidden - Invalid game credentials <code>404</code> Not Found - No user found with the specified email, or GameID/Token incorrect <code>429</code> Too Many Requests - Rate limiting applied <code>500</code> Internal Server Error - Unknown server error"},{"location":"C%23%20Unity%203D/forgot%20password/#security-notes","title":"Security Notes","text":"<ul> <li>The forgot password process is secure and does not reveal whether an email exists in the system</li> <li>Reset tokens have a limited lifespan and can only be used once</li> <li>The branded email helps prevent phishing attempts by maintaining your app's visual identity</li> <li>All password resets are logged for security auditing purposes</li> </ul>"},{"location":"C%23%20Unity%203D/friends/","title":"Friendship System","text":"<p>GameFuse provides a comprehensive friendship system that allows players to connect with each other. The friendship functionality is accessible through the authenticated <code>GameFuseUser.CurrentUser</code> instance.</p>"},{"location":"C%23%20Unity%203D/friends/#getting-started","title":"Getting Started","text":"<p>All friendship methods require user authentication. Ensure you have a signed-in user before calling any friendship methods:</p> <p>Example</p> <pre><code>if (GameFuseUser.CurrentUser == null)\n{\n    Debug.LogError(\"User must be authenticated first\");\n    return;\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#sending-friend-requests","title":"Sending Friend Requests","text":"<p>Use <code>SendFriendRequestAsync</code> to send a friend request to another player by username:</p> <p>Example</p> <pre><code>async void SendFriendRequest()\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.SendFriendRequestAsync(\"playerUsername\");\n        Debug.Log($\"Friend request sent! Friendship ID: {response.FriendshipId}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to send friend request: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#managing-friend-requests","title":"Managing Friend Requests","text":""},{"location":"C%23%20Unity%203D/friends/#accept-friend-requests","title":"Accept Friend Requests","text":"<p>Use <code>AcceptFriendRequestAsync</code> to accept incoming friend requests:</p> <p>Example</p> <pre><code>async void AcceptFriendRequest(int friendshipId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.AcceptFriendRequestAsync(friendshipId);\n        Debug.Log(\"Friend request accepted successfully!\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to accept friend request: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#decline-friend-requests","title":"Decline Friend Requests","text":"<p>Use <code>DeclineFriendRequestAsync</code> to decline incoming friend requests:</p> <p>Example</p> <pre><code>async void DeclineFriendRequest(int friendshipId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.DeclineFriendRequestAsync(friendshipId);\n        Debug.Log(\"Friend request declined successfully!\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to decline friend request: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#cancel-outgoing-friend-requests","title":"Cancel Outgoing Friend Requests","text":"<p>Use <code>CancelFriendRequestAsync</code> to cancel friend requests you've sent:</p> <p>Example</p> <pre><code>async void CancelFriendRequest(int friendshipId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.CancelFriendRequestAsync(friendshipId);\n        Debug.Log(\"Friend request cancelled successfully!\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to cancel friend request: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#getting-friends-and-friend-requests","title":"Getting Friends and Friend Requests","text":""},{"location":"C%23%20Unity%203D/friends/#get-friends-list","title":"Get Friends List","text":"<p>Use <code>GetFriendsListAsync</code> to retrieve the current user's friends:</p> <p>Example</p> <pre><code>async void LoadFriends()\n{\n    try\n    {\n        var friends = await GameFuseUser.CurrentUser.GetFriendsListAsync();\n        Debug.Log($\"You have {friends.Count} friends\");\n\n        foreach (var friend in friends)\n        {\n            Debug.Log($\"Friend: {friend.Username} (ID: {friend.Id})\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get friends list: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#get-another-users-friends","title":"Get Another User's Friends","text":"<p>Use <code>GetFriendsListForOtherUserAsync</code> to retrieve another user's friends list:</p> <p>Example</p> <pre><code>async void LoadOtherUserFriends(int otherUserId)\n{\n    try\n    {\n        var friends = await GameFuseUser.CurrentUser.GetFriendsListForOtherUserAsync(otherUserId);\n        Debug.Log($\"User {otherUserId} has {friends.Count} friends\");\n\n        foreach (var friend in friends)\n        {\n            Debug.Log($\"Friend: {friend.Username} (ID: {friend.Id})\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get other user's friends: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#get-incoming-friend-requests","title":"Get Incoming Friend Requests","text":"<p>Use <code>GetIncomingFriendRequestsAsync</code> to retrieve pending friend requests sent to you:</p> <p>Example</p> <pre><code>async void LoadIncomingRequests()\n{\n    try\n    {\n        var incomingRequests = await GameFuseUser.CurrentUser.GetIncomingFriendRequestsAsync();\n        Debug.Log($\"You have {incomingRequests.Count} incoming friend requests\");\n\n        foreach (var request in incomingRequests)\n        {\n            Debug.Log($\"Request from: {request.Username} (Friendship ID: {request.FriendshipId})\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get incoming requests: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#get-outgoing-friend-requests","title":"Get Outgoing Friend Requests","text":"<p>Use <code>GetOutgoingFriendRequestsAsync</code> to retrieve friend requests you've sent:</p> <p>Example</p> <pre><code>async void LoadOutgoingRequests()\n{\n    try\n    {\n        var outgoingRequests = await GameFuseUser.CurrentUser.GetOutgoingFriendRequestsAsync();\n        Debug.Log($\"You have {outgoingRequests.Count} outgoing friend requests\");\n\n        foreach (var request in outgoingRequests)\n        {\n            Debug.Log($\"Request to: {request.Username} (Friendship ID: {request.FriendshipId})\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get outgoing requests: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#get-all-friendship-data","title":"Get All Friendship Data","text":"<p>Use <code>GetFriendshipDataAsync</code> to retrieve all friendship information at once (friends, incoming requests, outgoing requests):</p> <p>Example</p> <pre><code>async void LoadAllFriendshipData()\n{\n    try\n    {\n        var friendshipData = await GameFuseUser.CurrentUser.GetFriendshipDataAsync();\n\n        Debug.Log($\"Friends: {friendshipData.Friends.Count}\");\n        Debug.Log($\"Incoming requests: {friendshipData.IncomingFriendRequests.Count}\");\n        Debug.Log($\"Outgoing requests: {friendshipData.OutgoingFriendRequests.Count}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get friendship data: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#removing-friends","title":"Removing Friends","text":"<p>Use <code>UnfriendPlayerAsync</code> to remove a friend from your friends list:</p> <p>Example</p> <pre><code>async void RemoveFriend(int friendUserId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.UnfriendPlayerAsync(friendUserId);\n        Debug.Log(\"Friend removed successfully!\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to remove friend: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing how to implement a friendship system:</p> <p>Example</p> <pre><code>using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing GameFuse;\nusing GameFuse.Models.Shared;\n\npublic class FriendshipManager : MonoBehaviour\n{\n    [Header(\"UI References\")]\n    public InputField usernameInput;\n    public Button sendRequestButton;\n    public Transform friendsListParent;\n    public Transform incomingRequestsParent;\n    public Transform outgoingRequestsParent;\n    public GameObject friendItemPrefab;\n    public GameObject requestItemPrefab;\n\n    void Start()\n    {\n        sendRequestButton.onClick.AddListener(OnSendRequestClicked);\n        RefreshAllFriendshipData();\n    }\n\n    async void OnSendRequestClicked()\n    {\n        string username = usernameInput.text.Trim();\n        if (string.IsNullOrEmpty(username))\n        {\n            Debug.LogWarning(\"Please enter a username\");\n            return;\n        }\n\n        await SendFriendRequest(username);\n    }\n\n    public async System.Threading.Tasks.Task SendFriendRequest(string username)\n    {\n        try\n        {\n            var response = await GameFuseUser.CurrentUser.SendFriendRequestAsync(username);\n            Debug.Log($\"Friend request sent to {username}\");\n            usernameInput.text = \"\";\n            await RefreshAllFriendshipData();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error sending friend request: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task RefreshAllFriendshipData()\n    {\n        try\n        {\n            var friendshipData = await GameFuseUser.CurrentUser.GetFriendshipDataAsync();\n\n            UpdateFriendsList(friendshipData.Friends);\n            UpdateIncomingRequests(friendshipData.IncomingFriendRequests);\n            UpdateOutgoingRequests(friendshipData.OutgoingFriendRequests);\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error refreshing friendship data: {ex.Message}\");\n        }\n    }\n\n    void UpdateFriendsList(IReadOnlyList&lt;Friend&gt; friends)\n    {\n        ClearParent(friendsListParent);\n\n        foreach (var friend in friends)\n        {\n            var friendItem = Instantiate(friendItemPrefab, friendsListParent);\n            var friendUI = friendItem.GetComponent&lt;FriendItemUI&gt;();\n            if (friendUI != null)\n            {\n                friendUI.Setup(friend, this);\n            }\n        }\n    }\n\n    void UpdateIncomingRequests(IReadOnlyList&lt;FriendRequest&gt; requests)\n    {\n        ClearParent(incomingRequestsParent);\n\n        foreach (var request in requests)\n        {\n            var requestItem = Instantiate(requestItemPrefab, incomingRequestsParent);\n            var requestUI = requestItem.GetComponent&lt;IncomingRequestUI&gt;();\n            if (requestUI != null)\n            {\n                requestUI.Setup(request, this);\n            }\n        }\n    }\n\n    void UpdateOutgoingRequests(IReadOnlyList&lt;FriendRequest&gt; requests)\n    {\n        ClearParent(outgoingRequestsParent);\n\n        foreach (var request in requests)\n        {\n            var requestItem = Instantiate(requestItemPrefab, outgoingRequestsParent);\n            var requestUI = requestItem.GetComponent&lt;OutgoingRequestUI&gt;();\n            if (requestUI != null)\n            {\n                requestUI.Setup(request, this);\n            }\n        }\n    }\n\n    void ClearParent(Transform parent)\n    {\n        foreach (Transform child in parent)\n        {\n            Destroy(child.gameObject);\n        }\n    }\n\n    public async System.Threading.Tasks.Task AcceptFriendRequest(int friendshipId)\n    {\n        try\n        {\n            await GameFuseUser.CurrentUser.AcceptFriendRequestAsync(friendshipId);\n            Debug.Log(\"Friend request accepted\");\n            await RefreshAllFriendshipData();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error accepting friend request: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task DeclineFriendRequest(int friendshipId)\n    {\n        try\n        {\n            await GameFuseUser.CurrentUser.DeclineFriendRequestAsync(friendshipId);\n            Debug.Log(\"Friend request declined\");\n            await RefreshAllFriendshipData();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error declining friend request: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task CancelFriendRequest(int friendshipId)\n    {\n        try\n        {\n            await GameFuseUser.CurrentUser.CancelFriendRequestAsync(friendshipId);\n            Debug.Log(\"Friend request cancelled\");\n            await RefreshAllFriendshipData();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error cancelling friend request: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task RemoveFriend(int friendUserId)\n    {\n        try\n        {\n            await GameFuseUser.CurrentUser.UnfriendPlayerAsync(friendUserId);\n            Debug.Log(\"Friend removed\");\n            await RefreshAllFriendshipData();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error removing friend: {ex.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/friends/#method-reference","title":"Method Reference","text":""},{"location":"C%23%20Unity%203D/friends/#sendfriendrequestasync","title":"<code>SendFriendRequestAsync</code>","text":"<p>Sends a friend request to another player by username.</p> <p>Parameters: - <code>friendUsername</code> (string): Username of the player to send the request to - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;FriendshipResponse&gt;</code> - Response containing friendship ID and message</p>"},{"location":"C%23%20Unity%203D/friends/#acceptfriendrequestasync","title":"<code>AcceptFriendRequestAsync</code>","text":"<p>Accepts a pending friend request.</p> <p>Parameters: - <code>friendshipId</code> (int): ID of the friendship request to accept - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;FriendshipStatusResponse&gt;</code> - Response confirming acceptance</p>"},{"location":"C%23%20Unity%203D/friends/#declinefriendrequestasync","title":"<code>DeclineFriendRequestAsync</code>","text":"<p>Declines a pending friend request.</p> <p>Parameters: - <code>friendshipId</code> (int): ID of the friendship request to decline - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;FriendshipStatusResponse&gt;</code> - Response confirming decline</p>"},{"location":"C%23%20Unity%203D/friends/#cancelfriendrequestasync","title":"<code>CancelFriendRequestAsync</code>","text":"<p>Cancels a friend request previously sent by this user.</p> <p>Parameters: - <code>friendshipId</code> (int): ID of the friendship request to cancel - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;FriendshipStatusResponse&gt;</code> - Response confirming cancellation</p>"},{"location":"C%23%20Unity%203D/friends/#getfriendslistasync","title":"<code>GetFriendsListAsync</code>","text":"<p>Retrieves the current user's friends list and updates internal state.</p> <p>Parameters: - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;Friend&gt;&gt;</code> - Read-only list of friends</p>"},{"location":"C%23%20Unity%203D/friends/#getfriendslistforotheruserasync","title":"<code>GetFriendsListForOtherUserAsync</code>","text":"<p>Retrieves another user's friends list.</p> <p>Parameters: - <code>otherUserId</code> (int): ID of the user whose friends to retrieve - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;Friend&gt;&gt;</code> - Read-only list of the other user's friends</p>"},{"location":"C%23%20Unity%203D/friends/#getincomingfriendrequestsasync","title":"<code>GetIncomingFriendRequestsAsync</code>","text":"<p>Retrieves incoming friend requests for the current user.</p> <p>Parameters: - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;FriendRequest&gt;&gt;</code> - Read-only list of incoming requests</p>"},{"location":"C%23%20Unity%203D/friends/#getoutgoingfriendrequestsasync","title":"<code>GetOutgoingFriendRequestsAsync</code>","text":"<p>Retrieves outgoing friend requests for the current user.</p> <p>Parameters: - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;FriendRequest&gt;&gt;</code> - Read-only list of outgoing requests</p>"},{"location":"C%23%20Unity%203D/friends/#getfriendshipdataasync","title":"<code>GetFriendshipDataAsync</code>","text":"<p>Retrieves all friendship data (friends, incoming requests, outgoing requests) and updates internal state.</p> <p>Parameters: - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;FriendshipDataResponse&gt;</code> - Complete friendship data</p>"},{"location":"C%23%20Unity%203D/friends/#unfriendplayerasync","title":"<code>UnfriendPlayerAsync</code>","text":"<p>Removes a friend from the current user's friends list.</p> <p>Parameters: - <code>friendUserId</code> (int): ID of the user to unfriend - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;FriendshipResponse&gt;</code> - Response confirming unfriend action</p>"},{"location":"C%23%20Unity%203D/friends/#error-handling","title":"Error Handling","text":"<p>All friendship methods are async and may throw exceptions. Always wrap calls in try-catch blocks:</p> <ul> <li>Network connectivity issues - Connection problems</li> <li>Authentication errors - User not signed in</li> <li>Invalid parameters - User not found, invalid friendship ID</li> <li>Permission errors - Attempting actions not allowed for the current user</li> <li>Server errors - Temporary GameFuse service issues</li> </ul>"},{"location":"C%23%20Unity%203D/friends/#function-return-values","title":"Function return values","text":""},{"location":"C%23%20Unity%203D/friends/#http-status-codes","title":"HTTP Status Codes","text":"HTTP status code Description <code>200</code> OK - Operation completed successfully <code>400</code> Bad Request - Invalid parameters <code>401</code> Unauthorized - User not authenticated <code>403</code> Forbidden - Insufficient permissions <code>404</code> Not Found - User or friendship not found <code>409</code> Conflict - Friendship already exists or invalid state <code>500</code> Internal Server Error - Server error"},{"location":"C%23%20Unity%203D/game%20rounds/","title":"Game Rounds System","text":"<p>GameFuse provides a robust game rounds system that allows you to track gameplay sessions and record player performance data. The game rounds functionality is accessible through the authenticated <code>GameFuseUser.CurrentUser</code> instance.</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#getting-started","title":"Getting Started","text":"<p>All game rounds methods require user authentication. Ensure you have a signed-in user before calling any game rounds methods:</p> <p>Example</p> <pre><code>if (GameFuseUser.CurrentUser == null)\n{\n    Debug.LogError(\"User must be authenticated first\");\n    return;\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#creating-game-rounds","title":"Creating Game Rounds","text":""},{"location":"C%23%20Unity%203D/game%20rounds/#create-single-player-game-round","title":"Create Single Player Game Round","text":"<p>Use <code>CreateGameRoundAsync</code> to create a new single-player game round:</p> <p>Example</p> <pre><code>async void CreateSinglePlayerRound()\n{\n    try\n    {\n        var metadata = new Dictionary&lt;string, object&gt;\n        {\n            {\"difficulty\", \"hard\"},\n            {\"level\", \"forest\"},\n            {\"weapons_used\", 3}\n        };\n\n        var gameRound = await GameFuseUser.CurrentUser.CreateGameRoundAsync(\n            \"battle_royale\",\n            DateTime.UtcNow.ToString(\"o\"), // startTime\n            null, // endTime (set when game ends)\n            1500, // score\n            1, // place\n            metadata);\n\n        Debug.Log($\"Game round created! ID: {gameRound.Id}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to create game round: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#create-multiplayer-game-round","title":"Create Multiplayer Game Round","text":"<p>Use <code>CreateMultiplayerGameRoundAsync</code> to create or join a multiplayer game round:</p> <p>Example</p> <pre><code>async void CreateMultiplayerRound()\n{\n    try\n    {\n        // Create a new multiplayer game round\n        var gameRound = await GameFuseUser.CurrentUser.CreateMultiplayerGameRoundAsync(\n            \"team_deathmatch\",\n            DateTime.UtcNow.ToString(\"o\"),\n            null, // endTime\n            2500, // score\n            2, // place\n            new Dictionary&lt;string, object&gt; { {\"team\", \"blue\"} });\n\n        Debug.Log($\"Multiplayer game round created! ID: {gameRound.Id}\");\n        Debug.Log($\"Multiplayer Round ID: {gameRound.MultiplayerGameRoundId}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to create multiplayer game round: {ex.Message}\");\n    }\n}\n\nasync void JoinExistingMultiplayerRound(int existingMultiplayerRoundId)\n{\n    try\n    {\n        // Join an existing multiplayer game round\n        var gameRound = await GameFuseUser.CurrentUser.CreateMultiplayerGameRoundAsync(\n            \"team_deathmatch\",\n            DateTime.UtcNow.ToString(\"o\"),\n            null,\n            1800,\n            3,\n            new Dictionary&lt;string, object&gt; { {\"team\", \"red\"} },\n            existingMultiplayerRoundId); // Join existing round\n\n        Debug.Log($\"Joined multiplayer round {existingMultiplayerRoundId}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to join multiplayer game round: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#retrieving-game-rounds","title":"Retrieving Game Rounds","text":""},{"location":"C%23%20Unity%203D/game%20rounds/#get-specific-game-round","title":"Get Specific Game Round","text":"<p>Use <code>GetGameRoundAsync</code> to retrieve details for a specific game round:</p> <p>Example</p> <pre><code>async void LoadGameRoundDetails(int gameRoundId)\n{\n    try\n    {\n        var gameRound = await GameFuseUser.CurrentUser.GetGameRoundAsync(gameRoundId);\n\n        Debug.Log($\"Game Round ID: {gameRound.Id}\");\n        Debug.Log($\"Game Type: {gameRound.GameType}\");\n        Debug.Log($\"Score: {gameRound.Score}, Place: {gameRound.Place}\");\n        Debug.Log($\"Start: {gameRound.StartTime}, End: {gameRound.EndTime}\");\n        Debug.Log($\"Is Multiplayer: {gameRound.IsMultiplayer}\");\n\n        // Access metadata\n        if (gameRound.Metadata != null)\n        {\n            foreach (var kvp in gameRound.Metadata)\n            {\n                Debug.Log($\"Metadata - {kvp.Key}: {kvp.Value}\");\n            }\n        }\n\n        // For multiplayer rounds, show rankings\n        if (gameRound.IsMultiplayer &amp;&amp; gameRound.Rankings != null)\n        {\n            Debug.Log(\"Rankings:\");\n            foreach (var ranking in gameRound.Rankings)\n            {\n                Debug.Log($\"  {ranking.Place}. {ranking.Username}: {ranking.Score}\");\n            }\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get game round: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#get-current-users-game-rounds","title":"Get Current User's Game Rounds","text":"<p>Use <code>GetCurrentUserGameRoundsAsync</code> to retrieve all game rounds for the current user:</p> <p>Example</p> <pre><code>async void LoadMyGameRounds()\n{\n    try\n    {\n        var gameRounds = await GameFuseUser.CurrentUser.GetCurrentUserGameRoundsAsync(\n            page: 1, \n            perPage: 50);\n\n        Debug.Log($\"Found {gameRounds.Count} game rounds\");\n\n        foreach (var round in gameRounds)\n        {\n            Debug.Log($\"Round {round.Id}: {round.GameType} - Score: {round.Score}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get user game rounds: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#get-another-users-game-rounds","title":"Get Another User's Game Rounds","text":"<p>Use <code>GetGameRoundsForUserAsync</code> to retrieve game rounds for a specific user:</p> <p>Example</p> <pre><code>async void LoadOtherUserGameRounds(int userId)\n{\n    try\n    {\n        var gameRounds = await GameFuseUser.CurrentUser.GetGameRoundsForUserAsync(\n            userId, \n            page: 1, \n            perPage: 25);\n\n        Debug.Log($\"User {userId} has {gameRounds.Count} game rounds\");\n\n        foreach (var round in gameRounds)\n        {\n            Debug.Log($\"Round: {round.GameType} - Score: {round.Score}, Place: {round.Place}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get user's game rounds: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#updating-game-rounds","title":"Updating Game Rounds","text":"<p>Use <code>UpdateGameRoundAsync</code> to update an existing game round:</p> <p>Example</p> <pre><code>async void UpdateGameRound(int gameRoundId)\n{\n    try\n    {\n        var updatedMetadata = new Dictionary&lt;string, object&gt;\n        {\n            {\"final_boss_defeated\", true},\n            {\"powerups_collected\", 8}\n        };\n\n        var updatedRound = await GameFuseUser.CurrentUser.UpdateGameRoundAsync(\n            gameRoundId,\n            null, // startTime (don't change)\n            DateTime.UtcNow.ToString(\"o\"), // endTime\n            3000, // new score\n            1, // new place\n            \"boss_battle\", // new game type\n            updatedMetadata);\n\n        Debug.Log($\"Game round updated! New score: {updatedRound.Score}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to update game round: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#deleting-game-rounds","title":"Deleting Game Rounds","text":"<p>Use <code>DeleteGameRoundAsync</code> to delete a game round:</p> <p>Example</p> <pre><code>async void DeleteGameRound(int gameRoundId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.DeleteGameRoundAsync(gameRoundId);\n        Debug.Log($\"Game round deleted: {response.Message}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to delete game round: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#leaderboard-features","title":"Leaderboard Features","text":""},{"location":"C%23%20Unity%203D/game%20rounds/#get-game-leaderboard","title":"Get Game Leaderboard","text":"<p>Use <code>GetLeaderboardAsync</code> to retrieve the game's leaderboard:</p> <p>Example</p> <pre><code>async void LoadLeaderboard()\n{\n    try\n    {\n        var leaderboard = await GameFuseUser.CurrentUser.GetLeaderboardAsync(limit: 10);\n\n        Debug.Log($\"Top {leaderboard.Count} players:\");\n        foreach (var entry in leaderboard)\n        {\n            Debug.Log($\"{entry.Rank}. {entry.Username}: {entry.Score}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get leaderboard: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#get-users-rank","title":"Get User's Rank","text":"<p>Use <code>GetUserRankAsync</code> to get the current user's leaderboard position:</p> <p>Example</p> <pre><code>async void LoadMyRank()\n{\n    try\n    {\n        var myRank = await GameFuseUser.CurrentUser.GetUserRankAsync();\n        Debug.Log($\"My rank: {myRank.Rank}, Score: {myRank.Score}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to get user rank: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing how to implement a game rounds management system:</p> <p>Example</p> <pre><code>using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing GameFuse;\nusing GameFuse.Models.Shared;\nusing System;\n\npublic class GameRoundsManager : MonoBehaviour\n{\n    [Header(\"UI References\")]\n    public Transform gameRoundsListParent;\n    public GameObject gameRoundItemPrefab;\n    public Button startGameButton;\n    public Button endGameButton;\n    public Text currentScoreText;\n    public Text leaderboardText;\n\n    [Header(\"Game Settings\")]\n    public string currentGameType = \"survival\";\n    public bool isMultiplayerMode = false;\n\n    private GameRound currentGameRound;\n    private bool gameInProgress = false;\n    private int currentScore = 0;\n    private DateTime gameStartTime;\n\n    void Start()\n    {\n        startGameButton.onClick.AddListener(OnStartGameClicked);\n        endGameButton.onClick.AddListener(OnEndGameClicked);\n\n        LoadGameHistory();\n        LoadLeaderboard();\n    }\n\n    async void OnStartGameClicked()\n    {\n        if (gameInProgress)\n        {\n            Debug.LogWarning(\"Game already in progress\");\n            return;\n        }\n\n        await StartNewGame();\n    }\n\n    async void OnEndGameClicked()\n    {\n        if (!gameInProgress)\n        {\n            Debug.LogWarning(\"No game in progress\");\n            return;\n        }\n\n        await EndCurrentGame();\n    }\n\n    public async System.Threading.Tasks.Task StartNewGame()\n    {\n        try\n        {\n            gameStartTime = DateTime.UtcNow;\n            currentScore = 0;\n\n            var metadata = new Dictionary&lt;string, object&gt;\n            {\n                {\"difficulty\", \"normal\"},\n                {\"map\", \"default\"}\n            };\n\n            if (isMultiplayerMode)\n            {\n                currentGameRound = await GameFuseUser.CurrentUser.CreateMultiplayerGameRoundAsync(\n                    currentGameType,\n                    gameStartTime.ToString(\"o\"),\n                    null, // endTime\n                    currentScore,\n                    null, // place (TBD)\n                    metadata);\n\n                Debug.Log($\"Started multiplayer game! Round ID: {currentGameRound.Id}\");\n            }\n            else\n            {\n                currentGameRound = await GameFuseUser.CurrentUser.CreateGameRoundAsync(\n                    currentGameType,\n                    gameStartTime.ToString(\"o\"),\n                    null, // endTime\n                    currentScore,\n                    null, // place (TBD)\n                    metadata);\n\n                Debug.Log($\"Started single-player game! Round ID: {currentGameRound.Id}\");\n            }\n\n            gameInProgress = true;\n            startGameButton.interactable = false;\n            endGameButton.interactable = true;\n\n            // Start game loop\n            InvokeRepeating(nameof(UpdateGameProgress), 1f, 1f);\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error starting game: {ex.Message}\");\n        }\n    }\n\n    void UpdateGameProgress()\n    {\n        if (!gameInProgress) return;\n\n        // Simulate score increase\n        currentScore += UnityEngine.Random.Range(10, 50);\n        currentScoreText.text = $\"Score: {currentScore}\";\n    }\n\n    public async System.Threading.Tasks.Task EndCurrentGame()\n    {\n        try\n        {\n            CancelInvoke(nameof(UpdateGameProgress));\n\n            var endTime = DateTime.UtcNow;\n            var finalPlace = UnityEngine.Random.Range(1, 11); // Random place 1-10\n\n            var finalMetadata = new Dictionary&lt;string, object&gt;\n            {\n                {\"duration_seconds\", (endTime - gameStartTime).TotalSeconds},\n                {\"final_level_reached\", UnityEngine.Random.Range(5, 20)}\n            };\n\n            var updatedRound = await GameFuseUser.CurrentUser.UpdateGameRoundAsync(\n                currentGameRound.Id,\n                null, // don't change start time\n                endTime.ToString(\"o\"),\n                currentScore,\n                finalPlace,\n                null, // don't change game type\n                finalMetadata);\n\n            Debug.Log($\"Game ended! Final score: {currentScore}, Place: {finalPlace}\");\n\n            gameInProgress = false;\n            startGameButton.interactable = true;\n            endGameButton.interactable = false;\n\n            // Refresh displays\n            await LoadGameHistory();\n            await LoadLeaderboard();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error ending game: {ex.Message}\");\n        }\n    }\n\n    async System.Threading.Tasks.Task LoadGameHistory()\n    {\n        try\n        {\n            var gameRounds = await GameFuseUser.CurrentUser.GetCurrentUserGameRoundsAsync(1, 10);\n\n            // Clear existing items\n            foreach (Transform child in gameRoundsListParent)\n            {\n                Destroy(child.gameObject);\n            }\n\n            // Create UI items for each game round\n            foreach (var round in gameRounds)\n            {\n                var roundItem = Instantiate(gameRoundItemPrefab, gameRoundsListParent);\n                var roundUI = roundItem.GetComponent&lt;GameRoundItemUI&gt;();\n                if (roundUI != null)\n                {\n                    roundUI.Setup(round, this);\n                }\n            }\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error loading game history: {ex.Message}\");\n        }\n    }\n\n    async System.Threading.Tasks.Task LoadLeaderboard()\n    {\n        try\n        {\n            var leaderboard = await GameFuseUser.CurrentUser.GetLeaderboardAsync(10);\n            var myRank = await GameFuseUser.CurrentUser.GetUserRankAsync();\n\n            string leaderboardText = \"Top 10 Players:\\\\n\";\n            foreach (var entry in leaderboard)\n            {\n                leaderboardText += $\"{entry.Rank}. {entry.Username}: {entry.Score}\\\\n\";\n            }\n\n            leaderboardText += $\"\\\\nYour Rank: {myRank.Rank} (Score: {myRank.Score})\";\n            this.leaderboardText.text = leaderboardText;\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error loading leaderboard: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task ViewGameRoundDetails(int gameRoundId)\n    {\n        try\n        {\n            var round = await GameFuseUser.CurrentUser.GetGameRoundAsync(gameRoundId);\n\n            string details = $\"Game Round {round.Id}\\\\n\";\n            details += $\"Type: {round.GameType}\\\\n\";\n            details += $\"Score: {round.Score}, Place: {round.Place}\\\\n\";\n            details += $\"Start: {round.StartTime}\\\\n\";\n            details += $\"End: {round.EndTime}\\\\n\";\n            details += $\"Multiplayer: {round.IsMultiplayer}\\\\n\";\n\n            if (round.Metadata != null)\n            {\n                details += \"Metadata:\\\\n\";\n                foreach (var kvp in round.Metadata)\n                {\n                    details += $\"  {kvp.Key}: {kvp.Value}\\\\n\";\n                }\n            }\n\n            Debug.Log(details);\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error viewing game round details: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task DeleteGameRound(int gameRoundId)\n    {\n        try\n        {\n            await GameFuseUser.CurrentUser.DeleteGameRoundAsync(gameRoundId);\n            Debug.Log($\"Deleted game round {gameRoundId}\");\n            await LoadGameHistory();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error deleting game round: {ex.Message}\");\n        }\n    }\n}\n\npublic class GameRoundItemUI : MonoBehaviour\n{\n    public Text gameTypeText;\n    public Text scoreText;\n    public Text dateText;\n    public Button viewButton;\n    public Button deleteButton;\n\n    private GameRound gameRound;\n    private GameRoundsManager manager;\n\n    void Start()\n    {\n        viewButton.onClick.AddListener(() =&gt; manager.ViewGameRoundDetails(gameRound.Id));\n        deleteButton.onClick.AddListener(() =&gt; manager.DeleteGameRound(gameRound.Id));\n    }\n\n    public void Setup(GameRound round, GameRoundsManager gameManager)\n    {\n        gameRound = round;\n        manager = gameManager;\n\n        gameTypeText.text = round.GameType ?? \"Unknown\";\n        scoreText.text = $\"Score: {round.Score}, Place: {round.Place}\";\n\n        if (DateTime.TryParse(round.EndTime, out DateTime endDate))\n        {\n            dateText.text = endDate.ToString(\"MM/dd/yyyy HH:mm\");\n        }\n        else\n        {\n            dateText.text = \"In Progress\";\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/game%20rounds/#method-reference","title":"Method Reference","text":""},{"location":"C%23%20Unity%203D/game%20rounds/#creategameroundasync","title":"<code>CreateGameRoundAsync</code>","text":"<p>Creates a new single-player game round.</p> <p>Parameters: - <code>gameType</code> (string): Type of game being played - <code>startTime</code> (string, optional): Start time in ISO format - <code>endTime</code> (string, optional): End time in ISO format - <code>score</code> (int?, optional): Player's score - <code>place</code> (int?, optional): Player's final position - <code>metadata</code> (Dictionary, optional): Additional game data - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation <p>Returns: <code>Task&lt;GameRound&gt;</code> - The created game round</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#createmultiplayergameroundasync","title":"<code>CreateMultiplayerGameRoundAsync</code>","text":"<p>Creates a new multiplayer game round or joins an existing one.</p> <p>Parameters: - <code>gameType</code> (string): Type of game being played - <code>startTime</code> (string, optional): Start time in ISO format - <code>endTime</code> (string, optional): End time in ISO format - <code>score</code> (int?, optional): Player's score - <code>place</code> (int?, optional): Player's final position - <code>metadata</code> (Dictionary, optional): Additional game data - <code>multiplayerGameRoundId</code> (int?, optional): ID of existing multiplayer round to join - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation <p>Returns: <code>Task&lt;GameRound&gt;</code> - The created game round</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#getgameroundasync","title":"<code>GetGameRoundAsync</code>","text":"<p>Retrieves a specific game round by ID.</p> <p>Parameters: - <code>gameRoundId</code> (int): ID of the game round to retrieve - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;GameRound&gt;</code> - The game round with full details including rankings for multiplayer rounds</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#getcurrentusergameroundsasync","title":"<code>GetCurrentUserGameRoundsAsync</code>","text":"<p>Retrieves game rounds for the current user with pagination.</p> <p>Parameters: - <code>page</code> (int, optional): Page number (default 1) - <code>perPage</code> (int, optional): Number of rounds per page (default and max 100) - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;GameRound&gt;&gt;</code> - List of game rounds (bulk retrieval doesn't include rankings)</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#getgameroundsforuserasync","title":"<code>GetGameRoundsForUserAsync</code>","text":"<p>Retrieves game rounds for a specific user with pagination.</p> <p>Parameters: - <code>userId</code> (int): ID of the user whose rounds to retrieve - <code>page</code> (int, optional): Page number (default 1) - <code>perPage</code> (int, optional): Number of rounds per page (default and max 100) - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;GameRound&gt;&gt;</code> - List of game rounds (bulk retrieval doesn't include rankings)</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#updategameroundasync","title":"<code>UpdateGameRoundAsync</code>","text":"<p>Updates an existing game round.</p> <p>Parameters: - <code>gameRoundId</code> (int): ID of the game round to update - <code>startTime</code> (string, optional): New start time - <code>endTime</code> (string, optional): New end time - <code>score</code> (int?, optional): New score - <code>place</code> (int?, optional): New place - <code>gameType</code> (string, optional): New game type - <code>metadata</code> (Dictionary, optional): New metadata - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation <p>Returns: <code>Task&lt;GameRound&gt;</code> - The updated game round</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#deletegameroundasync","title":"<code>DeleteGameRoundAsync</code>","text":"<p>Deletes a game round.</p> <p>Parameters: - <code>gameRoundId</code> (int): ID of the game round to delete - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;GameRoundDeleteResponse&gt;</code> - Response confirming deletion</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#getleaderboardasync","title":"<code>GetLeaderboardAsync</code>","text":"<p>Retrieves the game's leaderboard.</p> <p>Parameters: - <code>limit</code> (int, optional): Maximum number of entries to return (default 100) - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;LeaderboardEntry&gt;&gt;</code> - List of leaderboard entries</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#getuserrankasync","title":"<code>GetUserRankAsync</code>","text":"<p>Gets the current user's leaderboard rank.</p> <p>Parameters: - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;LeaderboardEntry&gt;</code> - The user's leaderboard entry with rank and score</p>"},{"location":"C%23%20Unity%203D/game%20rounds/#error-handling","title":"Error Handling","text":"<p>All game rounds methods are async and may throw exceptions. Always wrap calls in try-catch blocks:</p> <ul> <li>Network connectivity issues - Connection problems</li> <li>Authentication errors - User not signed in</li> <li>Permission errors - Attempting to modify rounds owned by other users</li> <li>Invalid parameters - Round not found, invalid data formats</li> <li>Server errors - Temporary GameFuse service issues</li> </ul>"},{"location":"C%23%20Unity%203D/game%20rounds/#function-return-values","title":"Function return values","text":""},{"location":"C%23%20Unity%203D/game%20rounds/#http-status-codes","title":"HTTP Status Codes","text":"HTTP status code Description <code>200</code> OK - Operation completed successfully <code>400</code> Bad Request - Invalid parameters or data format <code>401</code> Unauthorized - User not authenticated <code>403</code> Forbidden - Insufficient permissions <code>404</code> Not Found - Game round not found <code>500</code> Internal Server Error - Server error"},{"location":"C%23%20Unity%203D/game%20rounds/#important-notes","title":"Important Notes","text":"<ul> <li>Pagination: Bulk game round retrieval methods support pagination with a maximum of 100 rounds per page</li> <li>Rankings: Multiplayer game round rankings are only included when fetching individual rounds via <code>GetGameRoundAsync</code></li> <li>Metadata: Use metadata to store custom game-specific information as key-value pairs</li> <li>Time Format: Use ISO 8601 format for start and end times (<code>DateTime.UtcNow.ToString(\"o\")</code>)</li> <li>Multiplayer Rounds: Players can join existing multiplayer rounds or create new ones</li> </ul>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/","title":"GameFuse Settings Configuration","text":"<p>The <code>GameFuseSettings</code> ScriptableObject is the central configuration system for the GameFuse Unity SDK. It provides a clean, inspector-friendly way to manage your game's connection settings and SDK behavior without requiring any prefabs in your scenes.</p>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#overview","title":"Overview","text":"<p><code>GameFuseSettings</code> is a ScriptableObject that stores all necessary configuration for your GameFuse integration:</p> <ul> <li>Game ID and API Key - Your unique game credentials from the GameFuse dashboard</li> <li>API Configuration - Base URL, timeout settings, and retry behavior</li> <li>Automatic Loading - The SDK automatically finds and loads your settings at runtime</li> </ul>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#creating-gamefuse-settings","title":"Creating GameFuse Settings","text":""},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#step-1-create-the-settings-asset","title":"Step 1: Create the Settings Asset","text":"<ol> <li>In Unity, navigate to Assets &gt; Create &gt; GameFuse &gt; Settings</li> <li>Name the file <code>GameFuseSettings</code> (this name is important for automatic discovery)</li> <li>Place the file in a Resources folder in your project</li> <li>If you don't have a Resources folder, create one: Assets &gt; Create &gt; Folder and name it \"Resources\"</li> </ol>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#step-2-configure-your-settings","title":"Step 2: Configure Your Settings","text":"<p>Select your <code>GameFuseSettings</code> asset and configure the following in the Inspector:</p>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#required-settings","title":"Required Settings","text":"Field Description Example Game Id Your unique game identifier from the GameFuse dashboard <code>\"1234\"</code> Game Api Key Your game's API key from the GameFuse dashboard <code>\"abcd1234efgh5678\"</code>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#optional-advanced-settings","title":"Optional Advanced Settings","text":"Field Description Default Range Api Base Url GameFuse API endpoint (only change if using custom endpoint) <code>\"https://gamefuse.co/api/v3\"</code> - Max Retry Attempts Number of retry attempts for failed API requests <code>3</code> 0-5 Request Timeout Seconds Timeout for API requests in seconds <code>30</code> 5-60"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#how-it-works","title":"How It Works","text":""},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#automatic-discovery","title":"Automatic Discovery","text":"<p>The SDK uses Unity's <code>Resources.Load&lt;&gt;()</code> system to automatically find your settings:</p> <pre><code>// The SDK automatically loads settings like this:\nvar settings = Resources.Load&lt;GameFuseSettings&gt;(\"GameFuseSettings\");\n</code></pre>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#static-access","title":"Static Access","text":"<p>Once loaded, settings are available throughout your project via the static property:</p> <pre><code>using GameFuse.Config;\n\n// Access settings anywhere in your code\nvar gameId = GameFuseSettings.Settings?.GameId;\nvar apiKey = GameFuseSettings.Settings?.GameApiKey;\n</code></pre>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#integration-with-gamefuseuser","title":"Integration with GameFuseUser","text":"<p>The <code>GameFuseUser</code> class automatically uses these settings for authentication:</p> <pre><code>// No need to pass Game ID or API Key - they're read from settings\nvar user = await GameFuseUser.SignInAsync(\"username\", \"password\");\n\n// You can still override settings if needed\nvar user2 = await GameFuseUser.SignInAsync(\"username\", \"password\", \"customGameId\", \"customApiKey\");\n</code></pre>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#usage-examples","title":"Usage Examples","text":""},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#basic-setup","title":"Basic Setup","text":"<pre><code>using GameFuse;\nusing UnityEngine;\n\npublic class GameManager : MonoBehaviour\n{\n    async void Start()\n    {\n        try\n        {\n            // GameFuseSettings is automatically loaded and used\n            var user = await GameFuseUser.SignInAsync(\"player@example.com\", \"password123\");\n            Debug.Log($\"Signed in as: {user.Username}\");\n        }\n        catch (Exception e)\n        {\n            Debug.LogError($\"Sign in failed: {e.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#checking-settings-availability","title":"Checking Settings Availability","text":"<pre><code>using GameFuse.Config;\nusing UnityEngine;\n\npublic class SettingsChecker : MonoBehaviour\n{\n    void Start()\n    {\n        var settings = GameFuseSettings.Settings;\n\n        if (settings == null)\n        {\n            Debug.LogError(\"GameFuseSettings not found! Create one via Assets &gt; Create &gt; GameFuse &gt; Settings\");\n            return;\n        }\n\n        if (string.IsNullOrEmpty(settings.GameId) || string.IsNullOrEmpty(settings.GameApiKey))\n        {\n            Debug.LogError(\"GameFuseSettings found but Game ID or API Key is missing!\");\n            return;\n        }\n\n        Debug.Log(\"GameFuse settings configured correctly!\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#runtime-settings-override","title":"Runtime Settings Override","text":"<pre><code>using GameFuse;\nusing GameFuse.Config;\n\n// You can still override settings at runtime if needed\npublic async void SignInWithCustomCredentials()\n{\n    // This will use custom credentials instead of GameFuseSettings\n    var user = await GameFuseUser.SignInAsync(\n        \"username\", \n        \"password\", \n        gameId: \"alternativeGameId\", \n        gameApiKey: \"alternativeApiKey\"\n    );\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#error-handling","title":"Error Handling","text":""},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#missing-settings-file","title":"Missing Settings File","text":"<p>If no <code>GameFuseSettings</code> file is found in Resources, you'll see this error:</p> <pre><code>GameFuseSettings ScriptableObject not found in a Resources folder. \nPlease create one via Assets &gt; Create &gt; GameFuse &gt; Settings and populate GameId and GameApiKey.\n</code></pre> <p>Solution: Create the settings file as described above.</p>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#missing-credentials","title":"Missing Credentials","text":"<p>If Game ID or API Key are not set, authentication methods will throw:</p> <pre><code>ArgumentNullException: Game ID must be provided explicitly or through GameFuseSettings.\n</code></pre> <p>Solution: Set the Game ID and API Key in your GameFuseSettings asset.</p>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#best-practices","title":"Best Practices","text":""},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#file-organization","title":"File Organization","text":"<pre><code>Assets/\n\u251c\u2500\u2500 Resources/\n\u2502   \u2514\u2500\u2500 GameFuseSettings.asset    # Must be in Resources folder\n\u251c\u2500\u2500 Scripts/\n\u2502   \u2514\u2500\u2500 GameManager.cs\n\u2514\u2500\u2500 Scenes/\n    \u2514\u2500\u2500 MainMenu.unity\n</code></pre>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#security-considerations","title":"Security Considerations","text":"<ul> <li>Never commit API keys to public repositories</li> <li>Consider using different settings files for development/production</li> <li>Use Unity's build configurations to swap settings files automatically</li> </ul>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#multiple-environments","title":"Multiple Environments","text":"<p>For different environments (development, staging, production), you can:</p> <ol> <li>Create multiple settings files (e.g., <code>GameFuseSettings_Dev</code>, <code>GameFuseSettings_Prod</code>)</li> <li>Use build scripts to copy the appropriate file to <code>GameFuseSettings</code> before building</li> <li>Or override settings at runtime based on build configuration</li> </ol>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#settings-not-loading","title":"Settings Not Loading","text":"<p>Problem: <code>GameFuseSettings.Settings</code> returns <code>null</code></p> <p>Solutions: - Ensure the file is named exactly <code>GameFuseSettings</code> - Ensure the file is in a folder named <code>Resources</code> - Check the Console for error messages about missing settings</p>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#authentication-fails","title":"Authentication Fails","text":"<p>Problem: Sign-in/sign-up methods throw authentication errors</p> <p>Solutions: - Verify Game ID and API Key are correct in your GameFuse dashboard - Check that the values are properly set in your GameFuseSettings asset - Ensure you're using the correct API base URL (default should work for most cases)</p>"},{"location":"C%23%20Unity%203D/gamefuse%20settings%20configuration/#api-timeouts","title":"API Timeouts","text":"<p>Problem: Requests are timing out or failing</p> <p>Solutions: - Increase <code>Request Timeout Seconds</code> in your settings - Increase <code>Max Retry Attempts</code> for unstable connections - Check your internet connection and firewall settings</p>"},{"location":"C%23%20Unity%203D/getting%20started/","title":"C# Unity 3D","text":"<p>The GameFuse C# Unity SDK provides a comprehensive game backend solution through the <code>GameFuseUser</code> class, offering complete user management, social features, and game data persistence. Key capabilities include:</p> <p>Authentication &amp; User Management - User registration, sign-in, password recovery, and profile updates - Custom user attributes for storing game-specific data - Score and credits management with server-side validation</p> <p>Social Features - Friend system with requests, acceptance, and management - Group creation, membership, and custom group attributes - Real-time messaging with direct and group chats</p> <p>Game Features - In-game store with purchasable items and credit transactions - Leaderboards with score submission and ranking retrieval - Game rounds tracking for both single-player and multiplayer sessions</p> <p>Data Storage - Secure cloud storage for user progress and game state - Custom attributes system for flexible data structures - Server-side validation preventing client-side manipulation</p> <p>All features work seamlessly without requiring server setup or API development. GameFuse is free for hobby and small indie projects, with usage-based pricing for larger applications.</p>"},{"location":"C%23%20Unity%203D/getting%20started/#getting-started","title":"Getting Started","text":"<p>The first step of integrating GameFuse with your project is to make an account and configure your game settings.</p> <p>Sign Up</p> <p>After creating your account, add your first game and note the Game ID and API Token from your GameFuse dashboard.</p>"},{"location":"C%23%20Unity%203D/getting%20started/#configuring-gamefuse-settings","title":"Configuring GameFuse Settings","text":"<p>GameFuse uses a ScriptableObject-based configuration system that requires no prefabs in your scene. After installing the SDK, create your settings file:</p> <ol> <li>In Unity, go to Assets &gt; Create &gt; GameFuse &gt; Settings</li> <li>Name the file <code>GameFuseSettings</code> and place it in a Resources folder</li> <li>In the Inspector, enter your Game ID and Game API Key from your GameFuse dashboard</li> <li>Optionally configure advanced settings like API timeout and retry attempts</li> </ol> <p>The <code>GameFuseSettings</code> ScriptableObject will be automatically loaded by the SDK when needed. You can now use GameFuse functionality throughout your project without adding any prefabs to your scenes - simply call the static methods on <code>GameFuseUser</code> to sign in users and access all features.</p>"},{"location":"C%23%20Unity%203D/getting%20started/#installing-the-sdk","title":"Installing the SDK","text":"<p>You can easily add GameFuse to your Unity project by editing your project's <code>manifest.json</code> file. Add the following line to your dependencies:</p> <pre><code>\"com.gamefuse.sdk\": \"https://github.com/game-fuse/game-fuse-cs.git?path=com.gamefuse.sdk#v3api\"\n</code></pre> <p>Unity will automatically import the package for you.</p> <p>C# Library</p>"},{"location":"C%23%20Unity%203D/groups/","title":"Groups System","text":"<p>GameFuse provides a robust groups system that allows players to form communities within your game. The group functionality is accessible through the authenticated <code>GameFuseUser.CurrentUser</code> instance.</p>"},{"location":"C%23%20Unity%203D/groups/#getting-started","title":"Getting Started","text":"<p>All group methods require user authentication. Ensure you have a signed-in user before calling any group methods:</p> <p>Example</p> <pre><code>if (GameFuseUser.CurrentUser == null)\n{\n    Debug.LogError(\"User must be authenticated first\");\n    return;\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#creating-groups","title":"Creating Groups","text":"<p>Use <code>CreateGroupAsync</code> to create a new group with the current user as admin:</p> <p>Example</p> <pre><code>async void CreateGroup()\n{\n    try\n    {\n        var payload = new CreateGroupPayload\n        {\n            Name = \"My Awesome Team\",\n            GroupType = \"default\",\n            MaxGroupSize = 10,\n            CanAutoJoin = false,\n            IsInviteOnly = true,\n            Searchable = true,\n            AdminsOnlyCanCreateAttributes = true\n        };\n\n        var group = await GameFuseUser.CurrentUser.CreateGroupAsync(payload);\n        Debug.Log($\"Group created successfully! Group ID: {group.Id}, Name: {group.Name}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to create group: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#fetching-groups","title":"Fetching Groups","text":""},{"location":"C%23%20Unity%203D/groups/#get-all-groups","title":"Get All Groups","text":"<p>Use <code>FetchAllGroupsAsync</code> to retrieve a list of all available groups:</p> <p>Example</p> <pre><code>async void LoadAllGroups()\n{\n    try\n    {\n        var groups = await GameFuseUser.CurrentUser.FetchAllGroupsAsync();\n        Debug.Log($\"Found {groups.Count} groups\");\n\n        foreach (var group in groups)\n        {\n            Debug.Log($\"Group: {group.Name} (ID: {group.Id})\");\n            Debug.Log($\"Members: {group.MemberCount}/{group.MaxGroupSize}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to fetch groups: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#get-group-details","title":"Get Group Details","text":"<p>Use <code>FetchGroupDetailsAsync</code> to get detailed information about a specific group:</p> <p>Example</p> <pre><code>async void LoadGroupDetails(int groupId)\n{\n    try\n    {\n        var group = await GameFuseUser.CurrentUser.FetchGroupDetailsAsync(groupId);\n\n        Debug.Log($\"Group: {group.Name}\");\n        Debug.Log($\"Type: {group.GroupType}\");\n        Debug.Log($\"Members: {group.MemberCount}/{group.MaxGroupSize}\");\n        Debug.Log($\"Can Auto Join: {group.CanAutoJoin}\");\n        Debug.Log($\"Invite Only: {group.IsInviteOnly}\");\n        Debug.Log($\"Searchable: {group.Searchable}\");\n\n        // Check if current user is an admin\n        bool isAdmin = group.Admins?.Any(admin =&gt; admin.Id == GameFuseUser.CurrentUser.Id) ?? false;\n        Debug.Log($\"Current user is admin: {isAdmin}\");\n\n        // List all members\n        if (group.Members != null)\n        {\n            foreach (var member in group.Members)\n            {\n                Debug.Log($\"Member: {member.Username} (ID: {member.Id})\");\n            }\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to fetch group details: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#joining-groups","title":"Joining Groups","text":""},{"location":"C%23%20Unity%203D/groups/#send-join-request","title":"Send Join Request","text":"<p>Use <code>SendGroupConnectionRequestAsync</code> to request to join a group:</p> <p>Example</p> <pre><code>async void RequestToJoinGroup(int groupId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.SendGroupConnectionRequestAsync(groupId);\n        Debug.Log($\"Join request sent! Connection ID: {response.Id}\");\n        Debug.Log($\"Status: {response.Status}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to send join request: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#accept-membership-requests-admin-only","title":"Accept Membership Requests (Admin Only)","text":"<p>Use <code>AcceptGroupMembershipRequestAsync</code> to accept pending join requests as an admin:</p> <p>Example</p> <pre><code>async void AcceptJoinRequest(int groupConnectionId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.AcceptGroupMembershipRequestAsync(groupConnectionId);\n        Debug.Log($\"Join request accepted! Connection ID: {response.Id}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to accept join request: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#decline-membership-requests-admin-only","title":"Decline Membership Requests (Admin Only)","text":"<p>Use <code>DeclineGroupMembershipRequestAsync</code> to decline pending join requests as an admin:</p> <p>Example</p> <pre><code>async void DeclineJoinRequest(int groupConnectionId)\n{\n    try\n    {\n        var response = await GameFuseUser.CurrentUser.DeclineGroupMembershipRequestAsync(groupConnectionId);\n        Debug.Log($\"Join request declined! Connection ID: {response.Id}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to decline join request: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#group-attributes","title":"Group Attributes","text":""},{"location":"C%23%20Unity%203D/groups/#create-single-attribute","title":"Create Single Attribute","text":"<p>Use <code>CreateGroupAttributeAsync</code> to add a single custom attribute to a group:</p> <p>Example</p> <pre><code>async void AddGroupAttribute(int groupId)\n{\n    try\n    {\n        var attribute = await GameFuseUser.CurrentUser.CreateGroupAttributeAsync(\n            groupId, \n            \"score\", \n            \"1500\", \n            false); // othersCanEdit = false\n\n        Debug.Log($\"Attribute created: {attribute.Key} = {attribute.Value}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to create group attribute: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#create-multiple-attributes","title":"Create Multiple Attributes","text":"<p>Use <code>CreateGroupAttributesAsync</code> to add multiple attributes at once:</p> <p>Example</p> <pre><code>async void AddMultipleGroupAttributes(int groupId)\n{\n    try\n    {\n        var attributesToCreate = new List&lt;GroupAttributePayloadItem&gt;\n        {\n            new GroupAttributePayloadItem { Key = \"level\", Value = \"5\", OthersCanEdit = false },\n            new GroupAttributePayloadItem { Key = \"rank\", Value = \"Gold\", OthersCanEdit = true },\n            new GroupAttributePayloadItem { Key = \"region\", Value = \"North America\", OthersCanEdit = false }\n        };\n\n        var response = await GameFuseUser.CurrentUser.CreateGroupAttributesAsync(groupId, attributesToCreate);\n        Debug.Log($\"Created {response.Attributes.Count} attributes\");\n\n        foreach (var attribute in response.Attributes)\n        {\n            Debug.Log($\"Created: {attribute.Key} = {attribute.Value}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to create group attributes: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#fetch-group-attributes","title":"Fetch Group Attributes","text":"<p>Use <code>FetchGroupAttributesAsync</code> to retrieve all attributes for a group:</p> <p>Example</p> <pre><code>async void LoadGroupAttributes(int groupId)\n{\n    try\n    {\n        var attributes = await GameFuseUser.CurrentUser.FetchGroupAttributesAsync(groupId);\n        Debug.Log($\"Group has {attributes.Count} attributes\");\n\n        foreach (var attribute in attributes)\n        {\n            Debug.Log($\"{attribute.Key}: {attribute.Value}\");\n            Debug.Log($\"  Others can edit: {attribute.OthersCanEdit}\");\n            Debug.Log($\"  Created by: {attribute.CreatedByUsername}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to fetch group attributes: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#modify-group-attributes","title":"Modify Group Attributes","text":"<p>Use <code>ModifyGroupAttributeAsync</code> to update an existing group attribute:</p> <p>Example</p> <pre><code>async void UpdateGroupAttribute(int groupId)\n{\n    try\n    {\n        var payload = new ModifyGroupAttributePayload\n        {\n            Key = \"score\",\n            Value = \"2000\"\n        };\n\n        var updatedAttribute = await GameFuseUser.CurrentUser.ModifyGroupAttributeAsync(groupId, payload);\n        Debug.Log($\"Updated attribute: {updatedAttribute.Key} = {updatedAttribute.Value}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Failed to modify group attribute: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing how to implement a group management system:</p> <p>Example</p> <pre><code>using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing GameFuse;\nusing GameFuse.Models.Shared;\nusing System.Linq;\n\npublic class GroupManager : MonoBehaviour\n{\n    [Header(\"UI References\")]\n    public Transform groupsListParent;\n    public GameObject groupItemPrefab;\n    public Button createGroupButton;\n    public InputField groupNameInput;\n    public Toggle inviteOnlyToggle;\n    public InputField maxSizeInput;\n\n    [Header(\"Group Details\")]\n    public GameObject groupDetailsPanel;\n    public Text groupNameText;\n    public Text memberCountText;\n    public Transform membersListParent;\n    public Transform attributesListParent;\n    public GameObject memberItemPrefab;\n    public GameObject attributeItemPrefab;\n\n    private Group currentGroup;\n\n    void Start()\n    {\n        createGroupButton.onClick.AddListener(OnCreateGroupClicked);\n        RefreshGroupsList();\n    }\n\n    async void OnCreateGroupClicked()\n    {\n        string groupName = groupNameInput.text.Trim();\n        if (string.IsNullOrEmpty(groupName))\n        {\n            Debug.LogWarning(\"Please enter a group name\");\n            return;\n        }\n\n        await CreateNewGroup(groupName);\n    }\n\n    public async System.Threading.Tasks.Task CreateNewGroup(string name)\n    {\n        try\n        {\n            var payload = new CreateGroupPayload\n            {\n                Name = name,\n                GroupType = \"default\",\n                MaxGroupSize = int.Parse(maxSizeInput.text),\n                CanAutoJoin = !inviteOnlyToggle.isOn,\n                IsInviteOnly = inviteOnlyToggle.isOn,\n                Searchable = true,\n                AdminsOnlyCanCreateAttributes = true\n            };\n\n            var group = await GameFuseUser.CurrentUser.CreateGroupAsync(payload);\n            Debug.Log($\"Group '{name}' created successfully!\");\n\n            // Clear input fields\n            groupNameInput.text = \"\";\n            maxSizeInput.text = \"10\";\n            inviteOnlyToggle.isOn = false;\n\n            await RefreshGroupsList();\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error creating group: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task RefreshGroupsList()\n    {\n        try\n        {\n            var groups = await GameFuseUser.CurrentUser.FetchAllGroupsAsync();\n\n            // Clear existing items\n            foreach (Transform child in groupsListParent)\n            {\n                Destroy(child.gameObject);\n            }\n\n            // Create UI items for each group\n            foreach (var group in groups)\n            {\n                var groupItem = Instantiate(groupItemPrefab, groupsListParent);\n                var groupUI = groupItem.GetComponent&lt;GroupItemUI&gt;();\n                if (groupUI != null)\n                {\n                    groupUI.Setup(group, this);\n                }\n            }\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error refreshing groups list: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task ShowGroupDetails(int groupId)\n    {\n        try\n        {\n            currentGroup = await GameFuseUser.CurrentUser.FetchGroupDetailsAsync(groupId);\n\n            // Update group info\n            groupNameText.text = currentGroup.Name;\n            memberCountText.text = $\"Members: {currentGroup.MemberCount}/{currentGroup.MaxGroupSize}\";\n\n            // Update members list\n            ClearParent(membersListParent);\n            if (currentGroup.Members != null)\n            {\n                foreach (var member in currentGroup.Members)\n                {\n                    var memberItem = Instantiate(memberItemPrefab, membersListParent);\n                    var memberUI = memberItem.GetComponent&lt;MemberItemUI&gt;();\n                    if (memberUI != null)\n                    {\n                        bool isAdmin = currentGroup.Admins?.Any(admin =&gt; admin.Id == member.Id) ?? false;\n                        memberUI.Setup(member, isAdmin);\n                    }\n                }\n            }\n\n            // Load and display attributes\n            await LoadGroupAttributes(groupId);\n\n            groupDetailsPanel.SetActive(true);\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error showing group details: {ex.Message}\");\n        }\n    }\n\n    async System.Threading.Tasks.Task LoadGroupAttributes(int groupId)\n    {\n        try\n        {\n            var attributes = await GameFuseUser.CurrentUser.FetchGroupAttributesAsync(groupId);\n\n            ClearParent(attributesListParent);\n            foreach (var attribute in attributes)\n            {\n                var attributeItem = Instantiate(attributeItemPrefab, attributesListParent);\n                var attributeUI = attributeItem.GetComponent&lt;AttributeItemUI&gt;();\n                if (attributeUI != null)\n                {\n                    attributeUI.Setup(attribute);\n                }\n            }\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error loading group attributes: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task JoinGroup(int groupId)\n    {\n        try\n        {\n            var response = await GameFuseUser.CurrentUser.SendGroupConnectionRequestAsync(groupId);\n            Debug.Log($\"Join request sent for group {groupId}\");\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error joining group: {ex.Message}\");\n        }\n    }\n\n    public async System.Threading.Tasks.Task AddGroupAttribute(string key, string value, bool othersCanEdit)\n    {\n        if (currentGroup == null) return;\n\n        try\n        {\n            var attribute = await GameFuseUser.CurrentUser.CreateGroupAttributeAsync(\n                currentGroup.Id, \n                key, \n                value, \n                othersCanEdit);\n\n            Debug.Log($\"Added attribute: {key} = {value}\");\n            await LoadGroupAttributes(currentGroup.Id);\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error adding group attribute: {ex.Message}\");\n        }\n    }\n\n    void ClearParent(Transform parent)\n    {\n        foreach (Transform child in parent)\n        {\n            Destroy(child.gameObject);\n        }\n    }\n}\n\n// UI component classes would be similar to the friendship example\npublic class GroupItemUI : MonoBehaviour\n{\n    public Text groupNameText;\n    public Text memberCountText;\n    public Button viewButton;\n    public Button joinButton;\n\n    private GroupSummary group;\n    private GroupManager manager;\n\n    void Start()\n    {\n        viewButton.onClick.AddListener(() =&gt; manager.ShowGroupDetails(group.Id));\n        joinButton.onClick.AddListener(() =&gt; manager.JoinGroup(group.Id));\n    }\n\n    public void Setup(GroupSummary groupData, GroupManager groupManager)\n    {\n        group = groupData;\n        manager = groupManager;\n\n        groupNameText.text = groupData.Name;\n        memberCountText.text = $\"{groupData.MemberCount}/{groupData.MaxGroupSize}\";\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/groups/#method-reference","title":"Method Reference","text":""},{"location":"C%23%20Unity%203D/groups/#creategroupasync","title":"<code>CreateGroupAsync</code>","text":"<p>Creates a new group with the current user as admin.</p> <p>Parameters: - <code>payload</code> (CreateGroupPayload): Group creation details including name, type, size limits, and permissions - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;Group&gt;</code> - The newly created group</p>"},{"location":"C%23%20Unity%203D/groups/#fetchallgroupsasync","title":"<code>FetchAllGroupsAsync</code>","text":"<p>Fetches a list of all available groups (summary view).</p> <p>Parameters: - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;GroupSummary&gt;&gt;</code> - Read-only list of group summaries</p>"},{"location":"C%23%20Unity%203D/groups/#fetchgroupdetailsasync","title":"<code>FetchGroupDetailsAsync</code>","text":"<p>Fetches detailed information for a specific group.</p> <p>Parameters: - <code>groupId</code> (int): ID of the group to fetch - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;Group&gt;</code> - Detailed group information including members and admins</p>"},{"location":"C%23%20Unity%203D/groups/#sendgroupconnectionrequestasync","title":"<code>SendGroupConnectionRequestAsync</code>","text":"<p>Sends a request to join a group.</p> <p>Parameters: - <code>groupId</code> (int): ID of the group to join - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;GroupConnectionResponse&gt;</code> - Response with connection details</p>"},{"location":"C%23%20Unity%203D/groups/#acceptgroupmembershiprequestasync","title":"<code>AcceptGroupMembershipRequestAsync</code>","text":"<p>Accepts a pending group membership request (admin only).</p> <p>Parameters: - <code>groupConnectionId</code> (int): ID of the connection request to accept - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;GroupConnectionStatusUpdateResponse&gt;</code> - Updated connection status</p>"},{"location":"C%23%20Unity%203D/groups/#declinegroupmembershiprequestasync","title":"<code>DeclineGroupMembershipRequestAsync</code>","text":"<p>Declines a pending group membership request (admin only).</p> <p>Parameters: - <code>groupConnectionId</code> (int): ID of the connection request to decline - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;GroupConnectionStatusUpdateResponse&gt;</code> - Updated connection status</p>"},{"location":"C%23%20Unity%203D/groups/#creategroupattributeasync","title":"<code>CreateGroupAttributeAsync</code>","text":"<p>Creates a single custom attribute for a group.</p> <p>Parameters: - <code>groupId</code> (int): ID of the group - <code>key</code> (string): Attribute key name - <code>value</code> (string): Attribute value - <code>othersCanEdit</code> (bool?, optional): Whether other members can edit this attribute - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;GroupAttributeResponseItem&gt;</code> - The created attribute</p>"},{"location":"C%23%20Unity%203D/groups/#creategroupattributesasync","title":"<code>CreateGroupAttributesAsync</code>","text":"<p>Creates multiple custom attributes for a group.</p> <p>Parameters: - <code>groupId</code> (int): ID of the group - <code>attributesToCreate</code> (List): List of attributes to create - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation <p>Returns: <code>Task&lt;CreateGroupAttributesResponse&gt;</code> - Response with created attributes</p>"},{"location":"C%23%20Unity%203D/groups/#fetchgroupattributesasync","title":"<code>FetchGroupAttributesAsync</code>","text":"<p>Fetches all custom attributes for a group.</p> <p>Parameters: - <code>groupId</code> (int): ID of the group - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;IReadOnlyList&lt;GroupAttributeResponseItem&gt;&gt;</code> - Read-only list of attributes</p>"},{"location":"C%23%20Unity%203D/groups/#modifygroupattributeasync","title":"<code>ModifyGroupAttributeAsync</code>","text":"<p>Modifies an existing group attribute.</p> <p>Parameters: - <code>groupId</code> (int): ID of the group - <code>payload</code> (ModifyGroupAttributePayload): Details of the attribute to modify - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;GroupAttributeResponseItem&gt;</code> - The updated attribute</p>"},{"location":"C%23%20Unity%203D/groups/#error-handling","title":"Error Handling","text":"<p>All group methods are async and may throw exceptions. Always wrap calls in try-catch blocks:</p> <ul> <li>Network connectivity issues - Connection problems</li> <li>Authentication errors - User not signed in</li> <li>Permission errors - Insufficient privileges for the action</li> <li>Invalid parameters - Group not found, invalid IDs</li> <li>Group capacity - Maximum group size reached</li> <li>Server errors - Temporary GameFuse service issues</li> </ul>"},{"location":"C%23%20Unity%203D/groups/#function-return-values","title":"Function return values","text":""},{"location":"C%23%20Unity%203D/groups/#http-status-codes","title":"HTTP Status Codes","text":"HTTP status code Description <code>200</code> OK - Operation completed successfully <code>400</code> Bad Request - Invalid parameters <code>401</code> Unauthorized - User not authenticated <code>403</code> Forbidden - Insufficient permissions <code>404</code> Not Found - Group or resource not found <code>409</code> Conflict - Group capacity reached or duplicate action <code>500</code> Internal Server Error - Server error"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/","title":"In Game Leaderboard (C#)","text":"<p>Leaderboards can be easily created and managed within GameFuse from the Unity game client. A leaderboard entry can be submitted with:</p> <ul> <li><code>leaderboard_name</code></li> <li><code>score</code></li> <li><code>metadata</code> (optional extra attributes)</li> </ul> <p>for the current signed in user.</p> <p>Leaderboards can be retrieved for a specific <code>leaderboard_name</code>, which would gather and sort the high scores for all users in the game. Leaderboards can also be retrieved for a specific user.</p>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#submitting-leaderboard-entries","title":"Submitting Leaderboard Entries","text":"<p>Use <code>SubmitLeaderboardEntryAsync</code> to add a new leaderboard entry for the current user:</p> <p>Example</p> <pre><code>async void SubmitScore()\n{\n    try\n    {\n        var metadata = new Dictionary&lt;string, object&gt;\n        {\n            {\"deaths\", 15},\n            {\"jewels\", 12},\n            {\"level\", \"forest\"}\n        };\n\n        var user = await GameFuseUser.CurrentUser.SubmitLeaderboardEntryAsync(\n            \"Game1Leaderboard\", \n            1500.5, \n            metadata);\n\n        Debug.Log($\"Score submitted successfully for user: {user.Username}\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error submitting score: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#getting-leaderboard-entries","title":"Getting Leaderboard Entries","text":""},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#get-global-leaderboard","title":"Get Global Leaderboard","text":"<p>Use <code>GetLeaderboardEntriesAsync</code> to retrieve leaderboard entries for all users in a specific leaderboard:</p> <p>Example</p> <pre><code>async void GetGlobalLeaderboard()\n{\n    try\n    {\n        int gameId = GameFuseSettings.GameId; // Your game ID from settings\n        var response = await GameFuseUser.CurrentUser.GetLeaderboardEntriesAsync(\n            gameId, \n            \"Game1Leaderboard\", \n            10); // Get top 10 entries\n\n        Debug.Log($\"Retrieved {response.LeaderboardEntries.Count} entries\");\n\n        foreach (var entry in response.LeaderboardEntries)\n        {\n            Debug.Log($\"{entry.Username}: {entry.Score} (Rank: {entry.Rank})\");\n\n            // Access metadata if available\n            if (entry.Metadata != null)\n            {\n                foreach (var kvp in entry.Metadata)\n                {\n                    Debug.Log($\"  {kvp.Key}: {kvp.Value}\");\n                }\n            }\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error getting leaderboard: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#get-current-users-leaderboard-entries","title":"Get Current User's Leaderboard Entries","text":"<p>Use <code>GetCurrentUserLeaderboardEntriesAsync</code> to retrieve the current user's leaderboard entries:</p> <p>Example</p> <pre><code>async void GetMyLeaderboardEntries()\n{\n    try\n    {\n        // Get all leaderboard entries for current user\n        var response = await GameFuseUser.CurrentUser.GetCurrentUserLeaderboardEntriesAsync(50);\n\n        Debug.Log($\"Current user has {response.LeaderboardEntries.Count} leaderboard entries\");\n\n        foreach (var entry in response.LeaderboardEntries)\n        {\n            Debug.Log($\"Leaderboard: {entry.LeaderboardName}, Score: {entry.Score}\");\n        }\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error getting user entries: {ex.Message}\");\n    }\n}\n\nasync void GetMyEntriesForSpecificLeaderboard()\n{\n    try\n    {\n        // Get entries for specific leaderboard, one per user\n        var response = await GameFuseUser.CurrentUser.GetCurrentUserLeaderboardEntriesAsync(\n            10, \n            \"Game1Leaderboard\", \n            true); // onePerUser = true\n\n        Debug.Log($\"Found {response.LeaderboardEntries.Count} entries for Game1Leaderboard\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error getting specific leaderboard entries: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#get-another-users-leaderboard-entries","title":"Get Another User's Leaderboard Entries","text":"<p>Use <code>GetUserLeaderboardEntriesAsync</code> to retrieve leaderboard entries for a specific user:</p> <p>Example</p> <pre><code>async void GetOtherUserEntries()\n{\n    try\n    {\n        int otherUserId = 123;\n        var response = await GameFuseUser.CurrentUser.GetUserLeaderboardEntriesAsync(\n            otherUserId, \n            20, \n            \"Game1Leaderboard\");\n\n        Debug.Log($\"User {otherUserId} has {response.LeaderboardEntries.Count} entries\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error getting other user's entries: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#clearing-leaderboard-entries","title":"Clearing Leaderboard Entries","text":"<p>Use <code>ClearLeaderboardEntriesAsync</code> to remove all entries for the current user from a specific leaderboard:</p> <p>Example</p> <pre><code>async void ClearMyEntries()\n{\n    try\n    {\n        var user = await GameFuseUser.CurrentUser.ClearLeaderboardEntriesAsync(\"Game1Leaderboard\");\n        Debug.Log(\"Successfully cleared all entries from Game1Leaderboard\");\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Error clearing entries: {ex.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing leaderboard operations:</p> <p>Example</p> <pre><code>using System.Collections.Generic;\nusing UnityEngine;\nusing GameFuse;\nusing GameFuse.Config;\n\npublic class LeaderboardExample : MonoBehaviour\n{\n    async void Start()\n    {\n        // Ensure user is authenticated first\n        if (GameFuseUser.CurrentUser == null)\n        {\n            Debug.LogError(\"User must be authenticated first\");\n            return;\n        }\n\n        await DemonstrateLeaderboardOperations();\n    }\n\n    async System.Threading.Tasks.Task DemonstrateLeaderboardOperations()\n    {\n        try\n        {\n            string leaderboardName = \"HighScores\";\n\n            // 1. Submit a score with metadata\n            var metadata = new Dictionary&lt;string, object&gt;\n            {\n                {\"level\", \"boss_fight\"},\n                {\"time_played\", 300},\n                {\"difficulty\", \"hard\"}\n            };\n\n            await GameFuseUser.CurrentUser.SubmitLeaderboardEntryAsync(\n                leaderboardName, \n                2500.75, \n                metadata);\n            Debug.Log(\"Score submitted successfully\");\n\n            // 2. Get global leaderboard (top 10)\n            var globalResponse = await GameFuseUser.CurrentUser.GetLeaderboardEntriesAsync(\n                GameFuseSettings.GameId, \n                leaderboardName, \n                10);\n\n            Debug.Log($\"Global leaderboard has {globalResponse.LeaderboardEntries.Count} entries\");\n            for (int i = 0; i &lt; globalResponse.LeaderboardEntries.Count; i++)\n            {\n                var entry = globalResponse.LeaderboardEntries[i];\n                Debug.Log($\"{i + 1}. {entry.Username}: {entry.Score}\");\n            }\n\n            // 3. Get current user's entries\n            var myResponse = await GameFuseUser.CurrentUser.GetCurrentUserLeaderboardEntriesAsync(\n                20, \n                leaderboardName);\n\n            Debug.Log($\"I have {myResponse.LeaderboardEntries.Count} entries in {leaderboardName}\");\n\n            // 4. Optional: Clear entries if needed\n            // await GameFuseUser.CurrentUser.ClearLeaderboardEntriesAsync(leaderboardName);\n            // Debug.Log(\"Entries cleared\");\n        }\n        catch (System.Exception ex)\n        {\n            Debug.LogError($\"Error in leaderboard operations: {ex.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#method-reference","title":"Method Reference","text":""},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#submitleaderboardentryasync","title":"<code>SubmitLeaderboardEntryAsync</code>","text":"<p>Submits a new leaderboard entry for the current user.</p> <p>Parameters: - <code>leaderboardName</code> (string): Name of the leaderboard within the game - <code>score</code> (double): Score for the leaderboard entry - <code>metadata</code> (Dictionary, optional): Optional metadata for the entry - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation <p>Returns: <code>Task&lt;User&gt;</code> - The user details after submission</p>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#clearleaderboardentriesasync","title":"<code>ClearLeaderboardEntriesAsync</code>","text":"<p>Clears all leaderboard entries for the current user from a specific leaderboard.</p> <p>Parameters: - <code>leaderboardName</code> (string): Name of the leaderboard to clear entries from - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;User&gt;</code> - The user details after clearing</p>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#getleaderboardentriesasync","title":"<code>GetLeaderboardEntriesAsync</code>","text":"<p>Gets leaderboard entries for a specific leaderboard (global leaderboard).</p> <p>Parameters: - <code>gameId</code> (int): The ID of the game - <code>leaderboardName</code> (string): Name of the leaderboard within the game - <code>limit</code> (int): Limit the number of results (must be &gt;= 1) - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;LeaderboardEntriesResponse&gt;</code> - List of leaderboard entries</p>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#getcurrentuserleaderboardentriesasync","title":"<code>GetCurrentUserLeaderboardEntriesAsync</code>","text":"<p>Gets all leaderboard entries for the current user.</p> <p>Parameters: - <code>limit</code> (int): Limit the number of results (must be &gt;= 1) - <code>leaderboardName</code> (string, optional): Name of specific leaderboard. If null, returns all entries - <code>onePerUser</code> (bool?, optional): If true, get only one result per player on the leaderboard - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;LeaderboardEntriesResponse&gt;</code> - List of leaderboard entries</p>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#getuserleaderboardentriesasync","title":"<code>GetUserLeaderboardEntriesAsync</code>","text":"<p>Gets leaderboard entries for a specific user.</p> <p>Parameters: - <code>userId</code> (int): The ID of the user whose entries to retrieve - <code>limit</code> (int): Limit the number of results (must be &gt;= 1) - <code>leaderboardName</code> (string, optional): Name of specific leaderboard. If null, returns all entries - <code>onePerUser</code> (bool?, optional): If true, get only one result per player on the leaderboard - <code>cancellationToken</code> (CancellationToken, optional): Token to cancel the operation</p> <p>Returns: <code>Task&lt;LeaderboardEntriesResponse&gt;</code> - List of leaderboard entries</p>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#error-handling","title":"Error Handling","text":"<p>All methods are async and may throw exceptions. Always wrap calls in try-catch blocks or handle exceptions appropriately. Common error scenarios include:</p> <ul> <li>Network connectivity issues</li> <li>Invalid authentication</li> <li>Invalid leaderboard names</li> <li>Invalid user IDs</li> <li>Server errors</li> </ul>"},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#function-return-values","title":"Function return values","text":""},{"location":"C%23%20Unity%203D/in%20game%20leaderboard/#http-status-codes","title":"HTTP Status Codes","text":"HTTP status code Description <code>200</code> OK <code>400</code> Invalid parameters (e.g., invalid metadata, negative limit) <code>401</code> Unauthorized - user not authenticated <code>404</code> No entries found for the specified leaderboard name <code>500</code> Unknown server error"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/","title":"Signing Game Users Up","text":"<p>The GameFuse Unity SDK provides a modern, async/await-based user registration system through the <code>GameFuseUser.SignUpAsync</code> method. This allows players to create accounts that are stored securely in the cloud and can be accessed from any device.</p>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#overview","title":"Overview","text":"<p>User registration with GameFuse creates persistent player accounts with the following features:</p> <ul> <li>Cloud Storage: User data is stored securely online</li> <li>Cross-Device Access: Users can sign in from any device</li> <li>Automatic Authentication: Successfully registered users are automatically signed in</li> <li>Integration Ready: Immediate access to all GameFuse features after registration</li> </ul>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#basic-usage","title":"Basic Usage","text":""},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#simple-registration-using-gamefusesettings","title":"Simple Registration (Using GameFuseSettings)","text":"<p>If you've configured your <code>GameFuseSettings</code> ScriptableObject, registration is straightforward:</p> <pre><code>using GameFuse;\nusing UnityEngine;\nusing System.Threading.Tasks;\n\npublic class UserRegistration : MonoBehaviour\n{\n    public async void RegisterUser(string email, string password, string username)\n    {\n        try\n        {\n            // GameFuseSettings automatically provides Game ID and API Key\n            GameFuseUser newUser = await GameFuseUser.SignUpAsync(email, password, username);\n\n            Debug.Log($\"Successfully registered user: {newUser.Username}\");\n            Debug.Log($\"User ID: {newUser.Id}\");\n            Debug.Log($\"Email: {newUser.Email}\");\n\n            // User is now automatically signed in and available as CurrentUser\n            Debug.Log($\"Current user: {GameFuseUser.CurrentUser?.Username}\");\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Registration failed: {e.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#registration-with-custom-credentials","title":"Registration with Custom Credentials","text":"<p>You can override the GameFuseSettings by providing explicit Game ID and API Key:</p> <pre><code>public async void RegisterUserWithCustomCredentials(string email, string password, string username)\n{\n    try\n    {\n        GameFuseUser newUser = await GameFuseUser.SignUpAsync(\n            email: email,\n            password: password, \n            username: username,\n            gameId: \"your-custom-game-id\",\n            gameApiKey: \"your-custom-api-key\"\n        );\n\n        Debug.Log($\"User registered with custom credentials: {newUser.Username}\");\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Registration failed: {e.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#method-signature","title":"Method Signature","text":"<pre><code>public static async Task&lt;GameFuseUser&gt; SignUpAsync(\n    string email, \n    string password, \n    string username, \n    string gameId = null, \n    string gameApiKey = null, \n    CancellationToken cancellationToken = default\n)\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>email</code> <code>string</code> Yes User's email address (used for sign-in) <code>password</code> <code>string</code> Yes User's password <code>username</code> <code>string</code> Yes Display name for the user <code>gameId</code> <code>string</code> No* Game ID from GameFuse dashboard <code>gameApiKey</code> <code>string</code> No* API Key from GameFuse dashboard <code>cancellationToken</code> <code>CancellationToken</code> No Token to cancel the operation <p>*Note: <code>gameId</code> and <code>gameApiKey</code> are automatically loaded from <code>GameFuseSettings</code> if not provided.</p>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#return-value","title":"Return Value","text":"<p>Returns a <code>Task&lt;GameFuseUser&gt;</code> representing the newly registered and authenticated user. The user is also automatically set as <code>GameFuseUser.CurrentUser</code>.</p>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#complete-registration-example","title":"Complete Registration Example","text":"<p>Here's a complete example showing a registration form with UI integration:</p> <pre><code>using GameFuse;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\nusing System.Threading.Tasks;\n\npublic class RegistrationManager : MonoBehaviour\n{\n    [Header(\"UI Elements\")]\n    public TMP_InputField emailInput;\n    public TMP_InputField passwordInput;\n    public TMP_InputField usernameInput;\n    public Button registerButton;\n    public TextMeshProUGUI statusText;\n\n    private void Start()\n    {\n        registerButton.onClick.AddListener(() =&gt; HandleRegistration());\n    }\n\n    public async void HandleRegistration()\n    {\n        // Validate input\n        if (string.IsNullOrEmpty(emailInput.text) || \n            string.IsNullOrEmpty(passwordInput.text) || \n            string.IsNullOrEmpty(usernameInput.text))\n        {\n            ShowStatus(\"Please fill in all fields\", false);\n            return;\n        }\n\n        // Disable UI during registration\n        SetUIEnabled(false);\n        ShowStatus(\"Creating account...\", true);\n\n        try\n        {\n            GameFuseUser newUser = await GameFuseUser.SignUpAsync(\n                emailInput.text,\n                passwordInput.text,\n                usernameInput.text\n            );\n\n            ShowStatus($\"Welcome, {newUser.Username}!\", true);\n\n            // Navigate to main game or update UI\n            OnRegistrationSuccess(newUser);\n        }\n        catch (System.ArgumentNullException e)\n        {\n            ShowStatus(\"Configuration error: \" + e.Message, false);\n        }\n        catch (GameFuse.Exceptions.GameFuseApiException e)\n        {\n            ShowStatus($\"Registration failed: {e.Message}\", false);\n        }\n        catch (System.Exception e)\n        {\n            ShowStatus($\"Unexpected error: {e.Message}\", false);\n        }\n        finally\n        {\n            SetUIEnabled(true);\n        }\n    }\n\n    private void OnRegistrationSuccess(GameFuseUser user)\n    {\n        // User is now registered and signed in\n        // You can immediately access all GameFuse features\n        Debug.Log($\"User {user.Username} has {user.Credits} credits\");\n\n        // Navigate to main menu or game scene\n        // SceneManager.LoadScene(\"MainMenu\");\n    }\n\n    private void ShowStatus(string message, bool isSuccess)\n    {\n        statusText.text = message;\n        statusText.color = isSuccess ? Color.green : Color.red;\n    }\n\n    private void SetUIEnabled(bool enabled)\n    {\n        registerButton.interactable = enabled;\n        emailInput.interactable = enabled;\n        passwordInput.interactable = enabled;\n        usernameInput.interactable = enabled;\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#user-data-access","title":"User Data Access","text":"<p>After successful registration, you can immediately access user information:</p> <pre><code>// Access the newly registered user\nGameFuseUser currentUser = GameFuseUser.CurrentUser;\n\n// User properties\nDebug.Log($\"ID: {currentUser.Id}\");\nDebug.Log($\"Username: {currentUser.Username}\");\nDebug.Log($\"Email: {currentUser.Email}\");\nDebug.Log($\"Credits: {currentUser.Credits}\");\nDebug.Log($\"Score: {currentUser.Score}\");\nDebug.Log($\"Login Count: {currentUser.NumberOfLogins}\");\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#error-handling","title":"Error Handling","text":""},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#common-exceptions","title":"Common Exceptions","text":"Exception Cause Solution <code>ArgumentNullException</code> Missing Game ID or API Key Configure GameFuseSettings or provide parameters <code>GameFuseApiException</code> (404) Invalid Game ID or API Key Check credentials in GameFuse dashboard <code>GameFuseApiException</code> (422) Email already exists or validation error Use different email or check input format <code>GameFuseApiException</code> (402) Game is disabled Check GameFuse dashboard game status"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#robust-error-handling-example","title":"Robust Error Handling Example","text":"<pre><code>public async Task&lt;bool&gt; SafeRegisterUser(string email, string password, string username)\n{\n    try\n    {\n        var user = await GameFuseUser.SignUpAsync(email, password, username);\n        Debug.Log($\"Registration successful: {user.Username}\");\n        return true;\n    }\n    catch (ArgumentNullException)\n    {\n        Debug.LogError(\"GameFuse not configured. Check GameFuseSettings.\");\n        return false;\n    }\n    catch (GameFuse.Exceptions.GameFuseApiException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n    {\n        Debug.LogError(\"Invalid game credentials. Check Game ID and API Key.\");\n        return false;\n    }\n    catch (GameFuse.Exceptions.GameFuseApiException ex) when (ex.StatusCode == System.Net.HttpStatusCode.UnprocessableEntity)\n    {\n        Debug.LogError(\"Registration failed: Email may already be in use or input validation failed.\");\n        return false;\n    }\n    catch (GameFuse.Exceptions.GameFuseApiException ex) when (ex.StatusCode == System.Net.HttpStatusCode.PaymentRequired)\n    {\n        Debug.LogError(\"Game is disabled. Check GameFuse dashboard.\");\n        return false;\n    }\n    catch (System.Exception ex)\n    {\n        Debug.LogError($\"Unexpected registration error: {ex.Message}\");\n        return false;\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#best-practices","title":"Best Practices","text":""},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#input-validation","title":"Input Validation","text":"<pre><code>private bool ValidateRegistrationInput(string email, string password, string username)\n{\n    if (string.IsNullOrWhiteSpace(email) || !email.Contains(\"@\"))\n    {\n        ShowError(\"Please enter a valid email address\");\n        return false;\n    }\n\n    if (string.IsNullOrWhiteSpace(password) || password.Length &lt; 6)\n    {\n        ShowError(\"Password must be at least 6 characters\");\n        return false;\n    }\n\n    if (string.IsNullOrWhiteSpace(username) || username.Length &lt; 3)\n    {\n        ShowError(\"Username must be at least 3 characters\");\n        return false;\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#cancellation-support","title":"Cancellation Support","text":"<pre><code>using System.Threading;\n\nprivate CancellationTokenSource _registrationCancellation;\n\npublic async void StartRegistration()\n{\n    _registrationCancellation = new CancellationTokenSource();\n\n    try\n    {\n        var user = await GameFuseUser.SignUpAsync(\n            email, password, username, \n            cancellationToken: _registrationCancellation.Token\n        );\n        // Handle success\n    }\n    catch (OperationCanceledException)\n    {\n        Debug.Log(\"Registration was cancelled\");\n    }\n}\n\npublic void CancelRegistration()\n{\n    _registrationCancellation?.Cancel();\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#integration-with-other-features","title":"Integration with Other Features","text":"<p>After successful registration, users automatically have access to all GameFuse features:</p> <pre><code>private async void OnRegistrationComplete(GameFuseUser user)\n{\n    // User is signed in and ready to use all features\n\n    // Set up initial user data\n    await user.SetUserAttributeAsync(\"first_login\", System.DateTime.Now.ToString());\n\n    // Add welcome credits\n    await user.AddCreditsAsync(100);\n\n    // Check for available store items\n    var storeItems = await user.GetAvailableStoreItemsAsync();\n\n    Debug.Log($\"User registered with {user.Credits} credits and access to {storeItems.Count} store items\");\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/signing%20game%20users%20up/#requirements","title":"Requirements","text":"<ul> <li>GameFuse Unity SDK installed</li> <li>GameFuseSettings configured with valid Game ID and API Key</li> <li>Internet connection for API communication</li> <li>Unity 2021.3 or later (for async/await support)</li> </ul>"},{"location":"C%23%20Unity%203D/using%20credits/","title":"Using Credits","text":"<p>Credits are a fundamental currency system in GameFuse that allows players to purchase store items and participate in your game's economy. The GameFuse Unity SDK provides robust credit management through the <code>GameFuseUser</code> class with modern async/await methods for adding and setting credits.</p>"},{"location":"C%23%20Unity%203D/using%20credits/#overview","title":"Overview","text":"<p>The GameFuse credit system provides:</p> <ul> <li>Server-Side Validation: All credit operations are validated and stored securely on the server</li> <li>Automatic Synchronization: Local user data is automatically updated after credit operations</li> <li>Flexible Operations: Both additive (<code>AddCreditsAsync</code>) and absolute (<code>SetCreditsAsync</code>) credit management</li> <li>Store Integration: Credits are automatically deducted during store purchases</li> <li>Real-Time Updates: Immediate reflection of credit changes in user properties</li> </ul>"},{"location":"C%23%20Unity%203D/using%20credits/#credit-properties","title":"Credit Properties","text":"<p>Credits are accessible through the authenticated user's properties:</p> <pre><code>var currentUser = GameFuseUser.CurrentUser;\nif (currentUser != null &amp;&amp; currentUser.IsAuthenticated())\n{\n    Debug.Log($\"Current Credits: {currentUser.Credits}\");\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#adding-credits","title":"Adding Credits","text":""},{"location":"C%23%20Unity%203D/using%20credits/#basic-credit-addition","title":"Basic Credit Addition","text":"<p>Use <code>AddCreditsAsync</code> to add (or subtract) credits from a user's current balance:</p> <pre><code>using GameFuse;\nusing UnityEngine;\nusing System.Threading.Tasks;\n\npublic class CreditManager : MonoBehaviour\n{\n    public async void AddCreditsToUser(int amount)\n    {\n        try\n        {\n            if (GameFuseUser.CurrentUser == null)\n            {\n                Debug.LogError(\"No user signed in\");\n                return;\n            }\n\n            Debug.Log($\"Current credits: {GameFuseUser.CurrentUser.Credits}\");\n            Debug.Log($\"Adding {amount} credits...\");\n\n            // Add credits and get updated user data\n            var updatedUser = await GameFuseUser.CurrentUser.AddCreditsAsync(amount);\n\n            Debug.Log($\"Credits added successfully!\");\n            Debug.Log($\"New credit balance: {GameFuseUser.CurrentUser.Credits}\");\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to add credits: {e.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#setting-credits","title":"Setting Credits","text":""},{"location":"C%23%20Unity%203D/using%20credits/#absolute-credit-setting","title":"Absolute Credit Setting","text":"<p>Use <code>SetCreditsAsync</code> to set a user's credits to a specific absolute value:</p> <pre><code>public async void SetUserCredits(int newAmount)\n{\n    try\n    {\n        if (GameFuseUser.CurrentUser == null)\n        {\n            Debug.LogError(\"No user signed in\");\n            return;\n        }\n\n        Debug.Log($\"Current credits: {GameFuseUser.CurrentUser.Credits}\");\n        Debug.Log($\"Setting credits to {newAmount}...\");\n\n        // Set credits to absolute value\n        var updatedUser = await GameFuseUser.CurrentUser.SetCreditsAsync(newAmount);\n\n        Debug.Log($\"Credits set successfully!\");\n        Debug.Log($\"New credit balance: {GameFuseUser.CurrentUser.Credits}\");\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Failed to set credits: {e.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#method-signatures","title":"Method Signatures","text":""},{"location":"C%23%20Unity%203D/using%20credits/#addcreditsasync","title":"AddCreditsAsync","text":"<pre><code>public async Task&lt;User&gt; AddCreditsAsync(\n    int creditsAmount, \n    CancellationToken cancellationToken = default\n)\n</code></pre> <p>Parameters: - <code>creditsAmount</code> (int): Amount to add to current credits (can be negative for subtraction) - <code>cancellationToken</code> (CancellationToken): Optional token to cancel the operation</p> <p>Returns: <code>Task&lt;User&gt;</code> - The updated user data after the operation</p>"},{"location":"C%23%20Unity%203D/using%20credits/#setcreditsasync","title":"SetCreditsAsync","text":"<pre><code>public async Task&lt;User&gt; SetCreditsAsync(\n    int newCredits, \n    CancellationToken cancellationToken = default\n)\n</code></pre> <p>Parameters: - <code>newCredits</code> (int): The new absolute credit amount for the user - <code>cancellationToken</code> (CancellationToken): Optional token to cancel the operation</p> <p>Returns: <code>Task&lt;User&gt;</code> - The updated user data after the operation</p>"},{"location":"C%23%20Unity%203D/using%20credits/#complete-credit-management-example","title":"Complete Credit Management Example","text":"<p>Here's a comprehensive example showing various credit operations with UI integration:</p> <pre><code>using GameFuse;\nusing GameFuse.Models.Shared;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\nusing System.Threading.Tasks;\n\npublic class CreditManagerUI : MonoBehaviour\n{\n    [Header(\"UI Elements\")]\n    public TextMeshProUGUI creditsDisplay;\n    public TMP_InputField addAmountInput;\n    public TMP_InputField setAmountInput;\n    public Button addCreditsButton;\n    public Button setCreditsButton;\n    public Button rewardButton;\n    public Button purchaseButton;\n    public TextMeshProUGUI statusText;\n\n    [Header(\"Preset Values\")]\n    public int dailyRewardAmount = 100;\n    public int purchaseCost = 50;\n\n    private void Start()\n    {\n        // Setup button listeners\n        addCreditsButton.onClick.AddListener(() =&gt; HandleAddCredits());\n        setCreditsButton.onClick.AddListener(() =&gt; HandleSetCredits());\n        rewardButton.onClick.AddListener(() =&gt; HandleDailyReward());\n        purchaseButton.onClick.AddListener(() =&gt; HandlePurchase());\n\n        // Update display\n        UpdateCreditsDisplay();\n    }\n\n    private void Update()\n    {\n        // Update credits display periodically\n        UpdateCreditsDisplay();\n    }\n\n    public async void HandleAddCredits()\n    {\n        if (!ValidateUserSignedIn()) return;\n\n        if (!int.TryParse(addAmountInput.text, out int amount))\n        {\n            ShowStatus(\"Please enter a valid number\", false);\n            return;\n        }\n\n        await AddCredits(amount);\n    }\n\n    public async void HandleSetCredits()\n    {\n        if (!ValidateUserSignedIn()) return;\n\n        if (!int.TryParse(setAmountInput.text, out int amount) || amount &lt; 0)\n        {\n            ShowStatus(\"Please enter a valid positive number\", false);\n            return;\n        }\n\n        await SetCredits(amount);\n    }\n\n    public async void HandleDailyReward()\n    {\n        if (!ValidateUserSignedIn()) return;\n        await AddCredits(dailyRewardAmount, \"Daily reward claimed!\");\n    }\n\n    public async void HandlePurchase()\n    {\n        if (!ValidateUserSignedIn()) return;\n\n        if (GameFuseUser.CurrentUser.Credits &lt; purchaseCost)\n        {\n            ShowStatus($\"Insufficient credits! Need {purchaseCost}, have {GameFuseUser.CurrentUser.Credits}\", false);\n            return;\n        }\n\n        await AddCredits(-purchaseCost, \"Purchase completed!\");\n    }\n\n    private async Task AddCredits(int amount, string successMessage = null)\n    {\n        try\n        {\n            SetUIEnabled(false);\n            ShowStatus($\"Adding {amount} credits...\", true);\n\n            var updatedUser = await GameFuseUser.CurrentUser.AddCreditsAsync(amount);\n\n            string message = successMessage ?? $\"Added {amount} credits successfully!\";\n            ShowStatus(message, true);\n\n            Debug.Log($\"Credits operation successful. New balance: {GameFuseUser.CurrentUser.Credits}\");\n        }\n        catch (GameFuse.Exceptions.GameFuseApiException ex)\n        {\n            HandleCreditError(ex, \"add credits\");\n        }\n        catch (System.Exception e)\n        {\n            ShowStatus($\"Unexpected error: {e.Message}\", false);\n        }\n        finally\n        {\n            SetUIEnabled(true);\n        }\n    }\n\n    private async Task SetCredits(int amount)\n    {\n        try\n        {\n            SetUIEnabled(false);\n            ShowStatus($\"Setting credits to {amount}...\", true);\n\n            var updatedUser = await GameFuseUser.CurrentUser.SetCreditsAsync(amount);\n\n            ShowStatus($\"Credits set to {amount} successfully!\", true);\n\n            Debug.Log($\"Credits set successfully. New balance: {GameFuseUser.CurrentUser.Credits}\");\n        }\n        catch (GameFuse.Exceptions.GameFuseApiException ex)\n        {\n            HandleCreditError(ex, \"set credits\");\n        }\n        catch (System.Exception e)\n        {\n            ShowStatus($\"Unexpected error: {e.Message}\", false);\n        }\n        finally\n        {\n            SetUIEnabled(true);\n        }\n    }\n\n    private bool ValidateUserSignedIn()\n    {\n        if (GameFuseUser.CurrentUser == null || !GameFuseUser.CurrentUser.IsAuthenticated())\n        {\n            ShowStatus(\"Please sign in to manage credits\", false);\n            return false;\n        }\n        return true;\n    }\n\n    private void UpdateCreditsDisplay()\n    {\n        if (GameFuseUser.CurrentUser != null &amp;&amp; GameFuseUser.CurrentUser.IsAuthenticated())\n        {\n            creditsDisplay.text = $\"Credits: {GameFuseUser.CurrentUser.Credits}\";\n        }\n        else\n        {\n            creditsDisplay.text = \"Credits: Sign in required\";\n        }\n    }\n\n    private void HandleCreditError(GameFuse.Exceptions.GameFuseApiException ex, string operation)\n    {\n        switch (ex.StatusCode)\n        {\n            case System.Net.HttpStatusCode.BadRequest:\n                ShowStatus($\"Failed to {operation}: Invalid request\", false);\n                break;\n            case System.Net.HttpStatusCode.Unauthorized:\n                ShowStatus($\"Failed to {operation}: Authentication required\", false);\n                break;\n            default:\n                ShowStatus($\"Failed to {operation}: {ex.Message}\", false);\n                break;\n        }\n        Debug.LogError($\"Credit operation failed: {ex.Message}\");\n    }\n\n    private void ShowStatus(string message, bool isSuccess)\n    {\n        statusText.text = message;\n        statusText.color = isSuccess ? Color.green : Color.red;\n\n        // Clear status after 3 seconds\n        CancelInvoke(nameof(ClearStatus));\n        Invoke(nameof(ClearStatus), 3f);\n    }\n\n    private void ClearStatus()\n    {\n        statusText.text = \"\";\n    }\n\n    private void SetUIEnabled(bool enabled)\n    {\n        addCreditsButton.interactable = enabled;\n        setCreditsButton.interactable = enabled;\n        rewardButton.interactable = enabled;\n        purchaseButton.interactable = enabled;\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#game-integration-examples","title":"Game Integration Examples","text":""},{"location":"C%23%20Unity%203D/using%20credits/#daily-rewards-system","title":"Daily Rewards System","text":"<pre><code>public class DailyRewardsManager : MonoBehaviour\n{\n    [Header(\"Reward Configuration\")]\n    public int[] dailyRewardAmounts = { 100, 150, 200, 250, 300, 400, 500 };\n\n    private const string LAST_REWARD_KEY = \"LastDailyReward\";\n\n    public async Task&lt;bool&gt; ClaimDailyReward()\n    {\n        // Check if reward is available\n        if (!CanClaimDailyReward())\n        {\n            Debug.LogWarning(\"Daily reward not available yet\");\n            return false;\n        }\n\n        try\n        {\n            int dayIndex = GetCurrentRewardDay();\n            int rewardAmount = dailyRewardAmounts[dayIndex % dailyRewardAmounts.Length];\n\n            // Add credits for daily reward\n            await GameFuseUser.CurrentUser.AddCreditsAsync(rewardAmount);\n\n            // Save last reward time\n            PlayerPrefs.SetString(LAST_REWARD_KEY, System.DateTime.Now.ToBinary().ToString());\n            PlayerPrefs.Save();\n\n            Debug.Log($\"Daily reward claimed: {rewardAmount} credits\");\n            return true;\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to claim daily reward: {e.Message}\");\n            return false;\n        }\n    }\n\n    private bool CanClaimDailyReward()\n    {\n        if (!PlayerPrefs.HasKey(LAST_REWARD_KEY)) return true;\n\n        string lastRewardString = PlayerPrefs.GetString(LAST_REWARD_KEY);\n        if (long.TryParse(lastRewardString, out long lastRewardBinary))\n        {\n            var lastReward = System.DateTime.FromBinary(lastRewardBinary);\n            return (System.DateTime.Now - lastReward).TotalHours &gt;= 24;\n        }\n\n        return true;\n    }\n\n    private int GetCurrentRewardDay()\n    {\n        if (!PlayerPrefs.HasKey(LAST_REWARD_KEY)) return 0;\n\n        // Calculate consecutive days\n        // Implementation depends on your specific requirements\n        return PlayerPrefs.GetInt(\"ConsecutiveDays\", 0);\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#achievement-rewards","title":"Achievement Rewards","text":"<pre><code>public class AchievementSystem : MonoBehaviour\n{\n    [System.Serializable]\n    public class Achievement\n    {\n        public string id;\n        public string name;\n        public string description;\n        public int creditReward;\n        public bool isCompleted;\n    }\n\n    [Header(\"Achievements\")]\n    public Achievement[] achievements;\n\n    public async Task CompleteAchievement(string achievementId)\n    {\n        var achievement = System.Array.Find(achievements, a =&gt; a.id == achievementId);\n        if (achievement == null || achievement.isCompleted)\n        {\n            return;\n        }\n\n        try\n        {\n            // Award credits for achievement\n            await GameFuseUser.CurrentUser.AddCreditsAsync(achievement.creditReward);\n\n            achievement.isCompleted = true;\n\n            Debug.Log($\"Achievement '{achievement.name}' completed! Awarded {achievement.creditReward} credits\");\n\n            // You might also want to save achievement progress\n            await SaveAchievementProgress();\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to complete achievement: {e.Message}\");\n        }\n    }\n\n    private async Task SaveAchievementProgress()\n    {\n        // Save achievement completion status as user attributes\n        foreach (var achievement in achievements)\n        {\n            if (achievement.isCompleted)\n            {\n                await GameFuseUser.CurrentUser.SetUserAttributeAsync(\n                    $\"achievement_{achievement.id}\", \n                    \"completed\"\n                );\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#best-practices","title":"Best Practices","text":""},{"location":"C%23%20Unity%203D/using%20credits/#credit-validation","title":"Credit Validation","text":"<pre><code>public class CreditValidator\n{\n    public static bool CanAfford(int cost)\n    {\n        var currentUser = GameFuseUser.CurrentUser;\n        return currentUser != null &amp;&amp; \n               currentUser.IsAuthenticated() &amp;&amp; \n               currentUser.Credits &gt;= cost;\n    }\n\n    public static async Task&lt;bool&gt; SafeSubtractCredits(int amount, string reason = \"\")\n    {\n        if (!CanAfford(amount))\n        {\n            Debug.LogWarning($\"Cannot afford {amount} credits. Current: {GameFuseUser.CurrentUser?.Credits ?? 0}\");\n            return false;\n        }\n\n        try\n        {\n            await GameFuseUser.CurrentUser.AddCreditsAsync(-amount);\n            Debug.Log($\"Subtracted {amount} credits for: {reason}\");\n            return true;\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to subtract credits: {e.Message}\");\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>public enum CreditOperationResult\n{\n    Success,\n    InsufficientCredits,\n    NotAuthenticated,\n    InvalidAmount,\n    NetworkError\n}\n\npublic static class CreditOperations\n{\n    public static async Task&lt;CreditOperationResult&gt; SafeAddCredits(int amount)\n    {\n        try\n        {\n            if (GameFuseUser.CurrentUser == null || !GameFuseUser.CurrentUser.IsAuthenticated())\n            {\n                return CreditOperationResult.NotAuthenticated;\n            }\n\n            if (amount == 0)\n            {\n                return CreditOperationResult.InvalidAmount;\n            }\n\n            await GameFuseUser.CurrentUser.AddCreditsAsync(amount);\n            return CreditOperationResult.Success;\n        }\n        catch (GameFuse.Exceptions.GameFuseApiException ex)\n        {\n            Debug.LogError($\"API Error: {ex.Message}\");\n            return CreditOperationResult.NetworkError;\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Unexpected error: {e.Message}\");\n            return CreditOperationResult.NetworkError;\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#cancellation-support","title":"Cancellation Support","text":"<pre><code>using System.Threading;\n\npublic class CancellableCreditOperations : MonoBehaviour\n{\n    private CancellationTokenSource _cancellationTokenSource;\n\n    public async void StartLongRunningCreditOperation()\n    {\n        _cancellationTokenSource = new CancellationTokenSource();\n\n        try\n        {\n            await GameFuseUser.CurrentUser.AddCreditsAsync(\n                1000, \n                _cancellationTokenSource.Token\n            );\n            Debug.Log(\"Credit operation completed\");\n        }\n        catch (OperationCanceledException)\n        {\n            Debug.Log(\"Credit operation was cancelled\");\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Credit operation failed: {e.Message}\");\n        }\n    }\n\n    public void CancelOperation()\n    {\n        _cancellationTokenSource?.Cancel();\n    }\n\n    private void OnDestroy()\n    {\n        _cancellationTokenSource?.Cancel();\n        _cancellationTokenSource?.Dispose();\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#integration-with-store-system","title":"Integration with Store System","text":"<p>Credits work seamlessly with the GameFuse store system:</p> <pre><code>public async void PurchaseItemWithCreditCheck(int storeItemId, int itemCost)\n{\n    // Check if user has enough credits\n    if (!CreditValidator.CanAfford(itemCost))\n    {\n        Debug.LogWarning($\"Insufficient credits for purchase. Need {itemCost}, have {GameFuseUser.CurrentUser.Credits}\");\n\n        // Offer to add credits\n        await OfferCreditPurchase(itemCost - GameFuseUser.CurrentUser.Credits);\n        return;\n    }\n\n    try\n    {\n        // Purchase the item (this will automatically deduct credits)\n        var result = await GameFuseUser.CurrentUser.PurchaseStoreItemAsync(storeItemId);\n\n        Debug.Log($\"Item purchased! New credit balance: {result.Credits}\");\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Purchase failed: {e.Message}\");\n    }\n}\n\nprivate async Task OfferCreditPurchase(int neededCredits)\n{\n    // Add enough credits for the purchase plus some extra\n    int creditsToAdd = neededCredits + 100;\n\n    try\n    {\n        await GameFuseUser.CurrentUser.AddCreditsAsync(creditsToAdd);\n        Debug.Log($\"Added {creditsToAdd} credits to account\");\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Failed to add credits: {e.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20credits/#key-features-summary","title":"Key Features Summary","text":"<ul> <li>Server-Side Security: All credit operations are validated and stored securely on GameFuse servers</li> <li>Automatic Synchronization: Local user data is automatically updated after every operation</li> <li>Flexible Operations: Support for both additive and absolute credit management</li> <li>Store Integration: Seamless integration with GameFuse store purchase system</li> <li>Modern Async/Await: Non-blocking operations with cancellation token support</li> <li>Comprehensive Error Handling: Detailed exception information for different failure scenarios</li> </ul>"},{"location":"C%23%20Unity%203D/using%20credits/#requirements","title":"Requirements","text":"<ul> <li>GameFuse Unity SDK installed</li> <li>User must be authenticated to perform credit operations</li> <li>Internet connection for API communication</li> <li>Unity 2021.3 or later (for async/await support)</li> </ul>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/","title":"Using the Store in Your Game","text":"<p>The GameFuse Unity SDK provides a comprehensive in-game store system through the <code>GameFuseUser</code> class, allowing players to browse available items, make purchases with credits, and manage their inventory. The store system supports both authenticated and unauthenticated browsing, with purchasing requiring user authentication.</p>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#overview","title":"Overview","text":"<p>The GameFuse store system includes:</p> <ul> <li>Browse Available Items: View all store items without requiring authentication</li> <li>Purchase Management: Buy and remove items with automatic credit balance updates</li> <li>User Inventory: Access purchased items and track ownership status</li> <li>Real-time Updates: Automatic synchronization of credits and inventory after transactions</li> <li>Flexible Integration: Works with GameFuseSettings or custom credentials</li> </ul>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#store-item-properties","title":"Store Item Properties","text":"<p>Each store item contains the following information:</p> Property Type Description <code>Id</code> <code>int</code> Unique identifier for the item <code>Name</code> <code>string</code> Display name of the item <code>Cost</code> <code>int</code> Price in credits <code>Description</code> <code>string</code> Detailed description <code>Category</code> <code>string</code> Item category for organization <code>IconUrl</code> <code>string</code> URL to the item's icon image <code>Status</code> <code>StoreItemStatus</code> Purchase status (Available, Purchased, Unavailable) <code>IsPurchased</code> <code>bool</code> Quick check if item is owned"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#getting-available-store-items","title":"Getting Available Store Items","text":""},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#browse-store-no-authentication-required","title":"Browse Store (No Authentication Required)","text":"<p>You can fetch all available store items without requiring user authentication:</p> <pre><code>using GameFuse;\nusing UnityEngine;\nusing System.Threading.Tasks;\n\npublic class StoreManager : MonoBehaviour\n{\n    public async void LoadStoreItems()\n    {\n        try\n        {\n            // Uses GameFuseSettings for credentials\n            var availableItems = await GameFuseUser.CurrentUser.GetAvailableStoreItemsAsync();\n\n            Debug.Log($\"Found {availableItems.Count} store items:\");\n\n            foreach (var item in availableItems)\n            {\n                Debug.Log($\"Item: {item.Name}\");\n                Debug.Log($\"  Cost: {item.Cost} credits\");\n                Debug.Log($\"  Category: {item.Category}\");\n                Debug.Log($\"  Description: {item.Description}\");\n                Debug.Log($\"  Icon URL: {item.IconUrl}\");\n                Debug.Log($\"  Status: {item.Status}\");\n            }\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to load store items: {e.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#browse-store-with-custom-credentials","title":"Browse Store with Custom Credentials","text":"<pre><code>public async void LoadStoreItemsWithCustomCredentials()\n{\n    try\n    {\n        var availableItems = await GameFuseUser.CurrentUser.GetAvailableStoreItemsAsync(\n            gameId: \"your-game-id\",\n            gameToken: \"your-api-key\"\n        );\n\n        DisplayStoreItems(availableItems);\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Failed to load store items: {e.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#user-store-management","title":"User Store Management","text":""},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#getting-users-purchased-items","title":"Getting User's Purchased Items","text":"<p>Access the current user's purchased items and credit balance:</p> <pre><code>public async void LoadUserStore()\n{\n    try\n    {\n        // Must be authenticated\n        if (GameFuseUser.CurrentUser == null)\n        {\n            Debug.LogError(\"User must be signed in to access store\");\n            return;\n        }\n\n        UserStore userStore = await GameFuseUser.CurrentUser.GetUserStoreItemsAsync();\n\n        Debug.Log($\"User has {userStore.Credits} credits\");\n        Debug.Log($\"User owns {userStore.StoreItems.Count} items:\");\n\n        foreach (var ownedItem in userStore.StoreItems)\n        {\n            Debug.Log($\"  - {ownedItem.Name} (Cost: {ownedItem.Cost})\");\n        }\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Failed to load user store: {e.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#accessing-user-store-from-properties","title":"Accessing User Store from Properties","text":"<p>The current user's purchased items are also available directly from properties:</p> <pre><code>public void ShowUserInventory()\n{\n    var currentUser = GameFuseUser.CurrentUser;\n    if (currentUser == null)\n    {\n        Debug.LogError(\"No user signed in\");\n        return;\n    }\n\n    Debug.Log($\"Credits: {currentUser.Credits}\");\n    Debug.Log($\"Owned Items: {currentUser.GameUserStoreItems.Count}\");\n\n    foreach (var item in currentUser.GameUserStoreItems)\n    {\n        Debug.Log($\"  - {item.Name}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#purchasing-store-items","title":"Purchasing Store Items","text":""},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#basic-purchase","title":"Basic Purchase","text":"<p>Purchase an item and automatically update user credits and inventory:</p> <pre><code>public async void PurchaseItem(int storeItemId)\n{\n    try\n    {\n        if (GameFuseUser.CurrentUser == null)\n        {\n            Debug.LogError(\"User must be signed in to purchase items\");\n            return;\n        }\n\n        Debug.Log($\"Attempting to purchase item {storeItemId}...\");\n\n        UserStore result = await GameFuseUser.CurrentUser.PurchaseStoreItemAsync(storeItemId);\n\n        if (result != null)\n        {\n            Debug.Log(\"Purchase successful!\");\n            Debug.Log($\"New credit balance: {result.Credits}\");\n            Debug.Log($\"Total owned items: {result.StoreItems.Count}\");\n\n            // User properties are automatically updated\n            Debug.Log($\"Current user credits: {GameFuseUser.CurrentUser.Credits}\");\n        }\n        else\n        {\n            Debug.LogError(\"Purchase failed - no result returned\");\n        }\n    }\n    catch (GameFuse.Exceptions.GameFuseApiException ex)\n    {\n        HandlePurchaseError(ex);\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Unexpected error during purchase: {e.Message}\");\n    }\n}\n\nprivate void HandlePurchaseError(GameFuse.Exceptions.GameFuseApiException ex)\n{\n    switch (ex.StatusCode)\n    {\n        case System.Net.HttpStatusCode.Forbidden:\n            Debug.LogError(\"Purchase failed: Not enough credits or item already purchased\");\n            break;\n        case System.Net.HttpStatusCode.NotFound:\n            Debug.LogError(\"Purchase failed: Item not found\");\n            break;\n        default:\n            Debug.LogError($\"Purchase failed: {ex.Message}\");\n            break;\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#removing-store-items","title":"Removing Store Items","text":""},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#remove-purchased-item","title":"Remove Purchased Item","text":"<p>Remove an item from the user's inventory and get credits refunded:</p> <pre><code>public async void RemoveItem(int storeItemId)\n{\n    try\n    {\n        if (GameFuseUser.CurrentUser == null)\n        {\n            Debug.LogError(\"User must be signed in to remove items\");\n            return;\n        }\n\n        Debug.Log($\"Removing item {storeItemId}...\");\n\n        UserStore result = await GameFuseUser.CurrentUser.RemoveStoreItemAsync(storeItemId);\n\n        if (result != null)\n        {\n            Debug.Log(\"Item removed successfully!\");\n            Debug.Log($\"Credits refunded. New balance: {result.Credits}\");\n            Debug.Log($\"Remaining owned items: {result.StoreItems.Count}\");\n        }\n        else\n        {\n            Debug.LogError(\"Remove failed - no result returned\");\n        }\n    }\n    catch (System.Exception e)\n    {\n        Debug.LogError($\"Failed to remove item: {e.Message}\");\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#complete-store-ui-example","title":"Complete Store UI Example","text":"<p>Here's a comprehensive example showing a complete store interface:</p> <pre><code>using GameFuse;\nusing GameFuse.Models.Shared;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing TMPro;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Linq;\n\npublic class GameStoreUI : MonoBehaviour\n{\n    [Header(\"UI Components\")]\n    public Transform storeItemContainer;\n    public GameObject storeItemPrefab;\n    public TextMeshProUGUI creditsText;\n    public Button refreshButton;\n\n    [Header(\"User Inventory\")]\n    public Transform inventoryContainer;\n    public GameObject inventoryItemPrefab;\n\n    private List&lt;StoreItem&gt; availableItems = new List&lt;StoreItem&gt;();\n    private List&lt;StoreItem&gt; userItems = new List&lt;StoreItem&gt;();\n\n    private void Start()\n    {\n        refreshButton.onClick.AddListener(() =&gt; RefreshStore());\n        RefreshStore();\n    }\n\n    public async void RefreshStore()\n    {\n        await LoadAvailableItems();\n        await LoadUserStore();\n        UpdateUI();\n    }\n\n    private async Task LoadAvailableItems()\n    {\n        try\n        {\n            var items = await GameFuseUser.CurrentUser.GetAvailableStoreItemsAsync();\n            availableItems = items.ToList();\n            Debug.Log($\"Loaded {availableItems.Count} available items\");\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to load available items: {e.Message}\");\n        }\n    }\n\n    private async Task LoadUserStore()\n    {\n        try\n        {\n            if (GameFuseUser.CurrentUser != null &amp;&amp; GameFuseUser.CurrentUser.IsAuthenticated())\n            {\n                var userStore = await GameFuseUser.CurrentUser.GetUserStoreItemsAsync();\n                userItems = userStore.StoreItems.ToList();\n                Debug.Log($\"User owns {userItems.Count} items\");\n            }\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to load user store: {e.Message}\");\n        }\n    }\n\n    private void UpdateUI()\n    {\n        UpdateCreditsDisplay();\n        UpdateStoreDisplay();\n        UpdateInventoryDisplay();\n    }\n\n    private void UpdateCreditsDisplay()\n    {\n        if (GameFuseUser.CurrentUser != null &amp;&amp; GameFuseUser.CurrentUser.IsAuthenticated())\n        {\n            creditsText.text = $\"Credits: {GameFuseUser.CurrentUser.Credits}\";\n        }\n        else\n        {\n            creditsText.text = \"Credits: Sign in required\";\n        }\n    }\n\n    private void UpdateStoreDisplay()\n    {\n        // Clear existing items\n        foreach (Transform child in storeItemContainer)\n        {\n            Destroy(child.gameObject);\n        }\n\n        // Create UI for each available item\n        foreach (var item in availableItems)\n        {\n            GameObject itemUI = Instantiate(storeItemPrefab, storeItemContainer);\n            SetupStoreItemUI(itemUI, item);\n        }\n    }\n\n    private void UpdateInventoryDisplay()\n    {\n        // Clear existing items\n        foreach (Transform child in inventoryContainer)\n        {\n            Destroy(child.gameObject);\n        }\n\n        // Create UI for each owned item\n        foreach (var item in userItems)\n        {\n            GameObject itemUI = Instantiate(inventoryItemPrefab, inventoryContainer);\n            SetupInventoryItemUI(itemUI, item);\n        }\n    }\n\n    private void SetupStoreItemUI(GameObject itemUI, StoreItem item)\n    {\n        var nameText = itemUI.transform.Find(\"NameText\").GetComponent&lt;TextMeshProUGUI&gt;();\n        var costText = itemUI.transform.Find(\"CostText\").GetComponent&lt;TextMeshProUGUI&gt;();\n        var descriptionText = itemUI.transform.Find(\"DescriptionText\").GetComponent&lt;TextMeshProUGUI&gt;();\n        var buyButton = itemUI.transform.Find(\"BuyButton\").GetComponent&lt;Button&gt;();\n\n        nameText.text = item.Name;\n        costText.text = $\"{item.Cost} Credits\";\n        descriptionText.text = item.Description;\n\n        // Check if user already owns this item\n        bool isOwned = userItems.Any(owned =&gt; owned.Id == item.Id);\n        bool canAfford = GameFuseUser.CurrentUser?.Credits &gt;= item.Cost;\n        bool isSignedIn = GameFuseUser.CurrentUser?.IsAuthenticated() == true;\n\n        buyButton.interactable = isSignedIn &amp;&amp; !isOwned &amp;&amp; canAfford;\n        buyButton.GetComponentInChildren&lt;TextMeshProUGUI&gt;().text = isOwned ? \"Owned\" : \"Buy\";\n\n        buyButton.onClick.RemoveAllListeners();\n        buyButton.onClick.AddListener(() =&gt; PurchaseItem(item.Id));\n    }\n\n    private void SetupInventoryItemUI(GameObject itemUI, StoreItem item)\n    {\n        var nameText = itemUI.transform.Find(\"NameText\").GetComponent&lt;TextMeshProUGUI&gt;();\n        var valueText = itemUI.transform.Find(\"ValueText\").GetComponent&lt;TextMeshProUGUI&gt;();\n        var removeButton = itemUI.transform.Find(\"RemoveButton\").GetComponent&lt;Button&gt;();\n\n        nameText.text = item.Name;\n        valueText.text = $\"Value: {item.Cost} Credits\";\n\n        removeButton.onClick.RemoveAllListeners();\n        removeButton.onClick.AddListener(() =&gt; RemoveItem(item.Id));\n    }\n\n    public async void PurchaseItem(int itemId)\n    {\n        try\n        {\n            var result = await GameFuseUser.CurrentUser.PurchaseStoreItemAsync(itemId);\n\n            if (result != null)\n            {\n                Debug.Log($\"Purchase successful! New balance: {result.Credits}\");\n                await RefreshStore(); // Refresh to update UI\n            }\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Purchase failed: {e.Message}\");\n            // Show error message to user\n        }\n    }\n\n    public async void RemoveItem(int itemId)\n    {\n        try\n        {\n            var result = await GameFuseUser.CurrentUser.RemoveStoreItemAsync(itemId);\n\n            if (result != null)\n            {\n                Debug.Log($\"Item removed! Credits refunded: {result.Credits}\");\n                await RefreshStore(); // Refresh to update UI\n            }\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Remove failed: {e.Message}\");\n            // Show error message to user\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#best-practices","title":"Best Practices","text":""},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#cache-management","title":"Cache Management","text":"<pre><code>public class StoreCache : MonoBehaviour\n{\n    private List&lt;StoreItem&gt; cachedItems;\n    private float lastCacheTime;\n    private const float CACHE_DURATION = 300f; // 5 minutes\n\n    public async Task&lt;List&lt;StoreItem&gt;&gt; GetAvailableItems()\n    {\n        if (cachedItems == null || Time.time - lastCacheTime &gt; CACHE_DURATION)\n        {\n            await RefreshCache();\n        }\n        return cachedItems;\n    }\n\n    private async Task RefreshCache()\n    {\n        try\n        {\n            var items = await GameFuseUser.CurrentUser.GetAvailableStoreItemsAsync();\n            cachedItems = items.ToList();\n            lastCacheTime = Time.time;\n        }\n        catch (System.Exception e)\n        {\n            Debug.LogError($\"Failed to refresh store cache: {e.Message}\");\n        }\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#purchase-validation","title":"Purchase Validation","text":"<pre><code>public async Task&lt;bool&gt; CanPurchaseItem(StoreItem item)\n{\n    var currentUser = GameFuseUser.CurrentUser;\n\n    // Check authentication\n    if (currentUser == null || !currentUser.IsAuthenticated())\n    {\n        Debug.LogWarning(\"User must be signed in to purchase items\");\n        return false;\n    }\n\n    // Check credits\n    if (currentUser.Credits &lt; item.Cost)\n    {\n        Debug.LogWarning($\"Insufficient credits. Need {item.Cost}, have {currentUser.Credits}\");\n        return false;\n    }\n\n    // Check if already owned\n    if (currentUser.GameUserStoreItems.Any(owned =&gt; owned.Id == item.Id))\n    {\n        Debug.LogWarning(\"Item already owned\");\n        return false;\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#error-handling","title":"Error Handling","text":"<pre><code>public enum PurchaseResult\n{\n    Success,\n    InsufficientCredits,\n    AlreadyOwned,\n    ItemNotFound,\n    NotAuthenticated,\n    NetworkError\n}\n\npublic async Task&lt;PurchaseResult&gt; SafePurchaseItem(int itemId)\n{\n    try\n    {\n        if (GameFuseUser.CurrentUser == null || !GameFuseUser.CurrentUser.IsAuthenticated())\n        {\n            return PurchaseResult.NotAuthenticated;\n        }\n\n        var result = await GameFuseUser.CurrentUser.PurchaseStoreItemAsync(itemId);\n\n        if (result != null)\n        {\n            return PurchaseResult.Success;\n        }\n\n        return PurchaseResult.NetworkError;\n    }\n    catch (GameFuse.Exceptions.GameFuseApiException ex)\n    {\n        return ex.StatusCode switch\n        {\n            System.Net.HttpStatusCode.Forbidden =&gt; PurchaseResult.InsufficientCredits,\n            System.Net.HttpStatusCode.NotFound =&gt; PurchaseResult.ItemNotFound,\n            _ =&gt; PurchaseResult.NetworkError\n        };\n    }\n    catch\n    {\n        return PurchaseResult.NetworkError;\n    }\n}\n</code></pre>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#key-features-summary","title":"Key Features Summary","text":"<ul> <li>No Authentication Browsing: View store items without requiring user sign-in</li> <li>Automatic Updates: User credits and inventory are automatically synchronized after purchases</li> <li>Real-time Validation: Check purchase eligibility before attempting transactions</li> <li>Flexible Configuration: Use GameFuseSettings or provide custom credentials</li> <li>Comprehensive Error Handling: Detailed exception information for different failure scenarios</li> <li>Modern Async/Await: Non-blocking operations with cancellation token support</li> </ul>"},{"location":"C%23%20Unity%203D/using%20the%20store%20in%20your%20game/#requirements","title":"Requirements","text":"<ul> <li>GameFuse Unity SDK installed</li> <li>GameFuseSettings configured (for default credential usage)</li> <li>User authentication required for purchasing operations</li> <li>Internet connection for API communication</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/","title":"C++ Plugin V2.9 Migration Guide","text":"<p>This guide will help you update your code to work with the V2.9 version of the GameFuse C++ plugin. The main changes involve moving from <code>GameFuseCore</code> to the new <code>GameFuseManager</code> subsystem and updating data types from UObjects to structs.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#major-changes-overview","title":"Major Changes Overview","text":"<ol> <li><code>GameFuseCore</code> \u2192 <code>GameFuseManager</code> Subsystem</li> <li>UObject-based data \u2192 Struct-based data</li> <li>Latent nodes \u2192 Delegate-based callbacks</li> </ol>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#step-by-step-migration","title":"Step-by-Step Migration","text":""},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#1-replace-gamefusecore-with-gamefusemanager","title":"1. Replace GameFuseCore with GameFuseManager","text":""},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#before","title":"Before:","text":"<pre><code>UGameFuseCore* GameFuseCore = NewObject&lt;UGameFuseCore&gt;();\nGameFuseCore-&gt;SetUpGame(\"YourGameId\", \"YourToken\");\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#after","title":"After:","text":"<pre><code>UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\nGameFuseManager-&gt;SetUpGame(\"YourGameId\", \"YourToken\", CompletionCallback);\n</code></pre> <p>The GameFuseManager pointer can be stored as a member variable as it is linked to the game instance.</p> <pre><code>TObjectPtr&lt;UGameFuseManager&gt; GameFuseManager;\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#2-update-data-type-usage","title":"2. Update Data Type Usage","text":"<p>Structs have been introduced for GameData, UserData, StoreItems, LeaderboardEntries and Leaderboards. See GameFuseStructLibrary for schema of these structs.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#before_1","title":"Before:","text":"<pre><code>TArray&lt;UGameFuseStoreItem*&gt; StoreItems = UGameFuseCore::GetGameStoreItems();\nfor (UGameFuseStoreItem* Item : StoreItems)\n{\n    FString ItemName = Item-&gt;GetName();\n    int32 Cost = Item-&gt;GetCost();\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#after_1","title":"After:","text":"<pre><code>TArray&lt;FGFStoreItem&gt; StoreItems = UGameFuseManager::GetGameStoreItems();\nfor (const FGFStoreItem&amp; Item : StoreItems)\n{\n    FString ItemName = Item.Name;\n    int32 Cost = Item.Cost;\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#3-update-delegate-callbacks","title":"3. Update Delegate Callbacks","text":"<p>Delegates are now declared as Dynamic Multicast Delegates, which return the <code>FGFAPIResponse</code> struct. You can bind to these delegates in your C++ code by creating a <code>FGameFuseAPIResponseCallback</code> delegate and binding to it, then passing it to the API call.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#before_2","title":"Before:","text":"<pre><code>UFUNCTION()\nvoid OnGameSetup();\n\n// In your code\nGameFuseCore-&gt;SetUpGame(\"GameId\", \"Token\");\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#after_2","title":"After:","text":"<pre><code>UFUNCTION()\nvoid OnGameSetup(bool bSuccess, const FString&amp; Response);\n\n// In your code\nFGameFuseAPIResponseCallback Callback;\nCallback.BindDynamic(this, &amp;YourClass::OnGameSetup);\nGameFuseManager-&gt;SetUpGame(\"GameId\", \"Token\", Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#5-update-leaderboard-access","title":"5. Update Leaderboard Access","text":"<p>Leaderboards now hold a map of leaderboard names to leaderboard entries to allow for multiple leaderboards. GetLeaderboardEntries returns an Array of FGFLeaderboardEntry structs. Fetching is still 1 leaderboard at a time based on LeaderboardName.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#before_3","title":"Before:","text":"<pre><code>TArray&lt;UGameFuseLeaderboardItem*&gt; Leaderboard = User-&gt;GetLeaderboards();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#after_3","title":"After:","text":"<pre><code>const TMap&lt;FString, FGFLeaderboard&gt;&amp; Leaderboards = Manager-&gt;GetLeaderboards();\nconst TArray&lt;FGFLeaderboardEntry&gt;&amp; Entries = Manager-&gt;GetLeaderboardEntries(\"LeaderboardName\");\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#blueprint-changes","title":"Blueprint Changes","text":"<p>If you're using GameFuse in any blueprints, see the blueprint migration guide for instructions on updating your blueprints.</p> <p>If you're familiar with Unreal C++, migrating Blueprints will be a breeze, check the TLDR in the migration guide for high level instructions. You can do it!</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#compile-errors-with-old-uobject-types","title":"Compile Errors with Old UObject Types","text":"<p>If you see compile errors related to <code>UGameFuseStoreItem</code>, <code>UGameFuseLeaderboardItem</code>, or other UObject types, replace them with their struct equivalents:</p> <ul> <li><code>UGameFuseStoreItem</code> \u2192 <code>FGFStoreItem</code></li> <li><code>UGameFuseLeaderboardItem</code> \u2192 <code>FGFLeaderboardEntry</code></li> <li><code>UGameFuseUser</code> \u2192 <code>FGFUserData</code></li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Unreal%20C%2B%2B%20Migration%20Guide/#missing-callback-responses","title":"Missing Callback Responses","text":"<p>If your callbacks aren't being called, ensure you're: 1. Using the new delegate system 2. Binding the delegates before making the API call 3. Using the correct callback signature (FGFAPIResponse)</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/","title":"C++ Plugin V2.9 Update","text":"<p>This update brings significant improvements to the GameFuse C++ plugin's architecture and functionality. The changes focus on improving reliability, performance, and developer experience. This version has some breaking changes, so please see the C++ migration guide and Blueprint migration guide for instructions on updating your code.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#deprecation-notice","title":"Deprecation Notice","text":"<p>The <code>GameFuseCore</code> class is now deprecated and will be removed in V3.0. All functionality has been moved to the new <code>GameFuseManager</code> subsystem. Please refer to the migration guide for assistance in updating your code. <code>GameFuseManager</code> is the conversion of <code>GameFuseCore</code> into a subsystem, similar to was previously accessed. Upcoming features will also make use of subsystems.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Changes all latent nodes to use Delegates, GameFuseManager and GameFuseUser now have delegates instead.</li> <li>delegates can be bound in BP and C++</li> <li>All functions that use the <code>GameFuseCore</code> class are now <code>GameFuseManager</code> functions.</li> <li>All functions return Structs instead of UObjects.</li> </ul> <p>Please see the migration guide for instructions on updating your code. The example project has been updated with fixes for the breaking changes: https://github.com/game-fuse/game-fuse-unreal-example</p>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#other-changes","title":"Other Changes","text":""},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#improved-request-handling","title":"Improved Request Handling","text":"<ul> <li>New concurrent request system that can handle multiple API calls simultaneously</li> <li>Enhanced error handling and logging for better debugging</li> <li>Request validation and timeout handling</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#new-data-structures","title":"New Data Structures","text":"<ul> <li>FGFGameData and FGFUserData Structs introduced to replace UGameFuseData and UGameFuseUser</li> <li>New struct-based system replacing older UObject-based system for better performance</li> <li>Leaderboard, StoreItems and UserData are now stored as arrays of structs instead of UObjects</li> <li>New FGFAPIResponse struct for standardized API responses</li> <li>Enhanced FGFGameRound with multiplayer support and rankings</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fixed RemoveStoreItem endpoint</li> <li>Calling the API too often caused the plugin to crash the Engine</li> <li>Fixed attribute system synchronization issues</li> <li>Improved error handling for network failures</li> <li>Fixed memory leaks in delegate binding</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Reduced memory allocation through struct-based data</li> <li>Improved delegate system performance</li> <li>Better concurrent request handling</li> <li>Optimized JSON parsing and serialization</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/V2.9%20Update%20Changelist/#additional-notes","title":"Additional Notes","text":"<ul> <li>This update includes breaking changes. Please see the migration guide for detailed instructions on updating your code.</li> <li>All deprecated functions now include clear warning messages to help with migration.</li> <li>The new subsystem approach aligns better with Unreal Engine's recommended practices.</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/","title":"GameFuse Callback Reference","text":"<p>This page serves as a reference for all callback types used in the GameFuse systems. It includes information on the different callback types, their signatures, and examples of how to bind to them using various methods.</p> <p>Note</p> <p>These callbacks are the main benefit of using C++ with GameFuse. By using them, you no longer need to retrieve the data from the subsystem, as it is called as a parameter to your function.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#new-delegate-system-v29","title":"New Delegate System (V2.9+)","text":"<p>GameFuse V2.9 introduced a new delegate system that replaces the old latent nodes. All API calls now use delegates for callbacks, providing better performance and more flexibility.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#main-delegate-types","title":"Main Delegate Types","text":""},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#fbp_gfapicallback-blueprint","title":"FBP_GFApiCallback (Blueprint)","text":"<p><pre><code>DECLARE_DYNAMIC_DELEGATE_OneParam(FBP_GFApiCallback, FGFAPIResponse, ResponseData);\n</code></pre> This is the main callback delegate for Blueprint usage. It receives an <code>FGFAPIResponse</code> struct containing the success status, response data, request ID, and response code.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#fgfapicallback-c","title":"FGFApiCallback (C++)","text":"<p><pre><code>DECLARE_MULTICAST_DELEGATE_OneParam(FGFApiCallback, FGFAPIResponse);\n</code></pre> This is the C++ version of the API callback delegate. It's a multicast delegate that can be bound multiple times.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#binding-to-callbacks","title":"Binding to Callbacks","text":"<p>There are several ways to bind to callbacks in Unreal Engine.  Credit to BenUI for the information. Here are the most common methods:</p>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#using-bindlambda","title":"Using BindLambda","text":"<p>The <code>BindLambda</code> method is useful for simple, anonymous functions:</p> <pre><code>FGFApiCallback OnGameSetup;\nOnGameSetup.BindLambda([this](const FGFAPIResponse&amp; Response) {\n    if (Response.bSuccess) {\n        // Handle successful game setup\n        UE_LOG(LogTemp, Log, TEXT(\"Game setup successful: %s\"), *Response.ResponseStr);\n    } else {\n        // Handle error\n        UE_LOG(LogTemp, Error, TEXT(\"Game setup failed: %s\"), *Response.ResponseStr);\n    }\n});\n\nGameFuseManager-&gt;SetUpGame(GameId, Token, OnGameSetup);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#using-binduobject","title":"Using BindUObject","text":"<p>The <code>BindUObject</code> method requires that the target be a UObject:</p> <pre><code>FGFApiCallback OnGameSetup;\nOnGameSetup.BindUObject(this, &amp;ThisClass::HandleGameSetup);\n\nGameFuseManager-&gt;SetUpGame(GameId, Token, OnGameSetup);\n\nvoid HandleGameSetup(const FGFAPIResponse&amp; Response) {\n    if (Response.bSuccess) {\n        // Handle successful game setup\n    } else {\n        // Handle error\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#using-binddynamic-for-blueprint-accessible-functions","title":"Using BindDynamic (for Blueprint accessible functions)","text":"<p>The <code>BindDynamic</code> method is used for Blueprint-exposed callbacks:</p> <pre><code>FBP_GFApiCallback Callback;\nCallback.BindDynamic(this, &amp;ThisClass::HandleGameSetup);\n\nGameFuseManager-&gt;BP_SetUpGame(GameId, Token, Callback);\n\nUFUNCTION(BlueprintCallable)\nvoid HandleGameSetup(const FGFAPIResponse&amp; Response) {\n    if (Response.bSuccess) {\n        // Handle successful game setup\n    } else {\n        // Handle error\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#typed-callback-types","title":"Typed Callback Types","text":"<p>For C++ usage, GameFuse provides typed callbacks that return specific data structures instead of the generic <code>FGFAPIResponse</code>. These provide better type safety and easier data access.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#user-system-callbacks","title":"User System Callbacks","text":"Callback Type Signature Description <code>FGFUserDataCallback</code> <code>void(bool, const FGFUserData&amp;)</code> Called when user data is fetched or updated <code>FGFStoreItemsCallback</code> <code>void(bool, const TArray&lt;FGFStoreItem&gt;&amp;)</code> Called when store items are fetched <code>FGFLeaderboardEntriesCallback</code> <code>void(bool, const TArray&lt;FGFLeaderboardEntry&gt;&amp;)</code> Called when leaderboard entries are fetched <code>FGFAttributesCallback</code> <code>void(bool, const FGFAttributeList&amp;)</code> Called when user attributes are fetched or updated"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#friends-system-callbacks","title":"Friends System Callbacks","text":"Callback Type Signature Description <code>FGFFriendRequestCallback</code> <code>void(const FGFFriendRequest&amp;)</code> Called when a friend request is sent <code>FGFFriendRequestsCallback</code> <code>void(const TArray&lt;FGFFriendRequest&gt;&amp;)</code> Called when friend requests are fetched <code>FGFFriendsCallback</code> <code>void(const TArray&lt;FGFUserData&gt;&amp;)</code> Called when friends list is fetched <code>FGFFriendActionCallback</code> <code>void(bool)</code> Called when a friend action (accept/decline/cancel/unfriend) is performed"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#groups-system-callbacks","title":"Groups System Callbacks","text":"Callback Type Signature Description <code>FGFGroupCallback</code> <code>void(const FGFGroup&amp;)</code> Called when a group is created or fetched <code>FGFGroupListCallback</code> <code>void(const TArray&lt;FGFGroup&gt;&amp;)</code> Called when multiple groups are fetched <code>FGFGroupConnectionCallback</code> <code>void(const FGFGroupConnection&amp;)</code> Called when a group connection is created <code>FGFGroupAttributeCallback</code> <code>void(const TArray&lt;FGFGroupAttribute&gt;&amp;)</code> Called when group attributes are fetched or updated <code>FGFGroupActionCallback</code> <code>void(bool)</code> Called when a group action is performed"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#chat-system-callbacks","title":"Chat System Callbacks","text":"Callback Type Signature Description <code>FGFChatCallback</code> <code>void(const FGFChat&amp;)</code> Called when a chat is created or fetched <code>FGFChatListCallback</code> <code>void(const TArray&lt;FGFChat&gt;&amp;)</code> Called when multiple chats are fetched <code>FGFMessageCallback</code> <code>void(const FGFMessage&amp;)</code> Called when a message is sent <code>FGFMessageListCallback</code> <code>void(const TArray&lt;FGFMessage&gt;&amp;)</code> Called when messages are fetched"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#rounds-system-callbacks","title":"Rounds System Callbacks","text":"Callback Type Signature Description <code>FGFGameRoundCallback</code> <code>void(const FGFGameRound&amp;)</code> Called when a game round is created, fetched, or updated <code>FGFGameRoundListCallback</code> <code>void(const TArray&lt;FGFGameRound&gt;&amp;)</code> Called when multiple game rounds are fetched <code>FGFGameRoundActionCallback</code> <code>void(bool)</code> Called when a game round action is performed"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#internal-callbacks","title":"Internal Callbacks","text":"Callback Type Signature Description <code>FGFInternalSuccessCallback</code> <code>void(bool)</code> Internal callback for success/failure operations <code>FGFSuccessCallback</code> <code>void(bool)</code> Simple success/failure callback"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#example-usage","title":"Example Usage","text":""},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#using-typed-callbacks-c","title":"Using Typed Callbacks (C++)","text":"<pre><code>// User sign in with typed callback\nFGFUserDataCallback OnSignIn;\nOnSignIn.BindLambda([this](bool bSuccess, const FGFUserData&amp; UserData) {\n    if (bSuccess) {\n        UE_LOG(LogTemp, Log, TEXT(\"Signed in as: %s\"), *UserData.Username);\n        // User data is directly available\n    } else {\n        UE_LOG(LogTemp, Error, TEXT(\"Sign in failed\"));\n    }\n});\n\nGameFuseUser-&gt;SignIn(Email, Password, OnSignIn);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#using-generic-callbacks-blueprint-compatible","title":"Using Generic Callbacks (Blueprint Compatible)","text":"<pre><code>// User sign in with generic callback\nFBP_GFApiCallback Callback;\nCallback.BindDynamic(this, &amp;ThisClass::OnSignInComplete);\n\nGameFuseUser-&gt;BP_SignIn(Email, Password, Callback);\n\nUFUNCTION(BlueprintCallable)\nvoid OnSignInComplete(const FGFAPIResponse&amp; Response) {\n    if (Response.bSuccess) {\n        // Parse response data manually or use subsystem getters\n        const FGFUserData&amp; UserData = GameFuseUser-&gt;GetCurrentUserData();\n        UE_LOG(LogTemp, Log, TEXT(\"Signed in as: %s\"), *UserData.Username);\n    } else {\n        UE_LOG(LogTemp, Error, TEXT(\"Sign in failed: %s\"), *Response.ResponseStr);\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/callback%20reference/#additional-resources","title":"Additional Resources","text":"<p>For more information on delegates in Unreal Engine, check out these resources:</p> <ul> <li>Advanced Delegates in C++ - A comprehensive guide to delegates in Unreal Engine</li> <li>Unreal Engine Documentation on Delegates</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/","title":"Chat System","text":"<p>The GameFuse Chat System allows you to implement real-time chat functionality in your game. This includes creating chats, sending messages, and managing message read status.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#getting-started-with-chat","title":"Getting Started with Chat","text":"<p>To use the GameFuse Chat system, you'll need to access the <code>UGameFuseChat</code> subsystem:</p> <pre><code>UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#creating-a-chat","title":"Creating a Chat","text":"<p>You can create a new chat with one or more participants:</p> <pre><code>void UMyGameMode::CreateChat()\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create an array of participant usernames\n    TArray&lt;FString&gt; Usernames;\n    Usernames.Add(\"OtherPlayerUsername\"); // Add usernames of participants\n\n    // Initial message to send\n    FString InitialMessage = \"Hello! Welcome to the chat.\";\n\n    // Create typed callback\n    FGFChatCallback OnCreateChat;\n    OnCreateChat.BindLambda([this](const FGFChat&amp; Chat) {\n        // Use Chat data (ID, participants, messages, etc.)\n    });\n\n    // Create the chat\n    ChatSystem-&gt;CreateChat(Usernames, InitialMessage, OnCreateChat);\n}\n\nvoid UMyGameMode::OnChatCreated(bool bSuccess, const FString&amp; Response)\n{\n    if (bSuccess)\n    {\n        // Parse Response JSON and use chat data\n    }\n    else\n    {\n        // Handle error\n    }\n}\n</code></pre> <p>For Blueprint usage, you can use the BP_ prefixed version with the generic callback:</p> <pre><code>void UMyGameMode::CreateChatBP()\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create an array of participant usernames\n    TArray&lt;FString&gt; Usernames;\n    Usernames.Add(\"OtherPlayerUsername\"); // Add usernames of participants\n\n    // Initial message to send\n    FString InitialMessage = \"Hello! Welcome to the chat.\";\n\n    // Create callback\n    FBP_GFApiCallback Callback;\n    Callback.BindDynamic(this, &amp;UMyGameMode::OnChatCreated);\n\n    // Create the chat\n    ChatSystem-&gt;BP_CreateChat(Usernames, InitialMessage, Callback);\n}\n\nvoid UMyGameMode::OnChatCreated(bool bSuccess, const FString&amp; Response)\n{\n    if (bSuccess)\n    {\n        UE_LOG(LogTemp, Display, TEXT(\"Chat created successfully\"));\n        UE_LOG(LogTemp, Display, TEXT(\"Response: %s\"), *Response);\n\n        // Access the created chat\n        UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n        const TArray&lt;FGFChat&gt;&amp; AllChats = ChatSystem-&gt;GetAllChats();\n\n        // The newly created chat should be in the list\n        if (AllChats.Num() &gt; 0)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Chat ID: %d\"), AllChats.Last().Id);\n        }\n    }\n    else\n    {\n        UE_LOG(LogTemp, Error, TEXT(\"Failed to create chat\"));\n        UE_LOG(LogTemp, Error, TEXT(\"Error: %s\"), *Response);\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#sending-messages","title":"Sending Messages","text":"<p>Once you have a chat, you can send messages to it:</p> <pre><code>void UMyGameMode::SendMessage(int32 ChatId, const FString&amp; Message)\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create typed callback\n    FGFMessageCallback OnSendMessage;\n    OnSendMessage.BindLambda([this](const FGFMessage&amp; SentMessage) {\n        // Use SentMessage data (ID, text, chatId, etc.)\n    });\n\n    // Send the message\n    ChatSystem-&gt;SendMessage(ChatId, Message, OnSendMessage);\n}\n</code></pre> <p>For Blueprint usage:</p> <pre><code>void UMyGameMode::SendMessageBP(int32 ChatId, const FString&amp; Message)\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create callback\n    FBP_GFApiCallback Callback;\n    Callback.BindDynamic(this, &amp;UMyGameMode::OnMessageSent);\n\n    // Send the message\n    ChatSystem-&gt;BP_SendMessage(ChatId, Message, Callback);\n}\n\nvoid UMyGameMode::OnMessageSent(bool bSuccess, const FString&amp; Response)\n{\n    if (bSuccess)\n    {\n        // Handle successful message send\n    }\n    else\n    {\n        // Handle error\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#marking-messages-as-read","title":"Marking Messages as Read","text":"<p>You can mark messages as read to keep track of which messages have been seen:</p> <pre><code>void UMyGameMode::MarkMessageAsRead(int32 MessageId)\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create typed callback\n    FGFMessageActionCallback OnMarkMessageAsRead;\n    OnMarkMessageAsRead.BindLambda([this, MessageId](bool bSuccess) {\n        // Handle success or failure of marking message as read\n    });\n\n    // Mark the message as read\n    ChatSystem-&gt;MarkMessageAsRead(MessageId, OnMarkMessageAsRead);\n}\n</code></pre> <p>For Blueprint usage:</p> <pre><code>void UMyGameMode::MarkMessageAsReadBP(int32 MessageId)\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create callback\n    FBP_GFApiCallback Callback;\n    Callback.BindDynamic(this, &amp;UMyGameMode::OnMessageMarkedAsRead);\n\n    // Mark the message as read\n    ChatSystem-&gt;BP_MarkMessageAsRead(MessageId, Callback);\n}\n\nvoid UMyGameMode::OnMessageMarkedAsRead(bool bSuccess, const FString&amp; Response)\n{\n    if (bSuccess)\n    {\n        // Handle successful mark as read\n    }\n    else\n    {\n        // Handle error\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#fetching-chats-and-messages","title":"Fetching Chats and Messages","text":"<p>You can fetch all chats for the current user:</p> <pre><code>void UMyGameMode::FetchAllChats()\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create typed callback\n    FGFChatsCallback OnFetchAllChats;\n    OnFetchAllChats.BindLambda([this](const TArray&lt;FGFChat&gt;&amp; Chats) {\n        // Process array of chats for display\n    });\n\n    // Fetch all chats (page 1)\n    ChatSystem-&gt;FetchAllChats(1, OnFetchAllChats);\n}\n</code></pre> <p>For Blueprint usage:</p> <pre><code>void UMyGameMode::FetchAllChatsBP()\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create callback\n    FBP_GFApiCallback Callback;\n    Callback.BindDynamic(this, &amp;UMyGameMode::OnChatsReceived);\n\n    // Fetch all chats (page 1)\n    ChatSystem-&gt;BP_FetchAllChats(1, Callback);\n}\n\nvoid UMyGameMode::OnChatsReceived(bool bSuccess, const FString&amp; Response)\n{\n    if (bSuccess)\n    {\n        // Process chats from ChatSystem-&gt;GetAllChats()\n    }\n    else\n    {\n        // Handle error\n    }\n}\n</code></pre> <p>You can also fetch messages for a specific chat:</p> <pre><code>void UMyGameMode::FetchMessages(int32 ChatId)\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create typed callback\n    FGFMessagesCallback OnFetchMessages;\n    OnFetchMessages.BindLambda([this, ChatId](const TArray&lt;FGFMessage&gt;&amp; Messages) {\n        // Process array of messages for display\n    });\n\n    // Fetch messages (page 1)\n    ChatSystem-&gt;FetchMessages(ChatId, 1, OnFetchMessages);\n}\n</code></pre> <p>For Blueprint usage:</p> <pre><code>void UMyGameMode::FetchMessagesBP(int32 ChatId)\n{\n    UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\n\n    // Create callback\n    FBP_GFApiCallback Callback;\n    Callback.BindDynamic(this, &amp;UMyGameMode::OnMessagesReceived);\n\n    // Fetch messages (page 1)\n    ChatSystem-&gt;BP_FetchMessages(ChatId, 1, Callback);\n}\n\nvoid UMyGameMode::OnMessagesReceived(bool bSuccess, const FString&amp; Response)\n{\n    if (bSuccess)\n    {\n        // Process messages from ChatSystem-&gt;GetChatMessages()\n    }\n    else\n    {\n        // Handle error\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#clearing-chat-data","title":"Clearing Chat Data","text":"<p>You can clear the cached chat data when it's no longer needed:</p> <pre><code>UGameFuseChat* ChatSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseChat&gt;();\nChatSystem-&gt;ClearChatData();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#function-return-values","title":"Function Return Values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/chat/#chat-creation","title":"Chat Creation","text":"HTTP status code Description <code>200</code> OK <code>400</code> Missing or invalid parameters <code>401</code> User not authenticated <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#message-operations","title":"Message Operations","text":"HTTP status code Description <code>200</code> OK <code>400</code> Missing or invalid parameters <code>401</code> User not authenticated or not a participant in the chat <code>404</code> Chat or message not found <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/chat/#fetching-data","title":"Fetching Data","text":"HTTP status code Description <code>200</code> OK <code>401</code> User not authenticated <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/","title":"Class Methods","text":"<p>Check each model below for a list of methods and attributes.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#gamefusemanager","title":"GameFuseManager","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#c-functions","title":"C++ Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#getters","title":"Getters","text":"<pre><code>// Functions that just return internal data\nUGameFuseManager::GetGameData();\nUGameFuseManager::GetGameId();\nUGameFuseManager::GetGameName();\nUGameFuseManager::GetGameDescription();\nUGameFuseManager::GetGameToken();\nUGameFuseManager::GetGameVariables();\nUGameFuseManager::GetGameStoreItems();\nUGameFuseManager::GetLeaderboards();\nUGameFuseManager::GetLeaderboardEntries(const FString&amp; LeaderboardName);\nUGameFuseManager::IsSetUp();\nUGameFuseManager::SetupCheck();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations","title":"Operations","text":"<pre><code>// Functions that perform API operations\nUGameFuseManager::ClearGameData();\nUGameFuseManager::SetUpGame(const int GameId, const FString&amp; Token, FGFApiCallback Callback);\nUGameFuseManager::SendPasswordResetEmail(const FString&amp; Email, FGFApiCallback Callback);\nUGameFuseManager::FetchGameVariables(FGFApiCallback Callback);\nUGameFuseManager::FetchLeaderboardEntries(const int Limit, bool bOnePerUser, const FString&amp; LeaderboardName, FGFApiCallback Callback);\nUGameFuseManager::FetchStoreItems(FGFApiCallback Callback);\nUGameFuseManager::FetchServerTime(FGFApiCallback Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#blueprint-functions","title":"Blueprint Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_1","title":"Operations","text":"<pre><code>// Blueprint-specific functions\nUGameFuseManager::BP_SetUpGame(const FString&amp; GameId, const FString&amp; Token, const FBP_GFApiCallback&amp; Callback);\nUGameFuseManager::BP_SendPasswordResetEmail(const FString&amp; Email, const FBP_GFApiCallback&amp; Callback);\nUGameFuseManager::BP_FetchGameVariables(const FBP_GFApiCallback&amp; Callback);\nUGameFuseManager::BP_FetchLeaderboardEntries(const int Limit, bool bOnePerUser, const FString&amp; LeaderboardName, const FBP_GFApiCallback&amp; Callback);\nUGameFuseManager::BP_FetchStoreItems(const FBP_GFApiCallback&amp; Callback);\nUGameFuseManager::BP_FetchServerTime(const FBP_GFApiCallback&amp; Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#gamefuseuser","title":"GameFuseUser","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#c-functions_1","title":"C++ Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#core-user-data-authentication","title":"Core User Data &amp; Authentication","text":"<pre><code>// Getters\nUGameFuseUser::GetCurrentUserData();\nUGameFuseUser::GetLastFetchedUserData();\nUGameFuseUser::GetUsername();\nUGameFuseUser::GetNumberOfLogins();\nUGameFuseUser::GetLastLogin();\nUGameFuseUser::IsSignedIn();\nUGameFuseUser::GetAuthenticationToken();\n\n// Operations\nUGameFuseUser::SignUp(const FString&amp; Email, const FString&amp; Password, const FString&amp; PasswordConfirmation, const FString&amp; Username, FGFUserDataCallback TypedCallback);\nUGameFuseUser::SignUp(const FGFGameData&amp; GameData, const FString&amp; Email, const FString&amp; Password, const FString&amp; PasswordConfirmation, const FString&amp; Username, FGFUserDataCallback TypedCallback);\nUGameFuseUser::SignIn(const FString&amp; Email, const FString&amp; Password, FGFUserDataCallback TypedCallback);\nUGameFuseUser::SignIn(const FGFGameData&amp; GameData, const FString&amp; Email, const FString&amp; Password, FGFUserDataCallback TypedCallback);\nUGameFuseUser::FetchUser(const int32 UserId, FGFUserDataCallback TypedCallback);\nUGameFuseUser::AddScore(const int32 AddScore, FGFUserDataCallback TypedCallback);\nUGameFuseUser::SetScore(const int32 SetScore, FGFUserDataCallback TypedCallback);\nUGameFuseUser::AddCredits(const int32 AddCredits, FGFUserDataCallback TypedCallback);\nUGameFuseUser::SetCredits(const int32 SetCredits, FGFUserDataCallback TypedCallback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#store-items","title":"Store Items","text":"<pre><code>// Operations\nUGameFuseUser::PurchaseStoreItem(const int32 StoreItemId, FGFStoreItemsCallback TypedCallback);\nUGameFuseUser::RemoveStoreItem(const int32 StoreItemId, FGFStoreItemsCallback TypedCallback);\nUGameFuseUser::FetchMyPurchasedStoreItems(FGFStoreItemsCallback TypedCallback);\nUGameFuseUser::FetchUserPurchasedStoreItems(const int32 UserId, FGFStoreItemsCallback TypedCallback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#attributes","title":"Attributes","text":"<pre><code>// Getters\nUGameFuseUser::GetAttributeValue(const FString Key);\n\n// Operations\nUGameFuseUser::FetchMyAttributes(FGFAttributesCallback TypedCallback);\nUGameFuseUser::FetchUserAttributes(const int32 UserId, FGFAttributesCallback TypedCallback);\nUGameFuseUser::SyncLocalAttributes(FGFAttributesCallback TypedCallback);\nUGameFuseUser::SetAttribute(const FString&amp; Key, const FString&amp; Value, FGFAttributesCallback TypedCallback);\nUGameFuseUser::SetAttributes(const TMap&lt;FString, FString&gt;&amp; NewAttributes, FGFAttributesCallback TypedCallback);\nUGameFuseUser::SetAttributeLocal(const FString&amp; SetKey, const FString&amp; SetValue);\nUGameFuseUser::RemoveAttribute(const FString&amp; SetKey, FGFAttributesCallback TypedCallback);\nUGameFuseUser::RemoveAttributes(const TArray&lt;FString&gt;&amp; AttributeKeys, FGFAttributesCallback TypedCallback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#leaderboards","title":"Leaderboards","text":"<pre><code>// Operations\nUGameFuseUser::AddLeaderboardEntry(const FString&amp; LeaderboardName, const int32 Score, const TMap&lt;FString, FString&gt;&amp; Metadata, FGFInternalSuccessCallback TypedCallback);\nUGameFuseUser::AddLeaderboardEntry(const FString&amp; LeaderboardName, const int32 Score, FGFInternalSuccessCallback TypedCallback);\nUGameFuseUser::ClearLeaderboardEntry(const FString&amp; LeaderboardName, FGFInternalSuccessCallback TypedCallback);\nUGameFuseUser::FetchMyLeaderboardEntries(const int32 Limit, bool bOnePerUser, FGFLeaderboardEntriesCallback TypedCallback);\nUGameFuseUser::FetchUserLeaderboardEntries(const int32 UserId, const int32 Limit, bool bOnePerUser, FGFLeaderboardEntriesCallback TypedCallback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#blueprint-functions_1","title":"Blueprint Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#core-user-data-authentication_1","title":"Core User Data &amp; Authentication","text":"<pre><code>UGameFuseUser::BP_SignUp(const FString&amp; Email, const FString&amp; Password, const FString&amp; PasswordConfirmation, const FString&amp; Username, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_SignIn(const FString&amp; Email, const FString&amp; Password, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_AddScore(const int32 Score, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_SetScore(const int32 Score, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_AddCredits(const int32 Credits, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_SetCredits(const int32 Credits, FBP_GFApiCallback Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#store-items_1","title":"Store Items","text":"<pre><code>UGameFuseUser::BP_PurchaseStoreItem(const int32 StoreItemId, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_RemoveStoreItem(const int32 StoreItemId, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_FetchMyPurchasedStoreItems(FBP_GFApiCallback Callback);\nUGameFuseUser::BP_FetchUserPurchasedStoreItems(const int32 UserId, FBP_GFApiCallback Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#attributes_1","title":"Attributes","text":"<pre><code>UGameFuseUser::BP_SetAttribute(const FString&amp; Key, const FString&amp; Value, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_SetAttributes(const TMap&lt;FString, FString&gt;&amp; NewAttributes, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_SetAttributeLocal(const FString&amp; Key, const FString&amp; Value);\nUGameFuseUser::BP_RemoveAttribute(const FString&amp; Key, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_RemoveAttributes(const TArray&lt;FString&gt;&amp; AttributeKeys, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_FetchMyAttributes(FBP_GFApiCallback Callback);\nUGameFuseUser::BP_FetchUserAttributes(const int32 UserId, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_SyncLocalAttributes(FBP_GFApiCallback Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#leaderboards_1","title":"Leaderboards","text":"<pre><code>UGameFuseUser::BP_AddLeaderboardEntry(const FString&amp; LeaderboardName, const int32 Score, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_AddLeaderboardEntryWithAttributes(const FString&amp; LeaderboardName, const int32 Score, const TMap&lt;FString, FString&gt;&amp; Metadata, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_ClearLeaderboardEntry(const FString&amp; LeaderboardName, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_FetchMyLeaderboardEntries(const int32 Limit, bool bOnePerUser, FBP_GFApiCallback Callback);\nUGameFuseUser::BP_FetchUserLeaderboardEntries(const int32 UserId, const int32 Limit, bool bOnePerUser, FBP_GFApiCallback Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#gamefusechat","title":"GameFuseChat","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#c-functions_2","title":"C++ Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#getters_1","title":"Getters","text":"<pre><code>// Functions that just return internal data\nUGameFuseChat::GetAllChats();\nUGameFuseChat::GetChatMessages();\nUGameFuseChat::GetRequestHandler();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_2","title":"Operations","text":"<pre><code>// Functions that perform API operations\nUGameFuseChat::CreateChat(const TArray&lt;FString&gt;&amp; ParticipantIds, const FString&amp; InitialMessage, FGFChatCallback TypedCallback);\nUGameFuseChat::SendMessage(int32 ChatId, const FString&amp; Message, FGFMessageCallback TypedCallback);\nUGameFuseChat::MarkMessageAsRead(int32 MessageId, FGFSuccessCallback TypedCallback);\nUGameFuseChat::FetchAllChats(int32 Page, FGFChatListCallback TypedCallback);\nUGameFuseChat::FetchMessages(int32 ChatId, int32 Page, FGFMessageListCallback TypedCallback);\nUGameFuseChat::ClearChatData();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#blueprint-functions_2","title":"Blueprint Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_3","title":"Operations","text":"<pre><code>// Blueprint-specific functions\nUGameFuseChat::BP_CreateChat(const TArray&lt;FString&gt;&amp; ParticipantIds, const FString&amp; InitialMessage, const FBP_GFApiCallback&amp; Callback);\nUGameFuseChat::BP_SendMessage(int32 ChatId, const FString&amp; Message, const FBP_GFApiCallback&amp; Callback);\nUGameFuseChat::BP_MarkMessageAsRead(int32 MessageId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseChat::BP_FetchAllChats(int32 Page, const FBP_GFApiCallback&amp; Callback);\nUGameFuseChat::BP_FetchMessages(int32 ChatId, int32 Page, const FBP_GFApiCallback&amp; Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#gamefusegroups","title":"GameFuseGroups","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#c-functions_3","title":"C++ Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#getters_2","title":"Getters","text":"<pre><code>// Functions that just return internal data\nUGameFuseGroups::GetGroupById(const int32 GroupId, FGFGroup&amp; OutGroup);\nUGameFuseGroups::GetRequestHandler();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_4","title":"Operations","text":"<pre><code>// Functions that perform API operations\nUGameFuseGroups::CreateGroup(const FGFGroup&amp; Group, FGFGroupCallback TypedCallback);\nUGameFuseGroups::FetchGroup(const int32 GroupId, FGFGroupCallback TypedCallback);\nUGameFuseGroups::FetchAllGroups(FGFGroupListCallback TypedCallback);\nUGameFuseGroups::RequestToJoinGroup(int32 GroupId, FGFGroupConnectionCallback TypedCallback);\nUGameFuseGroups::DeleteGroup(const int32 GroupId, FGFGroupActionCallback TypedCallback);\nUGameFuseGroups::JoinGroup(const int32 GroupId, FGFGroupActionCallback TypedCallback);\nUGameFuseGroups::LeaveGroup(const int32 GroupId, FGFGroupActionCallback TypedCallback);\nUGameFuseGroups::FetchMyGroups(FGFGroupListCallback TypedCallback);\nUGameFuseGroups::SearchGroups(const FString&amp; Query, FGFGroupListCallback TypedCallback);\nUGameFuseGroups::AddAdmin(const int32 GroupId, const int32 UserId, FGFGroupActionCallback TypedCallback);\nUGameFuseGroups::RemoveAdmin(const int32 GroupId, const int32 UserId, FGFGroupActionCallback TypedCallback);\nUGameFuseGroups::AddAttribute(const int32 GroupId, const FGFGroupAttribute&amp; Attribute, bool bOthersCanEdit, FGFGroupAttributeCallback TypedCallback);\nUGameFuseGroups::UpdateGroupAttribute(int32 GroupId, const FGFGroupAttribute&amp; Attribute, FGFGroupActionCallback TypedCallback);\nUGameFuseGroups::FetchGroupAttributes(const int32 GroupId, FGFGroupAttributeCallback TypedCallback);\nUGameFuseGroups::RespondToGroupJoinRequest(const int32 ConnectionId, const int32 UserId, EGFInviteRequestStatus Status, FGFGroupActionCallback TypedCallback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#blueprint-functions_3","title":"Blueprint Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_5","title":"Operations","text":"<pre><code>// Blueprint-specific functions\nUGameFuseGroups::BP_CreateGroup(const FGFGroup&amp; Group, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_FetchGroup(const int32 GroupId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_FetchAllGroups(const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_RequestToJoinGroup(int32 GroupId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_DeleteGroup(const int32 GroupId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_JoinGroup(const int32 GroupId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_LeaveGroup(const int32 GroupId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_FetchUserGroups(const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_SearchGroups(const FString&amp; Query, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_AddAdmin(const int32 GroupId, const int32 UserId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_RemoveAdmin(const int32 GroupId, const int32 UserId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_AddAttribute(const int32 GroupId, const FGFGroupAttribute&amp; Attribute, bool bOthersCanEdit, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_UpdateGroupAttribute(const int32 GroupId, const FGFGroupAttribute&amp; Attribute, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_FetchGroupAttributes(const int32 GroupId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_AcceptGroupJoinRequest(const int32 ConnectionId, const int32 UserId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseGroups::BP_DeclineGroupJoinRequest(const int32 ConnectionId, const int32 UserId, const FBP_GFApiCallback&amp; Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#gamefusefriends","title":"GameFuseFriends","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#c-functions_4","title":"C++ Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#getters_3","title":"Getters","text":"<pre><code>// Functions that just return internal data\nUGameFuseFriends::GetFriendsList();\nUGameFuseFriends::GetOutgoingRequests();\nUGameFuseFriends::GetIncomingRequests();\nUGameFuseFriends::GetRequestHandler();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_6","title":"Operations","text":"<pre><code>// Functions that perform API operations\nUGameFuseFriends::SendFriendRequest(const FString&amp; Username, FGFFriendRequestCallback TypedCallback);\nUGameFuseFriends::AcceptFriendRequest(const int32 FriendshipId, FGFFriendActionCallback TypedCallback);\nUGameFuseFriends::DeclineFriendRequest(const int32 FriendshipId, FGFFriendActionCallback TypedCallback);\nUGameFuseFriends::CancelFriendRequest(const int32 FriendshipId, FGFFriendActionCallback TypedCallback);\nUGameFuseFriends::UnfriendPlayer(const int32 UserId, FGFFriendActionCallback TypedCallback);\nUGameFuseFriends::FetchFriendshipData(FGFFriendsCallback TypedCallback);\nUGameFuseFriends::FetchMyFriendsList(FGFFriendsCallback TypedCallback);\nUGameFuseFriends::FetchUserFriendsList(int32 UserId, FGFFriendsCallback TypedCallback);\nUGameFuseFriends::FetchOutgoingFriendRequests(FGFFriendRequestsCallback TypedCallback);\nUGameFuseFriends::FetchIncomingFriendRequests(FGFFriendRequestsCallback TypedCallback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#blueprint-functions_4","title":"Blueprint Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_7","title":"Operations","text":"<pre><code>// Blueprint-specific functions\nUGameFuseFriends::BP_SendFriendRequest(const FString&amp; Username, const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_AcceptFriendRequest(int32 FriendshipId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_DeclineFriendRequest(int32 FriendshipId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_CancelFriendRequest(int32 FriendshipId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_UnfriendPlayer(int32 UserId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_FetchFriendshipData(const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_FetchMyFriendsList(const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_FetchUserFriendsList(int32 UserId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_FetchOutgoingFriendRequests(const FBP_GFApiCallback&amp; Callback);\nUGameFuseFriends::BP_FetchIncomingFriendRequests(const FBP_GFApiCallback&amp; Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#gamefuserounds","title":"GameFuseRounds","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#c-functions_5","title":"C++ Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#getters_4","title":"Getters","text":"<pre><code>// Functions that just return internal data\nUGameFuseRounds::GetUserRounds();\nUGameFuseRounds::GetRequestHandler();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_8","title":"Operations","text":"<pre><code>// Functions that perform API operations\nUGameFuseRounds::ClearRoundsData();\nUGameFuseRounds::CreateGameRound(const FGFGameRound&amp; GameRound, FGFGameRoundCallback TypedCallback);\nUGameFuseRounds::CreateGameRound(const FGFGameRound&amp; GameRound, const FGFUserData&amp; UserData, FGFGameRoundCallback TypedCallback);\nUGameFuseRounds::FetchGameRound(const int32 RoundId, FGFGameRoundCallback TypedCallback);\nUGameFuseRounds::UpdateGameRound(const int32 RoundId, const FGFGameRound&amp; GameRound, FGFGameRoundCallback TypedCallback);\nUGameFuseRounds::FetchMyGameRounds(FGFGameRoundListCallback TypedCallback, const FString&amp; GameType = \"\", int32 Page = 0, int32 PerPage = 0);\nUGameFuseRounds::FetchUserGameRounds(int32 UserId, FGFGameRoundListCallback TypedCallback, const FString&amp; GameType = \"\", int32 Page = 0, int32 PerPage = 0);\nUGameFuseRounds::DeleteGameRound(const int32 RoundId, FGFGameRoundActionCallback TypedCallback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#blueprint-functions_5","title":"Blueprint Functions","text":""},{"location":"C%2B%2B%20Unreal%20Engine/class%20methods/#operations_9","title":"Operations","text":"<pre><code>// Blueprint-specific functions\nUGameFuseRounds::BP_CreateGameRound(const FGFGameRound&amp; GameRound, const FBP_GFApiCallback&amp; Callback);\nUGameFuseRounds::BP_FetchGameRound(const int32 RoundId, const FBP_GFApiCallback&amp; Callback);\nUGameFuseRounds::BP_UpdateGameRound(const int32 RoundId, const FGFGameRound&amp; GameRound, const FBP_GFApiCallback&amp; Callback);\nUGameFuseRounds::BP_FetchMyGameRounds(const FString&amp; GameType, int32 Page, int32 PerPage, const FBP_GFApiCallback&amp; Callback);\nUGameFuseRounds::BP_FetchUserGameRounds(int32 UserId, const FString&amp; GameType, int32 Page, int32 PerPage, const FBP_GFApiCallback&amp; Callback);\nUGameFuseRounds::BP_DeleteGameRound(const int32 RoundId, const FBP_GFApiCallback&amp; Callback);\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/creating%20store%20items%20on%20the%20web/","title":"Creating store items on the web","text":"<p>See Generic: Creating store items on the web.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/","title":"Custom User Data","text":"<p>Custom user data or key-value pairs are a simple way to save any kind of data for a specific user. An example might be:</p> <pre><code>{\"world_2_unlocked\":\"true\"} {\"player_color\",\"red\"}, {\"favorite_food\",\"Onion\"}\n</code></pre> <p>These are downloaded to your system upon login and synced when one is updated.</p> <p>All values and keys must be strings. If you want to use other data structures like arrays, you could stringify the array while saving. When loading the data you must then convert the saved string into an array.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/#fetching-attributes","title":"Fetching Attributes","text":"<p>You can fetch the current user's attributes:</p> <p>Example</p> <pre><code>void UMyObject::FetchAttributes()\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create a typed callback for better type safety\n    FGFAttributesCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const FGFAttributeList&amp; AttributeList)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Attributes fetched successfully\"));\n\n            // Access the attributes directly from the callback\n            for (const auto&amp; Attribute : AttributeList.Attributes)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Attribute: %s = %s\"), *Attribute.Key, *Attribute.Value);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch attributes\"));\n        }\n    });\n\n    // Fetch user attributes\n    GameFuseUser-&gt;FetchMyAttributes(CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/#setting-attributes","title":"Setting Attributes","text":"<p>You can set a single attribute for the current user:</p> <p>Example</p> <pre><code>void UMyObject::SetAttribute()\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create a typed callback for better type safety\n    FGFAttributesCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const FGFAttributeList&amp; AttributeList)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Attribute set successfully\"));\n\n            // Access the updated attributes\n            for (const auto&amp; Attribute : AttributeList.Attributes)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Updated Attribute: %s = %s\"), *Attribute.Key, *Attribute.Value);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to set attribute\"));\n        }\n    });\n\n    // Set a single attribute\n    GameFuseUser-&gt;SetAttribute(\"CURRENT_LEVEL\", \"5\", CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/#set-attribute","title":"Set Attribute","text":"Parameter Type Description <code>Key</code> <code>FString</code> The key of the attribute <code>Value</code> <code>FString</code> The value of the attribute <code>Callback</code> <code>FGFAttributesCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/#fetch-my-attributes","title":"Fetch My Attributes","text":"Parameter Type Description <code>Callback</code> <code>FGFAttributesCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/#function-return-values","title":"Function Return Values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/custom%20user%20data/#set-attribute_1","title":"Set Attribute","text":"HTTP Status Code Description <code>200</code> OK - Attribute set successfully <code>400</code> Missing or invalid parameters, or some attribute is missing a <code>key</code> or <code>value</code> parameter <code>401</code> User not authenticated <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/forgot%20password/","title":"Forgot Password","text":"<p>You can implement this simple method in your app and we will handle all the emails and password resets on our end.</p> <p>Once you run this function, our system will send an email to that user if it exists. The email will be branded like your app: it will have your app's name, image logo and color so it will look cohesive. The sender's email is even masked with your app's name.</p> <p>The user will then reset their password online and then will be instructed that they can login into your app.</p> <p>Example</p> <pre><code>void UMyObject::ResetUserPassword(const FString&amp; Email)\n{\n    // Get the GameFuse Manager subsystem\n    UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\n\n    // Create a callback for the password reset operation\n    FGFApiCallback CompletionCallback;\n    CompletionCallback.AddLambda([this](const FGFAPIResponse&amp; Response)\n    {\n        if(Response.bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Password reset email sent successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Response: %s\"), *Response.ResponseStr);\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to send password reset email\"));\n            UE_LOG(LogTemp, Error, TEXT(\"Response: %s\"), *Response.ResponseStr);\n        }\n    });\n\n    // Send password reset email\n    GameFuseManager-&gt;SendPasswordResetEmail(Email, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/forgot%20password/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/forgot%20password/#gamefusemanager-sendpasswordresetemail","title":"<code>GameFuseManager-&gt;SendPasswordResetEmail</code>","text":"Parameter Type Description <code>Email</code> <code>FString</code> The email address of the user requesting password reset <code>Callback</code> <code>FGFApiCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/forgot%20password/#response-handling","title":"Response Handling","text":"<p>The <code>FGFApiCallback</code> provides a generic response: - <code>FGFAPIResponse Response</code>: Contains success status, response string, request ID, and response code</p>"},{"location":"C%2B%2B%20Unreal%20Engine/forgot%20password/#function-return-values","title":"Function return values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/forgot%20password/#gamefusemanager-sendpasswordresetemail_1","title":"<code>GameFuseManager-&gt;SendPasswordResetEmail</code>","text":"HTTP status code Description <code>200</code> OK - Password reset email sent successfully <code>403</code> Invalid email address <code>404</code> No user found with the specified email, or GameID or Token incorrect <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/forgot%20password/#user-experience","title":"User Experience","text":"<p>See Generic: Forgot password - User experience.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/","title":"Friends System","text":"<p>The GameFuse Friends System allows you to implement social features in your game, such as sending friend requests, accepting or declining requests, and managing a friends list.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#getting-started-with-friends","title":"Getting Started with Friends","text":"<p>To use the GameFuse Friends system, you'll need to access the <code>UGameFuseFriends</code> subsystem:</p> <pre><code>UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#sending-friend-requests","title":"Sending Friend Requests","text":"<p>You can send a friend request to another user by their username:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::SendFriendRequest(const FString&amp; Username)\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendRequestCallback OnSendFriendRequest;\n    OnSendFriendRequest.BindLambda([this](const FGFFriendRequest&amp; Request) {\n        UE_LOG(LogTemp, Display, TEXT(\"Friend request sent successfully\"));\n        UE_LOG(LogTemp, Display, TEXT(\"Friendship ID: %d\"), Request.FriendshipId);\n        UE_LOG(LogTemp, Display, TEXT(\"Other User: %s\"), *Request.OtherUser.Username);\n    });\n\n    // Send the friend request\n    FriendsSystem-&gt;SendFriendRequest(Username, OnSendFriendRequest);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#accepting-friend-requests","title":"Accepting Friend Requests","text":"<p>When someone sends you a friend request, you can accept it:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::AcceptFriendRequest(int32 FriendshipId)\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendActionCallback OnAcceptFriendRequest;\n    OnAcceptFriendRequest.BindLambda([this, FriendshipId](bool bSuccess) {\n        if (bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Friend request accepted successfully\"));\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to accept friend request\"));\n        }\n    });\n\n    // Accept the friend request\n    FriendsSystem-&gt;AcceptFriendRequest(FriendshipId, OnAcceptFriendRequest);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#declining-friend-requests","title":"Declining Friend Requests","text":"<p>You can also decline a friend request:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::DeclineFriendRequest(int32 FriendshipId)\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendActionCallback OnDeclineFriendRequest;\n    OnDeclineFriendRequest.BindLambda([this, FriendshipId](bool bSuccess) {\n        if (bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Friend request declined successfully\"));\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to decline friend request\"));\n        }\n    });\n\n    // Decline the friend request\n    FriendsSystem-&gt;DeclineFriendRequest(FriendshipId, OnDeclineFriendRequest);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#canceling-friend-requests","title":"Canceling Friend Requests","text":"<p>If you've sent a friend request and want to cancel it:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::CancelFriendRequest(int32 FriendshipId)\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendActionCallback OnCancelFriendRequest;\n    OnCancelFriendRequest.BindLambda([this, FriendshipId](bool bSuccess) {\n        if (bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Friend request canceled successfully\"));\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to cancel friend request\"));\n        }\n    });\n\n    // Cancel the friend request\n    FriendsSystem-&gt;CancelFriendRequest(FriendshipId, OnCancelFriendRequest);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#unfriending-players","title":"Unfriending Players","text":"<p>You can remove a user from your friends list:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::UnfriendPlayer(int32 UserId)\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendActionCallback OnUnfriendPlayer;\n    OnUnfriendPlayer.BindLambda([this, UserId](bool bSuccess) {\n        if (bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Player unfriended successfully\"));\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to unfriend player\"));\n        }\n    });\n\n    // Unfriend the player\n    FriendsSystem-&gt;UnfriendPlayer(UserId, OnUnfriendPlayer);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-friendship-data","title":"Fetching Friendship Data","text":"<p>You can fetch all friendship data for the current user:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::FetchFriendshipData()\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendsCallback OnFetchFriendshipData;\n    OnFetchFriendshipData.BindLambda([this](const TArray&lt;FGFUserData&gt;&amp; FriendsList) {\n        UE_LOG(LogTemp, Display, TEXT(\"Fetched %d friends\"), FriendsList.Num());\n\n        for (const FGFUserData&amp; Friend : FriendsList)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Friend: %s (ID: %d)\"), *Friend.Username, Friend.Id);\n        }\n    });\n\n    // Fetch friendship data\n    FriendsSystem-&gt;FetchFriendshipData(OnFetchFriendshipData);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-friends-lists","title":"Fetching Friends Lists","text":""},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-current-users-friends-list","title":"Fetching Current User's Friends List","text":"<p>C++ Example</p> <pre><code>void UMyGameMode::FetchMyFriendsList()\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendsCallback OnFetchFriendsList;\n    OnFetchFriendsList.BindLambda([this](const TArray&lt;FGFUserData&gt;&amp; Friends) {\n        UE_LOG(LogTemp, Display, TEXT(\"Fetched %d friends\"), Friends.Num());\n\n        for (const FGFUserData&amp; Friend : Friends)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Friend: %s (ID: %d)\"), *Friend.Username, Friend.Id);\n        }\n    });\n\n    // Fetch friends list\n    FriendsSystem-&gt;FetchMyFriendsList(OnFetchFriendsList);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-other-users-friends-lists","title":"Fetching Other Users' Friends Lists","text":"<p>C++ Example</p> <pre><code>void UMyGameMode::FetchUserFriendsList(int32 UserId)\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendsCallback OnFetchUserFriendsList;\n    OnFetchUserFriendsList.BindLambda([this](const TArray&lt;FGFUserData&gt;&amp; Friends) {\n        UE_LOG(LogTemp, Display, TEXT(\"Fetched %d friends for user\"), Friends.Num());\n\n        for (const FGFUserData&amp; Friend : Friends)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Friend: %s (ID: %d)\"), *Friend.Username, Friend.Id);\n        }\n    });\n\n    // Fetch user's friends list\n    FriendsSystem-&gt;FetchUserFriendsList(UserId, OnFetchUserFriendsList);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-friend-requests","title":"Fetching Friend Requests","text":""},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-outgoing-friend-requests","title":"Fetching Outgoing Friend Requests","text":"<p>C++ Example</p> <pre><code>void UMyGameMode::FetchOutgoingFriendRequests()\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendRequestsCallback OnFetchOutgoingRequests;\n    OnFetchOutgoingRequests.BindLambda([this](const TArray&lt;FGFFriendRequest&gt;&amp; Requests) {\n        UE_LOG(LogTemp, Display, TEXT(\"Fetched %d outgoing friend requests\"), Requests.Num());\n\n        for (const FGFFriendRequest&amp; Request : Requests)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Outgoing request to: %s (ID: %d)\"), \n                *Request.OtherUser.Username, Request.FriendshipId);\n        }\n    });\n\n    // Fetch outgoing friend requests\n    FriendsSystem-&gt;FetchOutgoingFriendRequests(OnFetchOutgoingRequests);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-incoming-friend-requests","title":"Fetching Incoming Friend Requests","text":"<p>C++ Example</p> <pre><code>void UMyGameMode::FetchIncomingFriendRequests()\n{\n    UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n    // Create typed callback\n    FGFFriendRequestsCallback OnFetchIncomingRequests;\n    OnFetchIncomingRequests.BindLambda([this](const TArray&lt;FGFFriendRequest&gt;&amp; Requests) {\n        UE_LOG(LogTemp, Display, TEXT(\"Fetched %d incoming friend requests\"), Requests.Num());\n\n        for (const FGFFriendRequest&amp; Request : Requests)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Incoming request from: %s (ID: %d)\"), \n                *Request.OtherUser.Username, Request.FriendshipId);\n        }\n    });\n\n    // Fetch incoming friend requests\n    FriendsSystem-&gt;FetchIncomingFriendRequests(OnFetchIncomingRequests);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/friends/#friend-request-operations","title":"Friend Request Operations","text":"Parameter Type Description <code>Username</code> <code>FString</code> The username to send friend request to <code>FriendshipId</code> <code>int32</code> The ID of the friendship request <code>UserId</code> <code>int32</code> The ID of the user to unfriend <code>Callback</code> Various callback types Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-friends-lists_1","title":"Fetching Friends Lists","text":"Parameter Type Description <code>UserId</code> <code>int32</code> The user ID to fetch friends for (optional, for user-specific fetch) <code>Callback</code> <code>FGFFriendsCallback</code> / <code>FBP_GFApiCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#function-return-values","title":"Function Return Values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/friends/#friend-request-operations_1","title":"Friend Request Operations","text":"HTTP status code Description <code>200</code> OK - Operation successful <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>404</code> User not found <code>409</code> Friend request already exists <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#fetching-friends-lists_2","title":"Fetching Friends Lists","text":"HTTP status code Description <code>200</code> OK - Friends list fetched successfully <code>401</code> Unauthorized - User not signed in <code>404</code> User not found (for user-specific fetch) <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/friends/#cached-data-access","title":"Cached Data Access","text":"<p>You can access cached friends data without making API calls:</p> <pre><code>UGameFuseFriends* FriendsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseFriends&gt;();\n\n// Get cached friends list\nconst TArray&lt;FGFUserData&gt;&amp; FriendsList = FriendsSystem-&gt;GetFriendsList();\n\n// Get cached outgoing requests\nconst TArray&lt;FGFFriendRequest&gt;&amp; OutgoingRequests = FriendsSystem-&gt;GetOutgoingRequests();\n\n// Get cached incoming requests\nconst TArray&lt;FGFFriendRequest&gt;&amp; IncomingRequests = FriendsSystem-&gt;GetIncomingRequests();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/","title":"Game Connection and Variables","text":""},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#connecting-to-gamefuse","title":"Connecting To GameFuse","text":"<p>The first step in using GameFuse after it is installed, and your account is registered, is to run the <code>SetUpGame</code> function. After this you can run other functions to register and sign-in other users, and read and write game data.</p> <p>It is advisable to include the <code>SetUpGame</code> function in your GameMode to ensure it is invoked when your game begins.</p> <p>To import the GameFuse library, add this at the beginning of any script:</p> <pre><code>#include \"GameFuseManager.h\"\n</code></pre> <p>GameFuseManager::SetUpGame should be called as soon as possible in your game setup. The best place to do this is from UGameInstance.</p> <p>Example</p> <pre><code>void UMyGameInstance::BeginPlay()\n{\n    Super::BeginPlay();\n\n    // Get the GameFuse Manager subsystem\n    UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\n\n    // Set up the game connection\n    FGFApiCallback OnGameSetup;\n    OnGameSetup.AddLambda([this, GameFuseManager](const FGFAPIResponse&amp; Response)\n    {\n        if(Response.bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Game setup successful\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Response: %s\"), *Response.ResponseStr);\n\n            // Get game data from the subsystem\n            const FGFGameData&amp; GameData = GameFuseManager-&gt;GetGameData();\n            UE_LOG(LogTemp, Display, TEXT(\"Game Name: %s\"), *GameData.Name);\n            UE_LOG(LogTemp, Display, TEXT(\"Game Description: %s\"), *GameData.Description);\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Game setup failed\"));\n            UE_LOG(LogTemp, Error, TEXT(\"Response: %s\"), *Response.ResponseStr);\n        }\n    });\n\n    GameFuseManager-&gt;SetUpGame(YourGameId, YourGameToken, OnGameSetup);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#gamefusemanager-setupgame","title":"<code>GameFuseManager-&gt;SetUpGame</code>","text":"Parameter Type Description <code>GameId</code> <code>int32</code> The unique identifier of your game <code>Token</code> <code>FString</code> The API token for your game <code>Callback</code> <code>FGFApiCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#function-return-values","title":"Function return values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#gamefusemanager-setupgame_1","title":"<code>GameFuseManager-&gt;SetUpGame</code>","text":"HTTP status code Description <code>200</code> OK - Game setup successful <code>401</code> Failed to verify game - Check your Game ID and token <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#game-variables","title":"Game Variables","text":"<p>Your game variables will be downloaded when you verify and connect with your game, but you can also re-fetch them whenever you like.</p> <p>Example</p> <pre><code>void UMyObject::FetchGameVariables()\n{\n    // Get the GameFuse Manager subsystem\n    UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\n\n    // Create a callback for the fetch operation\n    FGFApiCallback CompletionCallback;\n    CompletionCallback.AddLambda([this, GameFuseManager](const FGFAPIResponse&amp; Response)\n    {\n        if(Response.bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Game variables fetched successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Response: %s\"), *Response.ResponseStr);\n\n            // Get the game variables from the subsystem\n            TMap&lt;FString, FString&gt; GameVariables = GameFuseManager-&gt;GetGameVariables();\n\n            // Access the variables\n            for (const auto&amp; Variable : GameVariables)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Variable: %s = %s\"), *Variable.Key, *Variable.Value);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch game variables\"));\n            UE_LOG(LogTemp, Error, TEXT(\"Response: %s\"), *Response.ResponseStr);\n        }\n    });\n\n    // Fetch game variables\n    GameFuseManager-&gt;FetchGameVariables(CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#function-parameters_1","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#gamefusemanager-fetchgamevariables","title":"<code>GameFuseManager-&gt;FetchGameVariables</code>","text":"Parameter Type Description <code>Callback</code> <code>FGFApiCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#function-return-values_1","title":"Function return values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/game%20connection%20and%20variables/#gamefusemanager-fetchgamevariables_1","title":"<code>GameFuseManager-&gt;FetchGameVariables</code>","text":"HTTP status code Description <code>200</code> OK - Game variables fetched successfully <code>401</code> Failed to fetch game variables. Check your Game ID and token <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/getting%20started/","title":"Getting Started with GameFuse C++","text":"<p>The first step of integrating GameFuse with your project is to make an account.</p> <p>Sign Up</p> <p>After creating your account, add your first game and note the ID and API Token.</p> <p>With this setup, you can now connect via your game client.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/getting%20started/#installation","title":"Installation","text":"<ol> <li>Download the Plugin from GitHub or the Unreal Store</li> <li>Unzip the code</li> <li>Add it to your UnrealEngine project in the Plugins folder</li> <li>Enable the plugin inside the engine</li> </ol> <p>Finally add the GameFuse plugin into your <code>Project.build.cs</code>:</p> <pre><code>PublicDependencyModuleNames.AddRange(new string[] { \"GameFuse\" });\n</code></pre> <ul> <li>Fab Store</li> <li>Unreal Plugin Source</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/getting%20started/#quick-start-example","title":"Quick Start Example","text":"<p>Here's a basic example of how to set up GameFuse in your game:</p> <pre><code>// In your GameInstance or GameMode header\nUPROPERTY()\nTObjectPtr&lt;UGameFuseManager&gt; GameFuseManager;\n\nUPROPERTY()\nTObjectPtr&lt;UGameFuseUser&gt; GameFuseUser;\n\n// In your GameInstance or GameMode implementation\nvoid AYourGameMode::BeginPlay()\n{\n    Super::BeginPlay();\n\n    // Get the GameFuse subsystems\n    GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\n\n    // Set up the game connection\n    FGFApiCallback OnGameSetup;\n    OnGameSetup.BindUObject(this, &amp;AYourGameMode::OnGameSetupComplete);\n\n    GameFuseManager-&gt;SetUpGame(YourGameId, YourGameToken, OnGameSetup);\n}\n\nvoid AYourGameMode::OnGameSetupComplete(const FGFAPIResponse&amp; Response)\n{\n    if (Response.bSuccess)\n    {\n        UE_LOG(LogTemp, Log, TEXT(\"GameFuse setup successful!\"));\n        // Now you can use other GameFuse features\n    }\n    else\n    {\n        UE_LOG(LogTemp, Error, TEXT(\"GameFuse setup failed: %s\"), *Response.ResponseStr);\n    }\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/getting%20started/#key-changes-in-v29","title":"Key Changes in V2.9","text":"<p>GameFuse V2.9 introduced significant architectural changes:</p> <ul> <li>Subsystem Architecture: All GameFuse functionality is now provided through Unreal Engine subsystems</li> <li>Delegate-Based Callbacks: Replaced latent nodes with delegate callbacks for better performance</li> <li>Struct-Based Data: Replaced UObjects with structs for better performance and memory usage</li> <li>Request Tracking: All API calls return a unique request ID for tracking</li> </ul> <p>For detailed migration information, see the V2.9 Migration Guide.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/getting%20started/#example-project","title":"Example Project","text":"<p>Click on the following link to see an example of GameFuse implemented in Unreal 5.2.1:</p> <p>Unreal Example</p>"},{"location":"C%2B%2B%20Unreal%20Engine/getting%20started/#next-steps","title":"Next Steps","text":"<ul> <li>Sign Up Users - Learn how to create user accounts</li> <li>Sign In Users - Learn how to authenticate users</li> <li>Class Methods - Reference for all available methods</li> <li>Struct Reference - Reference for all data structures</li> <li>Callback Reference - Learn about the delegate system</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/","title":"Groups System","text":"<p>The GameFuse Groups System allows you to create and manage groups of users in your game. This includes creating groups, joining groups, managing group membership, and handling group attributes.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#getting-started-with-groups","title":"Getting Started with Groups","text":"<p>To use the GameFuse Groups system, you'll need to access the <code>UGameFuseGroups</code> subsystem:</p> <pre><code>UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#creating-a-group","title":"Creating a Group","text":"<p>You can create a new group with specific settings:</p> <pre><code>void UMyGameMode::CreateGroup()\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create a new group structure\n    FGFGroup GroupData;\n    GroupData.Name = \"My Awesome Group\";\n    GroupData.GroupType = \"Clan\";\n    GroupData.MaxGroupSize = 10;\n    GroupData.bCanAutoJoin = false;\n    GroupData.bIsInviteOnly = true;\n    GroupData.bSearchable = true;\n    GroupData.bAdminsOnlyCanCreateAttributes = true;\n\n    // Create typed callback\n    FGFGroupCallback OnCreateGroup;\n    OnCreateGroup.BindLambda([this](const FGFGroup&amp; CreatedGroup) {\n        // Use CreatedGroup data (ID, name, settings, etc.)\n    });\n\n    // Create the group\n    GroupsSystem-&gt;CreateGroup(GroupData, OnCreateGroup);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#fetching-a-group","title":"Fetching a Group","text":"<p>You can fetch a specific group by its ID:</p> <pre><code>void UMyGameMode::FetchGroup(int32 GroupId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupCallback OnFetchGroup;\n    OnFetchGroup.BindLambda([this](const FGFGroup&amp; Group) {\n        // Use Group data to display group details\n    });\n\n    // Fetch the group\n    GroupsSystem-&gt;FetchGroup(GroupId, OnFetchGroup);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#fetching-all-groups","title":"Fetching All Groups","text":"<p>You can fetch all groups in the game:</p> <pre><code>void UMyGameMode::FetchAllGroups()\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupsCallback OnFetchAllGroups;\n    OnFetchAllGroups.BindLambda([this](const TArray&lt;FGFGroup&gt;&amp; Groups) {\n        // Process array of groups for display\n    });\n\n    // Fetch all groups\n    GroupsSystem-&gt;FetchAllGroups(OnFetchAllGroups);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#joining-a-group","title":"Joining a Group","text":"<p>You can join a group:</p> <pre><code>void UMyGameMode::JoinGroup(int32 GroupId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnJoinGroup;\n    OnJoinGroup.BindLambda([this, GroupId](bool bSuccess) {\n        // Handle success or failure of joining group\n    });\n\n    // Join the group\n    GroupsSystem-&gt;JoinGroup(GroupId, OnJoinGroup);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#requesting-to-join-a-group","title":"Requesting to Join a Group","text":"<p>For invite-only groups, you can request to join:</p> <pre><code>void UMyGameMode::RequestToJoinGroup(int32 GroupId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnRequestToJoinGroup;\n    OnRequestToJoinGroup.BindLambda([this, GroupId](bool bSuccess) {\n        // Handle success or failure of join request\n    });\n\n    // Request to join the group\n    GroupsSystem-&gt;RequestToJoinGroup(GroupId, OnRequestToJoinGroup);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#accepting-join-requests","title":"Accepting Join Requests","text":"<p>As a group admin, you can accept join requests:</p> <pre><code>void UMyGameMode::AcceptJoinRequest(int32 GroupId, int32 UserId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnAcceptJoinRequest;\n    OnAcceptJoinRequest.BindLambda([this, GroupId, UserId](bool bSuccess) {\n        // Handle success or failure of accepting join request\n    });\n\n    // Accept the join request\n    GroupsSystem-&gt;AcceptJoinRequest(GroupId, UserId, OnAcceptJoinRequest);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#declining-join-requests","title":"Declining Join Requests","text":"<p>As a group admin, you can decline join requests:</p> <pre><code>void UMyGameMode::DeclineJoinRequest(int32 GroupId, int32 UserId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnDeclineJoinRequest;\n    OnDeclineJoinRequest.BindLambda([this, UserId](bool bSuccess) {\n        // Handle success or failure of declining join request\n    });\n\n    // Decline the join request\n    GroupsSystem-&gt;DeclineJoinRequest(GroupId, UserId, OnDeclineJoinRequest);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#leaving-a-group","title":"Leaving a Group","text":"<p>You can leave a group you've joined:</p> <pre><code>void UMyGameMode::LeaveGroup(int32 GroupId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnLeaveGroup;\n    OnLeaveGroup.BindLambda([this, GroupId](bool bSuccess) {\n        // Handle success or failure of leaving group\n    });\n\n    // Leave the group\n    GroupsSystem-&gt;LeaveGroup(GroupId, OnLeaveGroup);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#deleting-a-group","title":"Deleting a Group","text":"<p>If you're the creator or an admin, you can delete a group:</p> <pre><code>void UMyGameMode::DeleteGroup(int32 GroupId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnDeleteGroup;\n    OnDeleteGroup.BindLambda([this, GroupId](bool bSuccess) {\n        // Handle success or failure of deleting group\n    });\n\n    // Delete the group\n    GroupsSystem-&gt;DeleteGroup(GroupId, OnDeleteGroup);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#fetching-user-groups","title":"Fetching User Groups","text":"<p>You can fetch all groups that the current user is a member of:</p> <pre><code>void UMyGameMode::FetchUserGroups()\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupsCallback OnFetchUserGroups;\n    OnFetchUserGroups.BindLambda([this](const TArray&lt;FGFGroup&gt;&amp; Groups) {\n        // Process user's groups for display\n    });\n\n    // Fetch user groups\n    GroupsSystem-&gt;FetchUserGroups(OnFetchUserGroups);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#searching-for-groups","title":"Searching for Groups","text":"<p>You can search for groups by name:</p> <pre><code>void UMyGameMode::SearchGroups(const FString&amp; Query)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupsCallback OnSearchGroups;\n    OnSearchGroups.BindLambda([this, Query](const TArray&lt;FGFGroup&gt;&amp; Groups) {\n        // Process search results for display\n    });\n\n    // Search for groups\n    GroupsSystem-&gt;SearchGroups(Query, OnSearchGroups);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#managing-group-admins","title":"Managing Group Admins","text":"<p>You can add an admin to a group:</p> <pre><code>void UMyGameMode::AddAdmin(int32 GroupId, int32 UserId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnAddAdmin;\n    OnAddAdmin.BindLambda([this, GroupId, UserId](bool bSuccess) {\n        // Handle success or failure of adding admin\n    });\n\n    // Add admin\n    GroupsSystem-&gt;AddAdmin(GroupId, UserId, OnAddAdmin);\n}\n</code></pre> <p>And remove an admin:</p> <pre><code>void UMyGameMode::RemoveAdmin(int32 GroupId, int32 UserId)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnRemoveAdmin;\n    OnRemoveAdmin.BindLambda([this, GroupId, UserId](bool bSuccess) {\n        // Handle success or failure of removing admin\n    });\n\n    // Remove admin\n    GroupsSystem-&gt;RemoveAdmin(GroupId, UserId, OnRemoveAdmin);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/groups/#managing-group-attributes","title":"Managing Group Attributes","text":"<p>You can add an attribute to a group:</p> <pre><code>void UMyGameMode::AddGroupAttribute(int32 GroupId, const FString&amp; Key, const FString&amp; Value)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnAddAttribute;\n    OnAddAttribute.BindLambda([this, GroupId, Key, Value](bool bSuccess) {\n        // Handle success or failure of adding attribute\n    });\n\n    // Add attribute\n    GroupsSystem-&gt;AddAttribute(GroupId, Key, Value, OnAddAttribute);\n}\n</code></pre> <p>You can update an existing attribute:</p> <pre><code>void UMyGameMode::UpdateGroupAttribute(int32 GroupId, const FString&amp; Key, const FString&amp; Value)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnUpdateAttribute;\n    OnUpdateAttribute.BindLambda([this, GroupId, Key, Value](bool bSuccess) {\n        // Handle success or failure of updating attribute\n    });\n\n    // Update attribute\n    GroupsSystem-&gt;UpdateAttribute(GroupId, Key, Value, OnUpdateAttribute);\n}\n</code></pre> <p>And remove an attribute:</p> <pre><code>void UMyGameMode::RemoveGroupAttribute(int32 GroupId, const FString&amp; Key)\n{\n    UGameFuseGroups* GroupsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseGroups&gt;();\n\n    // Create typed callback\n    FGFGroupActionCallback OnRemoveAttribute;\n    OnRemoveAttribute.BindLambda([this, GroupId, Key](bool bSuccess) {\n        // Handle success or failure of removing attribute\n    });\n\n    // Remove attribute\n    GroupsSystem-&gt;RemoveAttribute(GroupId, Key, OnRemoveAttribute);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/","title":"In-Game Leaderboard","text":"<p>Leaderboards can be easily created within GameFuse from the Unreal Engine game client. A leaderboard entry can be added with:</p> <ul> <li><code>leaderboard_name</code></li> <li><code>score</code></li> <li><code>extra_attributes</code> (metadata)</li> </ul> <p>for the current signed in user.</p> <p>Leaderboards can be downloaded for a specific <code>leaderboard_name</code>, which would gather and sort the high scores for all users in the game. Leaderboards can also be downloaded for a specific user.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#adding-leaderboard-entries","title":"Adding Leaderboard Entries","text":"<p>The example below shows submitting leaderboard entries for the current user.</p> <p>C++ Example</p> <pre><code>void UMyObject::AddLeaderboard()\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create metadata for the leaderboard entry\n    TMap&lt;FString, FString&gt; ExtraAttributes;\n    ExtraAttributes.Add(\"deaths\", \"15\");\n    ExtraAttributes.Add(\"jewels\", \"12\");\n\n    // Create callback for the operation\n    FGFInternalSuccessCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Leaderboard entry added successfully\"));\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to add leaderboard entry\"));\n        }\n    });\n\n    // Add leaderboard entry with metadata\n    GameFuseUser-&gt;AddLeaderboardEntry(\"leaderboard_name\", GameFuseUser-&gt;GetCurrentUserData().Score, ExtraAttributes, CompletionCallback);\n\n    // Or add leaderboard entry without metadata\n    // GameFuseUser-&gt;AddLeaderboardEntry(\"leaderboard_name\", GameFuseUser-&gt;GetCurrentUserData().Score, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#fetching-leaderboard-entries","title":"Fetching Leaderboard Entries","text":""},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#fetching-current-users-leaderboard-entries","title":"Fetching Current User's Leaderboard Entries","text":"<p>C++ Example</p> <pre><code>void UMyObject::GetMyLeaderboards()\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create callback for the operation\n    FGFLeaderboardEntriesCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const TArray&lt;FGFLeaderboardEntry&gt;&amp; LeaderboardEntries)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Fetched %d leaderboard entries\"), LeaderboardEntries.Num());\n\n            for(const FGFLeaderboardEntry&amp; Entry : LeaderboardEntries)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Leaderboard: %s, Score: %d, Username: %s\"), \n                    *Entry.LeaderboardName, Entry.Score, *Entry.Username);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch leaderboard entries\"));\n        }\n    });\n\n    // Fetch current user's leaderboard entries\n    GameFuseUser-&gt;FetchMyLeaderboardEntries(12, false, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#fetching-other-users-leaderboard-entries","title":"Fetching Other Users' Leaderboard Entries","text":"<p>C++ Example</p> <pre><code>void UMyObject::GetUserLeaderboards(int32 UserId)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create callback for the operation\n    FGFLeaderboardEntriesCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const TArray&lt;FGFLeaderboardEntry&gt;&amp; LeaderboardEntries)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Fetched %d leaderboard entries for user\"), LeaderboardEntries.Num());\n\n            for(const FGFLeaderboardEntry&amp; Entry : LeaderboardEntries)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Leaderboard: %s, Score: %d, Username: %s\"), \n                    *Entry.LeaderboardName, Entry.Score, *Entry.Username);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch user leaderboard entries\"));\n        }\n    });\n\n    // Fetch specific user's leaderboard entries\n    GameFuseUser-&gt;FetchUserLeaderboardEntries(UserId, 12, false, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#fetching-global-leaderboard-entries","title":"Fetching Global Leaderboard Entries","text":"<p>C++ Example</p> <pre><code>void UMyObject::GetGlobalLeaderboards()\n{\n    // Get the GameFuse Manager subsystem\n    UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\n\n    // Create callback for the operation\n    FGFApiCallback CompletionCallback;\n    CompletionCallback.AddLambda([this, GameFuseManager](const FGFAPIResponse&amp; Response)\n    {\n        if(Response.bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Global leaderboard entries fetched successfully\"));\n\n            // Get the leaderboard entries from the manager\n            const TArray&lt;FGFLeaderboardEntry&gt;&amp; Entries = GameFuseManager-&gt;GetLeaderboardEntries(\"leaderboard_name\");\n\n            for(const FGFLeaderboardEntry&amp; Entry : Entries)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Leaderboard: %s, Score: %d, Username: %s\"), \n                    *Entry.LeaderboardName, Entry.Score, *Entry.Username);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch global leaderboard entries: %s\"), *Response.ResponseStr);\n        }\n    });\n\n    // Fetch global leaderboard entries\n    GameFuseManager-&gt;FetchLeaderboardEntries(15, false, \"leaderboard_name\", CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#clearing-leaderboard-entries","title":"Clearing Leaderboard Entries","text":"<p>You can clear all leaderboard entries in a specific leaderboard for the current user:</p> <p>C++ Example</p> <pre><code>void UMyObject::ClearMyLeaderboards()\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create callback for the operation\n    FGFInternalSuccessCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Leaderboard entries cleared successfully\"));\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to clear leaderboard entries\"));\n        }\n    });\n\n    // Clear current user's leaderboard entries\n    GameFuseUser-&gt;ClearLeaderboardEntry(\"leaderboard_name\", CompletionCallback);\n}\n</code></pre> <p>}</p> <p>UFUNCTION(BlueprintCallable) void UMyObject::OnMyLeaderboardsClearedBlueprint(const FGFAPIResponse&amp; Response) {     if(Response.bSuccess)     {         UE_LOG(LogTemp, Display, TEXT(\"Leaderboard entries cleared successfully\"));     }     else     {         UE_LOG(LogTemp, Error, TEXT(\"Failed to clear leaderboard entries: %s\"), *Response.ResponseStr);     } } ```</p>"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#adding-leaderboard-entries_1","title":"Adding Leaderboard Entries","text":"Parameter Type Description <code>LeaderboardName</code> <code>FString</code> The name of the leaderboard <code>Score</code> <code>int32</code> The score to add <code>Metadata</code> <code>TMap&lt;FString, FString&gt;</code> Optional metadata for the entry <code>Callback</code> <code>FGFInternalSuccessCallback</code> / <code>FBP_GFApiCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#fetching-leaderboard-entries_1","title":"Fetching Leaderboard Entries","text":"Parameter Type Description <code>Limit</code> <code>int32</code> Maximum number of entries to fetch <code>bOnePerUser</code> <code>bool</code> Whether to fetch only one entry per user <code>LeaderboardName</code> <code>FString</code> The name of the leaderboard (for global fetch) <code>UserId</code> <code>int32</code> The user ID to fetch entries for (for user-specific fetch) <code>Callback</code> <code>FGFLeaderboardEntriesCallback</code> / <code>FBP_GFApiCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#function-return-values","title":"Function Return Values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#gamefuseuser-addleaderboardentry-gamefuseuser-bp_addleaderboardentrywithattributes","title":"<code>GameFuseUser-&gt;AddLeaderboardEntry</code> / <code>GameFuseUser-&gt;BP_AddLeaderboardEntryWithAttributes</code>","text":"HTTP status code Description <code>200</code> OK - Entry added successfully <code>400</code> Invalid extra attributes <code>401</code> Can only add entries for current user <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#gamefuseuser-fetchmyleaderboardentries-gamefuseuser-fetchuserleaderboardentries","title":"<code>GameFuseUser-&gt;FetchMyLeaderboardEntries</code> / <code>GameFuseUser-&gt;FetchUserLeaderboardEntries</code>","text":"HTTP status code Description <code>200</code> OK - Entries fetched successfully <code>401</code> Unauthorized - User not signed in <code>404</code> User not found (for user-specific fetch) <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#gamefusemanager-fetchleaderboardentries","title":"<code>GameFuseManager-&gt;FetchLeaderboardEntries</code>","text":"HTTP status code Description <code>200</code> OK - Entries fetched successfully <code>404</code> No entries for this leaderboard name <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/in%20game%20leaderboard/#gamefuseuser-clearleaderboardentry-gamefuseuser-bp_clearleaderboardentry","title":"<code>GameFuseUser-&gt;ClearLeaderboardEntry</code> / <code>GameFuseUser-&gt;BP_ClearLeaderboardEntry</code>","text":"HTTP status code Description <code>200</code> OK - Entries cleared successfully <code>401</code> Can only clear entries for the current user <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/","title":"Rounds System","text":"<p>The GameFuse Rounds System allows you to track and manage game rounds in your game. This includes creating rounds, fetching round data, and managing round metadata.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#getting-started-with-rounds","title":"Getting Started with Rounds","text":"<p>To use the GameFuse Rounds system, you'll need to access the <code>UGameFuseRounds</code> subsystem:</p> <pre><code>UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#creating-a-game-round","title":"Creating a Game Round","text":"<p>You can create a new game round with specific settings:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::CreateGameRound()\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // Create a new game round structure\n    FGFGameRound RoundData;\n    RoundData.Score = 100;\n    RoundData.StartTime = FDateTime::Now();\n    RoundData.EndTime = RoundData.StartTime + FTimespan::FromMinutes(1);\n    RoundData.GameType = \"SinglePlayer\";\n\n    // Create typed callback\n    FGFGameRoundCallback OnCreateGameRound;\n    OnCreateGameRound.BindLambda([this](const FGFGameRound&amp; CreatedRound) {\n        UE_LOG(LogTemp, Display, TEXT(\"Game round created successfully\"));\n        UE_LOG(LogTemp, Display, TEXT(\"Round ID: %d\"), CreatedRound.Id);\n        UE_LOG(LogTemp, Display, TEXT(\"Score: %d\"), CreatedRound.Score);\n        UE_LOG(LogTemp, Display, TEXT(\"Game Type: %s\"), *CreatedRound.GameType);\n    });\n\n    // Create the game round\n    RoundsSystem-&gt;CreateGameRound(RoundData, OnCreateGameRound);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#creating-a-game-round-with-metadata","title":"Creating a Game Round with Metadata","text":"<p>You can include additional metadata with your game round:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::CreateGameRoundWithMetadata()\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // Create a new game round structure\n    FGFGameRound RoundData;\n    RoundData.Score = 100;\n    RoundData.StartTime = FDateTime::Now();\n    RoundData.EndTime = RoundData.StartTime + FTimespan::FromMinutes(1);\n    RoundData.GameType = \"SinglePlayer\";\n\n    // Add metadata\n    RoundData.Metadata.Add(\"key1\", \"value1\");\n    RoundData.Metadata.Add(\"key2\", \"value2\");\n    RoundData.Metadata.Add(\"difficulty\", \"hard\");\n    RoundData.Metadata.Add(\"level\", \"5\");\n\n    // Create typed callback\n    FGFGameRoundCallback OnCreateGameRoundWithMetadata;\n    OnCreateGameRoundWithMetadata.BindLambda([this](const FGFGameRound&amp; CreatedRound) {\n        UE_LOG(LogTemp, Display, TEXT(\"Game round with metadata created successfully\"));\n        UE_LOG(LogTemp, Display, TEXT(\"Round ID: %d\"), CreatedRound.Id);\n\n        // Access metadata\n        for (const auto&amp; Pair : CreatedRound.Metadata)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Metadata - %s: %s\"), *Pair.Key, *Pair.Value);\n        }\n    });\n\n    // Create the game round with metadata\n    RoundsSystem-&gt;CreateGameRound(RoundData, OnCreateGameRoundWithMetadata);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#creating-a-multiplayer-game-round","title":"Creating a Multiplayer Game Round","text":"<p>You can create a multiplayer game round by specifying the game type and including player IDs:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::CreateMultiplayerGameRound()\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // Create a new game round structure\n    FGFGameRound RoundData;\n    RoundData.Score = 200;\n    RoundData.StartTime = FDateTime::Now();\n    RoundData.EndTime = RoundData.StartTime + FTimespan::FromMinutes(5);\n    RoundData.GameType = \"Multiplayer\";\n    RoundData.bMultiplayer = true;\n\n    // Add metadata\n    RoundData.Metadata.Add(\"map\", \"desert\");\n    RoundData.Metadata.Add(\"mode\", \"capture_the_flag\");\n\n    // Create typed callback\n    FGFGameRoundCallback OnCreateMultiplayerGameRound;\n    OnCreateMultiplayerGameRound.BindLambda([this](const FGFGameRound&amp; CreatedRound) {\n        UE_LOG(LogTemp, Display, TEXT(\"Multiplayer game round created successfully\"));\n        UE_LOG(LogTemp, Display, TEXT(\"Round ID: %d\"), CreatedRound.Id);\n        UE_LOG(LogTemp, Display, TEXT(\"Multiplayer: %s\"), CreatedRound.bMultiplayer ? TEXT(\"Yes\") : TEXT(\"No\"));\n    });\n\n    // Create the multiplayer game round\n    RoundsSystem-&gt;CreateGameRound(RoundData, OnCreateMultiplayerGameRound);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#fetching-a-game-round","title":"Fetching a Game Round","text":"<p>You can fetch a specific game round by its ID:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::FetchGameRound(int32 RoundId)\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // Create typed callback\n    FGFGameRoundCallback OnFetchGameRound;\n    OnFetchGameRound.BindLambda([this](const FGFGameRound&amp; Round) {\n        UE_LOG(LogTemp, Display, TEXT(\"Game round fetched successfully\"));\n        UE_LOG(LogTemp, Display, TEXT(\"Round ID: %d\"), Round.Id);\n        UE_LOG(LogTemp, Display, TEXT(\"Score: %d\"), Round.Score);\n        UE_LOG(LogTemp, Display, TEXT(\"Game Type: %s\"), *Round.GameType);\n\n        // Access metadata\n        for (const auto&amp; Pair : Round.Metadata)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Metadata - %s: %s\"), *Pair.Key, *Pair.Value);\n        }\n    });\n\n    // Fetch the game round\n    RoundsSystem-&gt;FetchGameRound(RoundId, OnFetchGameRound);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#fetching-game-rounds","title":"Fetching Game Rounds","text":""},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#fetching-current-users-game-rounds","title":"Fetching Current User's Game Rounds","text":"<p>C++ Example</p> <pre><code>void UMyGameMode::FetchMyGameRounds()\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // Create typed callback\n    FGFGameRoundListCallback OnFetchMyGameRounds;\n    OnFetchMyGameRounds.BindLambda([this](const TArray&lt;FGFGameRound&gt;&amp; Rounds) {\n        UE_LOG(LogTemp, Display, TEXT(\"Fetched %d game rounds\"), Rounds.Num());\n\n        for (const FGFGameRound&amp; Round : Rounds)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Round ID: %d, Score: %d, Type: %s\"), \n                Round.Id, Round.Score, *Round.GameType);\n        }\n    });\n\n    // Fetch current user's game rounds with pagination and filtering\n    RoundsSystem-&gt;FetchMyGameRounds(OnFetchMyGameRounds, \"SinglePlayer\", 0, 10);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#fetching-other-users-game-rounds","title":"Fetching Other Users' Game Rounds","text":"<p>C++ Example</p> <pre><code>void UMyGameMode::FetchUserGameRounds(int32 UserId)\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // Create typed callback\n    FGFGameRoundListCallback OnFetchUserGameRounds;\n    OnFetchUserGameRounds.BindLambda([this](const TArray&lt;FGFGameRound&gt;&amp; Rounds) {\n        UE_LOG(LogTemp, Display, TEXT(\"Fetched %d game rounds for user\"), Rounds.Num());\n\n        for (const FGFGameRound&amp; Round : Rounds)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Round ID: %d, Score: %d, Type: %s\"), \n                Round.Id, Round.Score, *Round.GameType);\n        }\n    });\n\n    // Fetch specific user's game rounds with pagination and filtering\n    RoundsSystem-&gt;FetchUserGameRounds(UserId, OnFetchUserGameRounds, \"Multiplayer\", 0, 10);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#updating-a-game-round","title":"Updating a Game Round","text":"<p>You can update an existing game round:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::UpdateGameRound(int32 RoundId)\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // First fetch the existing round\n    FGFGameRoundCallback OnFetchForUpdate;\n    OnFetchForUpdate.BindLambda([this, RoundsSystem, RoundId](const FGFGameRound&amp; ExistingRound) {\n        // Create an updated version of the round\n        FGFGameRound UpdatedRound = ExistingRound;\n        UpdatedRound.Score = 150; // Update the score\n        UpdatedRound.EndTime = FDateTime::Now(); // Update the end time\n\n        // Add or update metadata\n        UpdatedRound.Metadata.Add(\"completed\", \"true\");\n\n        // Create callback for the update operation\n        FGFGameRoundCallback OnUpdateGameRound;\n        OnUpdateGameRound.BindLambda([this](const FGFGameRound&amp; UpdatedRoundResult) {\n            UE_LOG(LogTemp, Display, TEXT(\"Game round updated successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Updated Score: %d\"), UpdatedRoundResult.Score);\n        });\n\n        // Update the game round\n        RoundsSystem-&gt;UpdateGameRound(RoundId, UpdatedRound, OnUpdateGameRound);\n    });\n\n    // First fetch the existing round\n    RoundsSystem-&gt;FetchGameRound(RoundId, OnFetchForUpdate);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#deleting-a-game-round","title":"Deleting a Game Round","text":"<p>You can delete a game round:</p> <p>C++ Example</p> <pre><code>void UMyGameMode::DeleteGameRound(int32 RoundId)\n{\n    UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n    // Create typed callback\n    FGFGameRoundActionCallback OnDeleteGameRound;\n    OnDeleteGameRound.BindLambda([this](bool bSuccess) {\n        if (bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Game round deleted successfully\"));\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to delete game round\"));\n        }\n    });\n\n    // Delete the game round\n    RoundsSystem-&gt;DeleteGameRound(RoundId, OnDeleteGameRound);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#creating-and-updating-game-rounds","title":"Creating and Updating Game Rounds","text":"Parameter Type Description <code>RoundData</code> <code>FGFGameRound</code> The game round data to create or update <code>RoundId</code> <code>int32</code> The ID of the round to update or delete <code>Callback</code> Various callback types Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#fetching-game-rounds_1","title":"Fetching Game Rounds","text":"Parameter Type Description <code>UserId</code> <code>int32</code> The user ID to fetch rounds for (optional, for user-specific fetch) <code>GameType</code> <code>FString</code> Optional game type filter (e.g., \"SinglePlayer\", \"Multiplayer\") <code>Page</code> <code>int32</code> Page number for pagination (0-based) <code>PerPage</code> <code>int32</code> Number of rounds per page <code>Callback</code> <code>FGFGameRoundListCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#function-return-values","title":"Function Return Values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#game-round-operations","title":"Game Round Operations","text":"HTTP status code Description <code>200</code> OK - Operation successful <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>404</code> Game round not found <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#fetching-game-rounds_2","title":"Fetching Game Rounds","text":"HTTP status code Description <code>200</code> OK - Game rounds fetched successfully <code>401</code> Unauthorized - User not signed in <code>404</code> User not found (for user-specific fetch) <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/rounds/#cached-data-access","title":"Cached Data Access","text":"<p>You can access cached rounds data without making API calls:</p> <pre><code>UGameFuseRounds* RoundsSystem = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseRounds&gt;();\n\n// Get cached user rounds\nconst TArray&lt;FGFGameRound&gt;&amp; UserRounds = RoundsSystem-&gt;GetUserRounds();\n\n// Clear cached data if needed\nRoundsSystem-&gt;ClearRoundsData();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/","title":"Sign game users in","text":"<p>Signing in follows the same protocol as signing up, just with different parameters.</p> <p>There is a callback function to let you know if your sign-in has been successful or not. Email and password, not the username, will be used to sign in.</p> <p>Example</p> <pre><code>void UMyObject::SignIn(const FString&amp; Email, const FString&amp; Password)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create a typed callback for better type safety\n    FGFUserDataCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const FGFUserData&amp; UserData)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"User signed in successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Username: %s\"), *UserData.Username);\n            UE_LOG(LogTemp, Display, TEXT(\"User ID: %d\"), UserData.Id);\n            UE_LOG(LogTemp, Display, TEXT(\"Score: %d\"), UserData.Score);\n            UE_LOG(LogTemp, Display, TEXT(\"Credits: %d\"), UserData.Credits);\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Sign in failed\"));\n        }\n    });\n\n    // Sign in the user\n    GameFuseUser-&gt;SignIn(Email, Password, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/#checking-sign-in-status","title":"Checking Sign In Status","text":"<p>You can check if a user is currently signed in:</p> <pre><code>UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\nif (GameFuseUser-&gt;IsSignedIn())\n{\n    UE_LOG(LogTemp, Display, TEXT(\"User is signed in\"));\n    FString Username = GameFuseUser-&gt;GetUsername();\n    UE_LOG(LogTemp, Display, TEXT(\"Current user: %s\"), *Username);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/#accessing-user-data-current-vs-last-fetched","title":"Accessing User Data: Current vs. Last Fetched","text":"<p>After signing in, you can access user data using two functions:</p> <ul> <li>GetCurrentUserData(): Returns the currently signed-in user's data. This is updated after a successful sign-in or sign-up, and is what you should use for the local player.</li> <li>GetLastFetchedUserData(): Returns the most recently fetched user (for example, after calling <code>FetchUser(UserId, Callback)</code>). This is useful for viewing other users' profiles or data.</li> </ul> <p>Example: <pre><code>UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\nconst FGFUserData&amp; MyUser = GameFuseUser-&gt;GetCurrentUserData(); // Local signed-in user\nconst FGFUserData&amp; OtherUser = GameFuseUser-&gt;GetLastFetchedUserData(); // Last user fetched by ID\n</code></pre></p> <ul> <li>After sign-in, <code>GetCurrentUserData()</code> is updated with the signed-in user.</li> <li>After calling <code>FetchUser(UserId, Callback)</code>, <code>GetLastFetchedUserData()</code> is updated with that user's data.</li> </ul>"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/#gamefuseuser-signin","title":"<code>GameFuseUser-&gt;SignIn</code>","text":"Parameter Type Description <code>Email</code> <code>FString</code> The user's email address <code>Password</code> <code>FString</code> The user's password <code>Callback</code> <code>FGFUserDataCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/#response-handling","title":"Response Handling","text":"<p>The <code>FGFUserDataCallback</code> provides direct access to the user data: - <code>bool bSuccess</code>: Whether the sign in was successful - <code>const FGFUserData&amp; UserData</code>: The user data if successful</p>"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/#function-return-values","title":"Function return values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20in/#gamefuseuser-signin_1","title":"<code>GameFuseUser-&gt;SignIn</code>","text":"HTTP status code Description <code>200</code> OK - User signed in successfully <code>401</code> Unauthorized - Incorrect email or password <code>402</code> Game is disabled (check the GameFuse dashboard) <code>404</code> User not found <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20up/","title":"Sign game users up","text":"<p>Enable users to sign up in your UnrealEngine game with the following code. These users will be saved in your GameFuse game and can then login from other devices, since the data is saved online.</p> <p>Example</p> <pre><code>void UMyObject::SignUp(const FString&amp; Email, const FString&amp; Password, const FString&amp; PasswordConfirmation, const FString&amp; Username)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create a typed callback for better type safety\n    FGFUserDataCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const FGFUserData&amp; UserData)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"User signed up successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Username: %s\"), *UserData.Username);\n            UE_LOG(LogTemp, Display, TEXT(\"User ID: %d\"), UserData.Id);\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Sign up failed\"));\n        }\n    });\n\n    // Sign up the user\n    GameFuseUser-&gt;SignUp(Email, Password, PasswordConfirmation, Username, CompletionCallback);\n}\n</code></pre> <p>To access the game user object from anywhere in the code, you can use the subsystem:</p> <pre><code>UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20up/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20up/#gamefuseuser-signup","title":"<code>GameFuseUser-&gt;SignUp</code>","text":"Parameter Type Description <code>Email</code> <code>FString</code> The user's email address <code>Password</code> <code>FString</code> The user's password <code>PasswordConfirmation</code> <code>FString</code> Password confirmation (must match Password) <code>Username</code> <code>FString</code> The desired username <code>Callback</code> <code>FGFUserDataCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20up/#response-handling","title":"Response Handling","text":"<p>The <code>FGFUserDataCallback</code> provides direct access to the user data: - <code>bool bSuccess</code>: Whether the sign up was successful - <code>const FGFUserData&amp; UserData</code>: The user data if successful</p>"},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20up/#function-return-values","title":"Function return values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/signing%20game%20users%20up/#gamefuseuser-signup_1","title":"<code>GameFuseUser-&gt;SignUp</code>","text":"HTTP status code Description <code>200</code> OK - User created successfully <code>422</code> Validation error - Check email format, password requirements, or username availability <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/","title":"Struct Reference","text":"<p>This page provides a reference for all the public structs returned by GameFuse functions, along with their fields and types.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfgamedata","title":"FGFGameData","text":"<p>Game information returned by GameFuseManager.</p> <pre><code>struct FGFGameData\n{\n    int32 Id;                  // The unique identifier of the game\n    FString Token;             // The API token for the game\n    FString Name;              // The name of the game\n    FString Description;       // The description of the game\n    FString ServerTime;        // The current server time in UTC\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfuserdata","title":"FGFUserData","text":"<p>User information returned by GameFuseUser.</p> <pre><code>struct FGFUserData\n{\n    int32 Id;                  // The unique identifier of the user\n    FString Username;          // The username of the user\n    bool bSignedIn;            // Whether the user is signed in\n    int32 NumberOfLogins;      // The number of times the user has logged in\n    FString AuthenticationToken; // The authentication token for the user\n    int32 Score;               // The user's score\n    int32 Credits;             // The user's credits\n    FString LastLogin;         // The date of the user's last login\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfstoreitem","title":"FGFStoreItem","text":"<p>Store item information returned by GameFuseManager and GameFuseUser.</p> <pre><code>struct FGFStoreItem\n{\n    int32 Id;                  // The unique identifier of the store item\n    FString Name;              // The name of the store item\n    FString Category;          // The category of the store item\n    FString Description;       // The description of the store item\n    int32 Cost;                // The cost of the store item in credits\n    FString IconUrl;           // The URL of the store item's icon\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfleaderboardentry","title":"FGFLeaderboardEntry","text":"<p>Leaderboard entry information returned by GameFuseManager and GameFuseUser.</p> <pre><code>struct FGFLeaderboardEntry\n{\n    FString LeaderboardName;   // The name of the leaderboard\n    FString Username;          // The username of the user who made the entry\n    int32 Score;               // The score of the entry\n    int32 GameUserId;          // The ID of the user who made the entry\n    TMap&lt;FString, FString&gt; Metadata; // Additional metadata for the entry\n    FString DateTime;          // The date and time when the entry was made\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfleaderboard","title":"FGFLeaderboard","text":"<p>Leaderboard information returned by GameFuseManager.</p> <pre><code>struct FGFLeaderboard\n{\n    FString Name;              // The name of the leaderboard\n    TArray&lt;FGFLeaderboardEntry&gt; Entries; // The entries in the leaderboard\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfattributelist","title":"FGFAttributeList","text":"<p>Attribute list information returned by GameFuseUser.</p> <pre><code>struct FGFAttributeList\n{\n    TMap&lt;FString, FString&gt; Attributes; // Map of attribute keys to values\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfmessage","title":"FGFMessage","text":"<p>Message information returned by GameFuseChat.</p> <pre><code>struct FGFMessage\n{\n    int32 Id;                  // The unique identifier of the message\n    FString Text;              // The text content of the message\n    int32 UserId;              // The ID of the user who sent the message\n    FDateTime CreatedAt;       // When the message was created\n    TArray&lt;int32&gt; ReadBy;      // List of user IDs who have read the message\n    bool bRead;                // Whether the current user has read the message\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfchat","title":"FGFChat","text":"<p>Chat information returned by GameFuseChat.</p> <pre><code>struct FGFChat\n{\n    int32 Id;                  // The unique identifier of the chat\n    int32 CreatorId;           // The ID of the user who created the chat\n    FString CreatorType;       // The type of creator (User, etc.)\n    TArray&lt;FGFMessage&gt; Messages; // List of messages in the chat\n    TArray&lt;FGFUserData&gt; Participants; // List of users in the chat\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfgroup","title":"FGFGroup","text":"<p>Group information returned by GameFuseGroups.</p> <pre><code>struct FGFGroup\n{\n    int32 Id;                  // The unique identifier of the group\n    FString Name;              // The name of the group\n    FString GroupType;         // The type of the group\n    int32 MaxGroupSize;        // The maximum number of members allowed in the group\n    bool bCanAutoJoin;         // Whether users can automatically join the group\n    bool bIsInviteOnly;        // Whether the group is invite-only\n    bool bSearchable;          // Whether the group is searchable\n    bool bAdminsOnlyCanCreateAttributes; // Whether only admins can create attributes\n    int32 MemberCount;         // The number of members in the group\n    TArray&lt;FGFUserData&gt; Members; // List of members in the group\n    TArray&lt;FGFUserData&gt; Admins; // List of admins in the group\n    TArray&lt;FGFGroupAttribute&gt; Attributes; // List of attributes for the group\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfgroupattribute","title":"FGFGroupAttribute","text":"<p>Group attribute information used by GameFuseGroups.</p> <pre><code>struct FGFGroupAttribute\n{\n    int32 Id;                  // The unique identifier of the attribute\n    FString Key;               // The key of the attribute\n    FString Value;             // The value of the attribute\n    int32 CreatorId;           // The ID of the user who created the attribute (or group ID when creating)\n    bool bCanEdit;             // Whether non-admin members can edit this attribute\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfgroupconnection","title":"FGFGroupConnection","text":"<p>Group connection information returned by GameFuseGroups.</p> <pre><code>struct FGFGroupConnection\n{\n    int32 Id;                  // The unique identifier of the connection\n    EGFInviteRequestStatus Status; // The status of the connection\n    FGFUserData User;          // The user associated with the connection\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgffriendrequest","title":"FGFFriendRequest","text":"<p>Friend request information returned by GameFuseFriends.</p> <pre><code>struct FGFFriendRequest\n{\n    int32 FriendshipId;        // The unique identifier of the friend request\n    FGFUserData OtherUser;     // The other user in the friendship\n    EGFInviteRequestStatus Status; // The status of the request\n    FDateTime RequestCreatedAt; // When the request was created\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfgameround","title":"FGFGameRound","text":"<p>Game round information returned by GameFuseRounds.</p> <pre><code>struct FGFGameRound\n{\n    int32 Id;                  // The unique identifier of the game round\n    int32 GameUserId;          // The ID of the user who played the round\n    FDateTime StartTime;       // When the round started\n    FDateTime EndTime;         // When the round ended\n    int32 Score;               // The score achieved in the round\n    int32 Place;               // The place achieved in the round (-1 if not ranked)\n    FString GameType;          // The type of game played\n    int32 MultiplayerGameRoundId; // The ID of the multiplayer game round (-1 if single player)\n    TMap&lt;FString, FString&gt; Metadata; // Additional metadata for the round\n    bool bMultiplayer;         // Whether this is a multiplayer round\n    TArray&lt;FGFGameRoundRanking&gt; Rankings; // Rankings for multiplayer rounds\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfgameroundranking","title":"FGFGameRoundRanking","text":"<p>Game round ranking information for multiplayer rounds.</p> <pre><code>struct FGFGameRoundRanking\n{\n    int32 Place;               // The place achieved in the round\n    int32 Score;               // The score achieved in the round\n    FDateTime StartTime;       // When the round started\n    FDateTime EndTime;         // When the round ended\n    FGFUserData User;          // The user data for this ranking\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#fgfapiresponse","title":"FGFAPIResponse","text":"<p>API response information returned by all GameFuse API calls.</p> <pre><code>struct FGFAPIResponse\n{\n    bool bSuccess;             // Whether the API call was successful\n    FString ResponseStr;       // The raw response string from the API\n    FGuid RequestId;           // The unique identifier of the request\n    int32 ResponseCode;        // The HTTP response code\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#enums","title":"Enums","text":""},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#egfinviterequeststatus","title":"EGFInviteRequestStatus","text":"<p>Status values for invite and friend requests.</p> <pre><code>enum class EGFInviteRequestStatus : uint8\n{\n    None,       // No status set\n    Accepted,   // Request was accepted\n    Declined,   // Request was declined\n    Pending     // Request is pending\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#egfuserapiresponsetype","title":"EGFUserAPIResponseType","text":"<p>Response types for user API calls.</p> <pre><code>enum class EGFUserAPIResponseType : uint8\n{\n    None,               // No response type\n    Login,              // Login response\n    Attributes,         // Attributes response\n    LeaderboardEntries, // Leaderboard entries response\n    StoreItems,         // Store items response\n    Credits,            // Credits response\n    Score               // Score response\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/struct%20reference/#egfcoreapiresponsetype","title":"EGFCoreAPIResponseType","text":"<p>Response types for core API calls.</p> <pre><code>enum class EGFCoreAPIResponseType : uint8\n{\n    None,               // No response type\n    SetUpGame,          // Game setup response\n    ListLeaderboardEntries, // Leaderboard entries list response\n    ListStoreItems,     // Store items list response\n    ForgotPassword      // Forgot password response\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/","title":"Using Credits","text":"<p>Credits are GameFuse's virtual currency system. Each user has a credit balance that can be used to purchase store items, unlock features, or power your game's economy.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#overview","title":"Overview","text":"<p>Credits are a numeric attribute of each game user stored as a simple integer value. They can be added manually through API calls and are automatically deducted when users purchase store items.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#getting-user-credits","title":"Getting User Credits","text":"<p>You can retrieve the current user's credit balance:</p> <p>Example</p> <pre><code>void UMyObject::GetUserCredits()\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Get current user data\n    const FGFUserData&amp; UserData = GameFuseUser-&gt;GetCurrentUserData();\n    UE_LOG(LogTemp, Display, TEXT(\"Current credits: %d\"), UserData.Credits);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#adding-credits","title":"Adding Credits","text":"<p>You can add credits to the current user's account:</p> <p>Example</p> <pre><code>void UMyObject::AddCredits(int32 CreditsToAdd)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create a typed callback for better type safety\n    FGFUserDataCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const FGFUserData&amp; UserData)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Credits added successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"New credit balance: %d\"), UserData.Credits);\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to add credits\"));\n        }\n    });\n\n    // Add credits to the user\n    GameFuseUser-&gt;AddCredits(CreditsToAdd, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#setting-credits","title":"Setting Credits","text":"<p>You can set the user's credits to a specific amount:</p> <p>Example</p> <pre><code>void UMyObject::SetCredits(int32 NewCreditAmount)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create a typed callback for better type safety\n    FGFUserDataCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const FGFUserData&amp; UserData)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Credits set successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"New credit balance: %d\"), UserData.Credits);\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to set credits\"));\n        }\n    });\n\n    // Set user's credits to specific amount\n    GameFuseUser-&gt;SetCredits(NewCreditAmount, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#add-credits","title":"Add Credits","text":"Parameter Type Description <code>Credits</code> <code>int32</code> The amount of credits to add (must be positive) <code>Callback</code> <code>FGFUserDataCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#set-credits","title":"Set Credits","text":"Parameter Type Description <code>Credits</code> <code>int32</code> The target credit amount to set (must be non-negative) <code>Callback</code> <code>FGFUserDataCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#function-return-values","title":"Function Return Values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/using%20credits/#addset-credits","title":"Add/Set Credits","text":"HTTP Status Code Description <code>200</code> OK - Credits updated successfully <code>400</code> Bad request - Invalid parameters (negative values, etc.) <code>401</code> Unauthorized - User not signed in <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/","title":"Using the Store in Your Game","text":"<p>The GameFuse Store system allows you to create, manage, and purchase store items in your game. Store items are fetched when you call <code>FetchGameVariables()</code> and are refreshed every time you call it again.</p>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#getting-started-with-store","title":"Getting Started with Store","text":"<p>To use the GameFuse Store system, you'll need to access the <code>UGameFuseManager</code> and <code>UGameFuseUser</code> subsystems:</p> <pre><code>UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\nUGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#fetching-available-store-items","title":"Fetching Available Store Items","text":"<p>Store items are fetched when you call <code>FetchGameVariables()</code>. The items will be refreshed every time you call it again.</p> <p>C++ Example</p> <pre><code>void UMyObject::FetchStoreItems()\n{\n    // Get the GameFuse Manager subsystem\n    UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\n\n    // Create callback for the operation\n    FGFApiCallback CompletionCallback;\n    CompletionCallback.AddLambda([this, GameFuseManager](const FGFAPIResponse&amp; Response)\n    {\n        if(Response.bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Store items fetched successfully\"));\n\n            // Get the store items from the manager\n            const TArray&lt;FGFStoreItem&gt;&amp; StoreItems = GameFuseManager-&gt;GetGameStoreItems();\n\n            for (const FGFStoreItem&amp; StoreItem : StoreItems)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Name: %s\"), *StoreItem.Name);\n                UE_LOG(LogTemp, Display, TEXT(\"Category: %s\"), *StoreItem.Category);\n                UE_LOG(LogTemp, Display, TEXT(\"ID: %d\"), StoreItem.Id);\n                UE_LOG(LogTemp, Display, TEXT(\"Description: %s\"), *StoreItem.Description);\n                UE_LOG(LogTemp, Display, TEXT(\"Cost: %d (credits)\"), StoreItem.Cost);\n                UE_LOG(LogTemp, Display, TEXT(\"Icon URL: %s\"), *StoreItem.IconUrl);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch store items: %s\"), *Response.ResponseStr);\n        }\n    });\n\n    // Fetch game variables (includes store items)\n    GameFuseManager-&gt;FetchGameVariables(CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#fetching-purchased-store-items","title":"Fetching Purchased Store Items","text":""},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#fetching-current-users-purchased-store-items","title":"Fetching Current User's Purchased Store Items","text":"<p>C++ Example</p> <pre><code>void UMyObject::FetchMyPurchasedStoreItems()\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create callback for the operation\n    FGFStoreItemsCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const TArray&lt;FGFStoreItem&gt;&amp; StoreItems)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Fetched %d purchased store items\"), StoreItems.Num());\n\n            for (const FGFStoreItem&amp; StoreItem : StoreItems)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Owns Item: %s (ID: %d)\"), *StoreItem.Name, StoreItem.Id);\n                UE_LOG(LogTemp, Display, TEXT(\"Category: %s\"), *StoreItem.Category);\n                UE_LOG(LogTemp, Display, TEXT(\"Description: %s\"), *StoreItem.Description);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch purchased store items\"));\n        }\n    });\n\n    // Fetch current user's purchased store items\n    GameFuseUser-&gt;FetchMyPurchasedStoreItems(CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#fetching-other-users-purchased-store-items","title":"Fetching Other Users' Purchased Store Items","text":"<p>C++ Example</p> <pre><code>void UMyObject::FetchUserPurchasedStoreItems(int32 UserId)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create callback for the operation\n    FGFStoreItemsCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const TArray&lt;FGFStoreItem&gt;&amp; StoreItems)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Fetched %d purchased store items for user\"), StoreItems.Num());\n\n            for (const FGFStoreItem&amp; StoreItem : StoreItems)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"User's Purchased Item: %s (ID: %d)\"), *StoreItem.Name, StoreItem.Id);\n                UE_LOG(LogTemp, Display, TEXT(\"Category: %s\"), *StoreItem.Category);\n                UE_LOG(LogTemp, Display, TEXT(\"Description: %s\"), *StoreItem.Description);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to fetch user's purchased store items\"));\n        }\n    });\n\n    // Fetch specific user's purchased store items\n    GameFuseUser-&gt;FetchUserPurchasedStoreItems(UserId, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#purchasing-store-items","title":"Purchasing Store Items","text":"<p>To purchase a store item, you can use either the store item ID or the store item object. If the user doesn't have enough credits, the purchase will fail.</p> <p>C++ Example</p> <pre><code>void UMyObject::PurchaseStoreItem(int32 StoreItemId)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create callback for the operation\n    FGFStoreItemsCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const TArray&lt;FGFStoreItem&gt;&amp; StoreItems)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Store item purchased successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Updated purchased items count: %d\"), StoreItems.Num());\n\n            // The user's purchased store items list has been refreshed\n            for (const FGFStoreItem&amp; StoreItem : StoreItems)\n            {\n                UE_LOG(LogTemp, Display, TEXT(\"Owned Item: %s (ID: %d)\"), *StoreItem.Name, StoreItem.Id);\n            }\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to purchase store item\"));\n        }\n    });\n\n    // Purchase store item by ID\n    GameFuseUser-&gt;PurchaseStoreItem(StoreItemId, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#removing-store-items","title":"Removing Store Items","text":"<p>You can remove a store item from a user's inventory:</p> <p>C++ Example</p> <pre><code>void UMyObject::RemoveStoreItem(int32 StoreItemId)\n{\n    // Get the GameFuse User subsystem\n    UGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n    // Create callback for the operation\n    FGFStoreItemsCallback CompletionCallback;\n    CompletionCallback.BindLambda([this](bool bSuccess, const TArray&lt;FGFStoreItem&gt;&amp; StoreItems)\n    {\n        if(bSuccess)\n        {\n            UE_LOG(LogTemp, Display, TEXT(\"Store item removed successfully\"));\n            UE_LOG(LogTemp, Display, TEXT(\"Updated purchased items count: %d\"), StoreItems.Num());\n        }\n        else\n        {\n            UE_LOG(LogTemp, Error, TEXT(\"Failed to remove store item\"));\n        }\n    });\n\n    // Remove store item by ID\n    GameFuseUser-&gt;RemoveStoreItem(StoreItemId, CompletionCallback);\n}\n</code></pre>"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#function-parameters","title":"Function Parameters","text":""},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#fetching-store-items","title":"Fetching Store Items","text":"Parameter Type Description <code>UserId</code> <code>int32</code> The user ID to fetch purchased items for (optional, for user-specific fetch) <code>Callback</code> <code>FGFStoreItemsCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#purchasing-and-removing-store-items","title":"Purchasing and Removing Store Items","text":"Parameter Type Description <code>StoreItemId</code> <code>int32</code> The ID of the store item to purchase or remove <code>Callback</code> <code>FGFStoreItemsCallback</code> Callback function to handle the response"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#function-return-values","title":"Function Return Values","text":""},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#ugamefuseuser-purchasestoreitem","title":"<code>UGameFuseUser-&gt;PurchaseStoreItem</code>","text":"HTTP status code Description <code>200</code> OK - Item purchased successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>403</code> Not enough credits or item already purchased <code>404</code> Item not found <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#ugamefuseuser-removestoreitem","title":"<code>UGameFuseUser-&gt;RemoveStoreItem</code>","text":"HTTP status code Description <code>200</code> OK - Item removed successfully <code>400</code> Bad request - Invalid parameters <code>401</code> Unauthorized - User not signed in <code>404</code> Item not found or not owned by user <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#ugamefuseuser-fetchmypurchasedstoreitems-ugamefuseuser-fetchuserpurchasedstoreitems","title":"<code>UGameFuseUser-&gt;FetchMyPurchasedStoreItems</code> / <code>UGameFuseUser-&gt;FetchUserPurchasedStoreItems</code>","text":"HTTP status code Description <code>200</code> OK - Purchased items fetched successfully <code>401</code> Unauthorized - User not signed in <code>404</code> User not found (for user-specific fetch) <code>500</code> Unknown server error"},{"location":"C%2B%2B%20Unreal%20Engine/using%20the%20store%20in%20your%20game/#cached-data-access","title":"Cached Data Access","text":"<p>You can access cached store data without making API calls:</p> <pre><code>UGameFuseManager* GameFuseManager = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseManager&gt;();\nUGameFuseUser* GameFuseUser = GetGameInstance()-&gt;GetSubsystem&lt;UGameFuseUser&gt;();\n\n// Get cached available store items\nconst TArray&lt;FGFStoreItem&gt;&amp; AvailableItems = GameFuseManager-&gt;GetGameStoreItems();\n\n// Get cached purchased store items\nconst TArray&lt;FGFStoreItem&gt;&amp; PurchasedItems = GameFuseUser-&gt;GetPurchasedStoreItems();\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/class%20methods/","title":"Class Methods","text":"<p>Check each model below for a list of methods and attributes.</p> GameFuseUser.js<pre><code>// Your current signed in user can be retrieved with:\ngameFuseUser user = GameFuse.CurrentUser;\n\nisSignedIn();\ngetNumberOfLogins();\ngetLastLogin();\ngetUsername();\ngetScore();\ngetCredits();\n\naddCredits(int credits, Action &lt; string, bool &gt; callback = null);\nsetCredits(int credits, Action &lt; string, bool &gt; callback = null);\naddScore(int credits, Action &lt; string, bool &gt; callback = null);\nsetScore(int score, Action &lt; string, bool &gt; callback = null);\ngetAttributes();\nsetAttribute(string key, string value, Action &lt; string, bool &gt; callback = null);\nsetAttributeLocal(string key, string  val);\nsyncLocalAttributes(Action callback = null);\nsetAttributes(Dictionary newAttributes, Action callback = null);\ngetDirtyAttributes();\ngetAttributesKeys();\ngetAttributeValue(string key);\nsetAttribute(string key, string value, Action &lt; string, bool &gt; callback = null);\nremoveAttribute(string key, Action &lt; string, bool &gt; callback = null);\ngetPurchasedStoreItems();\npurchaseStoreItem(GameFuseStoreItem storeItem, Action &lt; string, bool &gt; callback = null);\npurchaseStoreItem(int storeItemId, Action &lt; string, bool &gt; callback = null);\nremoveStoreItem(int storeItemID, bool reimburseUser, Action &lt; string, bool &gt; callback = null);\nremoveStoreItem(GameFuseStoreItem storeItem, bool reimburseUser, Action &lt; string, bool &gt; callback = null);\naddLeaderboardEntry(string leaderboardName, int score, Dictionary extraAttributes = null, Action &lt; string, bool &gt; callback = null);\naddLeaderboardEntry(string leaderboardName, int score, Action &lt; string, bool &gt; callback = null);\ngetLeaderboard(int limit, bool onePerUser, Action &lt; string, bool &gt; callback = null); //Get all leaderboard entries for current signed in user\n\ngetFriends();\ngetIncomingFriendRequests();\ngetOutgoingFriendRequests();\n</code></pre> GameFuse.js<pre><code>setUpGame(string gameId, string token, function(string, bool) callback = null);\ngetGameId();\ngetGameName();\ngetGameDescription();\ngetStoreItems() //Gets all store items (your library)\nsignIn(string email, string password, function(string, bool) callback = null);\nsignUp(string email, string password, string password_confirmation, string username, function(string, bool) callback = null);\ngetLeaderboard(int limit, bool onePerUser, string LeaderboardName, function(string, bool) callback = null); //Retrieves leaderboard for one specific Leaderboard Name\nsendPasswordResetEmail(string email, function(string, bool) callback = null)\nfetchGameVariables(gameId, token, callback = undefined, extraData={})\ngetGameVariables()\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/class%20methods/#store-items","title":"Store items","text":"GameFuseStoreItem.js<pre><code>getName();\ngetCategory();\ngetDescription();\ngetCost();\ngetId();\ngetIconUrl();\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/class%20methods/#leaderboard","title":"Leaderboard","text":"GameFuseLeaderboardEntry.js<pre><code>getUsername();\ngetScore();\ngetLeaderboardName();\ngetExtraAttributes();\ngetTimestamp();\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/creating%20store%20items%20on%20the%20web/","title":"Creating Store Items on the Web (JS)","text":"<p>See Generic: Creating store items on the web.</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/custom%20user%20data/","title":"Custom user data","text":"<p>Custom user data or key-value pairs are a simple way to save any kind of data for a specific user. An example might be:</p> <pre><code>{\"world_2_unlocked\":\"true\"} {\"player_color\",\"red\"}, {\"favorite_food\",\"Onion\"}\n</code></pre> <p>These are downloaded to your system upon login and synced when one is updated. You can access this data with <code>GameFuseUser.CurrentUser.attributes</code></p> <p>All values and keys must be strings. If you want to use other data structures like arrays, you could stringify the array while saving. When loading the data you must then convert the saved string into an array.</p> <p>Example</p> <pre><code>Start()\n{\n    let self = this;\n    console.log(GameFuseUser.CurrentUser.attributes.length);  // Prints 0\n    console.log(GameFuseUser.CurrentUser.GetAttributeValue(\"CURRENT_LEVEL\") == null); // Prints true\n    GameFuseUser.CurrentUser.SetAttribute(\"CURRENT_LEVEL\", \"5\", function(message,hasError){self.SetAttributeCallback(message,hasError)});\n}\n\nSetAttributeCallback(message, hasError) {\n  if (hasError)\n  {\n      console.log(\"Error setting attribute: \"+message);\n  }\n  else\n  {\n      console.log(GameFuseUser.CurrentUser.GetAttributeValue(\"CURRENT_LEVEL\")); // Prints \"5\"\n  }\n}\n</code></pre> <p>ou can also batch update a custom dictionary of key value pairs like this, or set local attributes then sync them all at once later. Dirty Attributes can be checked at any time to see which keys are not synced with the database.</p> <pre><code>Start(){\n    console.log(GameFuseUser.CurrentUser.attributes.Count);  // Prints 0\n    attributesToUpdate = {{ \"POINTS\": \"1000\" },{ \"LEVEL\": \"5\" },{ \"CHARACTER\": \"Ninja\" }};\n    GameFuseUser.CurrentUser.setAttributes(attributesToUpdate, function(message,hasError){self.setAttributesCallback(message,hasError)});\n}\n\nsetAttributesCallback(message, hasError) {\n  if (hasError)\n  {\n      console.log(\"Error setting attribute: \"+message);\n  }\n  else\n  {\n      console.log(\"Batch update complete\");\n      console.log(GameFuseUser.CurrentUser.getAttributeValue(\"POINTS\")); // Prints \"1000\"\n      console.log(GameFuseUser.CurrentUser.getAttributeValue(\"LEVEL\")); // Prints \"5\"\n      GameFuseUser.CurrentUser.setAttributeLocal(\"POINTS\", \"2000\"); //will set locally but not sync with db\n      GameFuseUser.CurrentUser.setAttributeLocal(\"LEVEL\", \"6\"); //will set locally but not sync with db\n      console.log(\"Dirty Vars\");  //will print variables changed locally\n      console.log(GameFuseUser.CurrentUser.getDirtyAttributes());\n      GameFuseUser.CurrentUser.syncLocalAttributes(function(message,hasError){self.attributesSynced(message,hasError)}); //will update \"SCORE\" + \"LEVEL\"\n  }\n}\nattributesSynced(message, hasError){\n  if (hasError)\n  {\n      console.log(\"Error syncing attributes: \"+message);\n  }\n  else\n  {\n      console.log(\"Sync Success\");\n      console.log(\"Dirty Vars\"); //will be empty now that sync is done\n      console.log(GameFuseUser.CurrentUser.getDirtyAttributes());\n  }\n}\n</code></pre> <pre><code>* 400 - each attribute a 'key' and 'value' parameter\n* 400 - missing or invalid parameters\n* 500 - unknown server error\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/forgot%20password/","title":"Forgot Password","text":"<p>You can implement this simple method in your app and we will handle all the emails and password resets on our end.</p> <p>Once you run this function, our system will send an email to that user if it exists. The email will be branded like your app: it will have your app's name, image logo and color so it will look cohesive. The sender's email is even masked with your app's name.</p> <p>The user will then reset their password online and then will be instructed that they can login into your app.</p> <p>Example</p> <pre><code>Start(){\n    let self = this;\n    GameFuse.sendPasswordResetEmail(\"example@gmail.com, function (message, hasError)\n    {\n        if (hasError)\n        {\n            alert(\"Something went wrong...\");\n        }\n        else\n        {\n            alert(\"A link to reset your password has been sent to your email!\");\n        }\n    });\n}\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/forgot%20password/#function-return-values","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/forgot%20password/#gamefusesendpasswordresetemail","title":"<code>GameFuse.SendPasswordResetEmail</code>","text":"HTTP status code Description <code>200</code> OK <code>403</code> Invalid email address <code>404</code> No user found with the specified email, or GameID or Token incorrect <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/forgot%20password/#user-experience","title":"User Experience","text":"<p>See Generic: Forgot password - User experience.</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/","title":"Managing Friends","text":"<p>GameFuse provides methods to manage friends, including retrieving the list of friends, incoming friend requests, and outgoing friend requests. This documentation covers how to use these methods.</p> <p>Note</p> <p>This feature is not supported in the js client library yet.</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Retrieving Friends</li> <li>Retrieving Incoming Friend Requests</li> <li>Retrieving Outgoing Friend Requests</li> <li>Sending Friend Requests</li> <li>Handling Friend Requests</li> <li>Accepting Friend Requests</li> <li>Declining Friend Requests</li> <li>Cancelling Friend Requests</li> <li>Removing Friends</li> <li>Example Usage</li> </ul>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#retrieving-friends","title":"Retrieving Friends","text":"<p>To retrieve the list of friends for the current user:</p> <pre><code>// Retrieve the list of friends\nconst friends = GameFuseUser.CurrentUser.getFriends();\nconsole.log(\"Friends: \", friends);\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#retrieving-incoming-friend-requests","title":"Retrieving Incoming Friend Requests","text":"<p>To retrieve the list of incoming friend requests for the current user:</p> <pre><code>// Retrieve the list of incoming friend requests\nconst incomingFriendRequests = GameFuseUser.CurrentUser.getIncomingFriendRequests();\nconsole.log(\"Incoming Friend Requests: \", incomingFriendRequests);\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#retrieving-outgoing-friend-requests","title":"Retrieving Outgoing Friend Requests","text":"<p>To retrieve the list of outgoing friend requests for the current user:</p> <pre><code>// Retrieve the list of outgoing friend requests\nconst outgoingFriendRequests = GameFuseUser.CurrentUser.getOutgoingFriendRequests();\nconsole.log(\"Outgoing Friend Requests: \", outgoingFriendRequests);\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#sending-friend-requests","title":"Sending Friend Requests","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#sending-friend-requests-by-user-name","title":"Sending Friend Requests by User Name","text":"<p>To send a friend request by user name:</p> <pre><code>// Send a friend request by username\nasync function sendFriendRequestByUsername(username) {\n    try {\n        await GameFuseFriendRequest.send(username);\n        console.log(\"Friend request sent successfully\");\n    } catch (error) {\n        console.error(\"Failed to send friend request:\", error);\n    }\n}\n\n// Usage example\nsendFriendRequestByUsername(\"otherUsername\");\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#sending-friend-requests-by-user-object","title":"Sending Friend Requests by User Object","text":"<p>To send a friend request using a GameFuseUser object:</p> <pre><code>// Send a friend request using a GameFuseUser object\nasync function sendFriendRequestByUser(user) {\n    try {\n        await user.sendFriendRequest();\n        console.log(`Friend request sent to ${user.getUsername()}`);\n    } catch (error) {\n        console.error(\"Failed to send friend request:\", error);\n    }\n}\n\n// Assume 'otherUser' is a GameFuseUser object representing another user\nconst otherUser = new GameFuseUser(/* user details */);\nsendFriendRequestByUser(otherUser);\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#handling-friend-requests","title":"Handling Friend Requests","text":"<p>You can also handle friend requests by accepting declining or cancelling them.</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#accepting-friend-requests","title":"Accepting Friend Requests","text":"<p>Here is an example of how to accept an incoming friend request:</p> <pre><code>// Accept an incoming friend request\nasync function acceptFriendRequest(friendRequest) {\n    try {\n        await friendRequest.accept();\n        const senderUsername = friendRequest.getOtherUser().getUsername();\n        console.log(`Friend request from ${senderUsername} accepted`);\n    } catch (error) {\n        console.error(\"Failed to accept friend request:\", error);\n    }\n}\n\n// Usage example\n// Accept all incoming friend requests\nasync function acceptAllFriendRequests() {\n    const incomingRequests = GameFuseUser.CurrentUser.getIncomingFriendRequests();\n    if (incomingRequests.length &gt; 0) {\n        for (const request of incomingRequests) {\n            await acceptFriendRequest(request);\n        }\n    } else {\n        console.log(\"No incoming friend requests\");\n    }\n}\n\nacceptAllFriendRequests();\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#declining-friend-requests","title":"Declining Friend Requests","text":"<p>Similarly, you can decline a friend request:</p> <pre><code>// Decline an incoming friend request\nasync function declineFriendRequest(friendRequest) {\n    try {\n        await friendRequest.decline();\n        const senderUsername = friendRequest.getOtherUser().getUsername();\n        console.log(`Friend request from ${senderUsername} declined`);\n    } catch (error) {\n        console.error(\"Failed to decline friend request:\", error);\n    }\n}\n\n// Usage example\nasync function handleIncomingRequests() {\n    const incomingRequests = GameFuseUser.CurrentUser.getIncomingFriendRequests();\n    if (incomingRequests.length &gt; 0) {\n        await declineFriendRequest(incomingRequests[0]);\n    } else {\n        console.log(\"No incoming friend requests\");\n    }\n}\n\nhandleIncomingRequests();\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#cancelling-friend-requests","title":"Cancelling Friend Requests","text":"<p>Finally, you can cancel an outgoing friend request:</p> <pre><code>// Cancel an outgoing friend request\nasync function cancelFriendRequest(friendRequest) {\n    try {\n        await friendRequest.cancel();\n        const receiverUsername = friendRequest.getOtherUser().getUsername();\n        console.log(`Friend request to ${receiverUsername} canceled`);\n    } catch (error) {\n        console.error(\"Failed to cancel friend request:\", error);\n    }\n}\n\n// Usage example\nasync function handleOutgoingRequests() {\n    const outgoingRequests = GameFuseUser.CurrentUser.getOutgoingFriendRequests();\n    if (outgoingRequests.length &gt; 0) {\n        await cancelFriendRequest(outgoingRequests[0]);\n    } else {\n        console.log(\"No outgoing friend requests to cancel\");\n    }\n}\n\nhandleOutgoingRequests();\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#removing-friends","title":"Removing Friends","text":"<p>To remove a user from your friends list:</p> <pre><code>async function unfriendUser(user) {\n    try {\n        await user.unfriend();\n        console.log(`User ${user.getUsername()} unfriended successfully`);\n    } catch (error) {\n        console.error(`Failed to unfriend user ${user.getUsername()}:`, error);\n    }\n}\n\n// Example usage\nasync function exampleUnfriendUsage() {\n    // Retrieve the list of friends\n    const friends = GameFuseUser.CurrentUser.getFriends();\n\n    if (friends.length &gt; 0) {\n        // Unfriend the first user in the friends list\n        const friendToUnfriend = friends[0];\n        await unfriendUser(friendToUnfriend);\n    } else {\n        console.log(\"No friends available to unfriend\");\n    }\n}\n\n// Call the example usage function\nexampleUnfriendUsage();\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/friends/#example-usage","title":"Example Usage","text":"<p>Here is an example of how to use the above methods to manage friends:</p> <pre><code>// Example usage of the above methods\nasync function manageFriends() {\n    try {\n        // Send a friend request\n        await GameFuseFriendRequest.send(\"myNewFriend\");\n        console.log(\"Friend request sent successfully\");\n\n        // Monitor the status of outgoing friend requests\n        let outgoingRequests = GameFuseUser.CurrentUser.getOutgoingFriendRequests();\n        while (outgoingRequests.length &gt; 0) {\n            console.log(\"Friend request is still pending...\");\n            // Wait for 1 second before checking again\n            await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n            outgoingRequests = GameFuseUser.CurrentUser.getOutgoingFriendRequests();\n        }\n\n        // Retrieve the updated friends list after the request is accepted\n        const friends = GameFuseUser.CurrentUser.getFriends();\n        console.log(\"Friends:\", friends);\n\n        // Send a message to the new friend\n        const friend = friends.find(user =&gt; user.getUsername() === \"myNewFriend\");\n        if (friend) {\n            await friend.sendMessage(\"Hello, how are you?\");\n            console.log(\"Message sent to friend\");\n        }\n\n        // Remove the friend\n        await friend.unfriend();\n        console.log(\"Friend removed successfully\");\n    } catch (error) {\n        console.error(\"An error occurred:\", error);\n    }\n}\n\n// Call the manageFriends function\nmanageFriends();\n</code></pre> <p>This documentation provides an overview of how to manage friends and handle friend requests using the GameFuse SDK.</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/game%20connection%20and%20variables/","title":"Game Connection and Variables","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/game%20connection%20and%20variables/#connecting-to-gamefuse","title":"Connecting to GameFuse","text":"<p>The first step in using GameFuse after it is installed, and your account is registered, is to run the <code>SetUpGame</code> function. After this you can run other functions to register and sign-in other users, and read and write game data.</p> <p>Inside any script, on your first scene, you can run:</p> <p>Example</p> <pre><code>start ()\n{\n    var gameID = '1';\n    var gameToken 'cde456';\n\n    // The third parameter is the function below.\n    // GameFuse calls this function when it completes setting up your game.\n    let self = this;\n    GameFuse.setUpGame(gameID, gameToken, function(message,hasError){self.gameSetUp(message,hasError)}, true);\n}\n\ngameSetUp(message, hasError)\n{\n    if (hasError)\n    {\n        console.log(\"Error connecting game: \"+message);\n    }\n    else\n    {\n        console.log(\"Game Connected Successfully\")\n        foreach (GameFuseStoreItem storeItem in GameFuse.GetStoreItems())\n        {\n            console.log(storeItem.getName() + \": \" + storeItem.getCost());\n        }\n    }\n}\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/game%20connection%20and%20variables/#function-return-values","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/game%20connection%20and%20variables/#gamefusesetupgame","title":"<code>GameFuse.setUpGame</code>","text":"HTTP status code Description <code>200</code> OK <code>401</code> Failed to verify game <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/game%20connection%20and%20variables/#game-variables","title":"Game Variables","text":"<p>Your game variables will be downloaded when you verify and connect with you game, but you can also re-fetch them whenever you like.</p> <p>Inside any script use these functions:</p> <p>Example</p> <p>```jsx void Start () {     var gameID = '1';     var gameToken 'cde456';</p> <pre><code>// The third parameter is the function below.\n// GameFuse calls this function when it completes setting up your game.\nGameFuse.fetchGameVariables(gameID, gameToken, function(message,hasError){self.variablesFetched(message,hasError)});\n</code></pre> <p>}</p> <p>void variablesFetched(string message, bool hasError) {     if (hasError)     {         console.log(\"Error connecting game: \"+message);     }     else     {         console.log(\"Game Connected Successfully\")         console.log(<code>Game Variables: ${GameFuse.Instance.GetGameVariable({your key})}</code>)     } }</p> <p>```</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/game%20connection%20and%20variables/#function-return-values_1","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/game%20connection%20and%20variables/#gamefusefetchgamevariables","title":"<code>GameFuse.fetchGameVariables</code>","text":"HTTP status code Description <code>200</code> OK <code>401</code> Failed to fetch game variables. Check your Game ID and token <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/getting%20started/","title":"JS Playcanvas, PixiJS, BabylonJS","text":"<p>Use GameFuse C# in your Unity project to easily add:</p> <p>Authentication User Data Leaderboards In Game Store Friends Groups Messages Server Keys</p> <p>The first step of integrating GameFuse with your project, is to make an account</p> <p>Sign Up</p> <p>After creating your account, add your first game and note the ID and API Token.</p> <p>With this setup, you can now connect via your game client</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/getting%20started/#pixijs-babylonjs-etc","title":"PixiJs, BabylonJs, etc","text":"<p>If your game engine has an editable HTML file, you can paste the following tag in the header of the HTML document:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/gh/game-fuse/game-fuse-js@main/V2/gameFuseFull.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/getting%20started/#playcanvas","title":"Playcanvas","text":"<p>Playcanvas has a different method. In your scene, go to the settings wheel on the top bar, then click on external scripts on the opened left panel. Finally paste the following:</p> <pre><code>\"https://cdn.jsdelivr.net/gh/game-fuse/game-fuse-js@main/V2/gameFuseFull.js\".\n</code></pre> <p>This does the same thing as the previous method on build.</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/getting%20started/#examples","title":"Examples","text":"<p>If you would like to see examples in action, check them out here:</p> <p>Phaser.io Flappy Bird Example PixiJS Flappy Bird Example Babylon JS Example Playcanvas Example</p>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/in%20game%20leaderboard/","title":"In Game Leaderboard (JS)","text":"<p>Leaderboards can be easily created within GameFuse from the Unity game client. A leaderboard entry can be added with:</p> <ul> <li><code>leaderboard_name</code></li> <li><code>score</code></li> <li><code>extra_attributes</code> (metadata)</li> </ul> <p>for the current signed in user.</p> <p>Leaderboards can be downloaded for a specific <code>leaderboard_name</code>, which would gather and sort the high scores for all users in the game. Leaderboards can also be downloaded for a specific user.</p> <p>The example below shows submitting 2 leaderboard entries, then retrieving them for the game, and for the current user.</p> <p>Example</p> <pre><code>Start()\n{\n    let self = this\n    var extraAttributes = {};\n    extraAttributes[\"deaths\"] =  \"15\";\n    extraAttributes[\"Jewels\"] =  \"12\";\n    GameFuseUser.CurrentUser.AddLeaderboardEntry(\"Game1Leaderboard\",10, extraAttributes, function(message,hasError){self.LeaderboardEntryAdded(message,hasError)});\n}\n\nLeaderboardEntryAdded(message, hasError)\n{\n    let self = this;\n    if (hasError)\n    {\n        print(\"Error adding leaderboard entry: \" + message);\n    }\n    else\n    {\n        print(\"Set Leaderboard Entry 2\");\n        var extraAttributes = {};\n        extraAttributes.[\"deaths\"] = \"25\";\n        extraAttributes.[\"Jewels\"] = \"15\";\n\n        GameFuseUser.CurrentUser.AddLeaderboardEntry(\"Game1Leaderboard\", 7, extraAttributes, function(message,hasError){self.LeaderboardEntryAdded2(message,hasError)});\n    }\n}\n\nLeaderboardEntryAdded2(message, hasError)\n{\n    let self = this;\n    if (hasError)\n    {\n        print(\"Error adding leaderboard entry 2: \" + message);\n    }\n    else\n    {\n        print(\"Set Leaderboard Entry 2\");\n        GameFuseUser.CurrentUser.GetLeaderboard(5, true, function(message,hasError){self.LeaderboardEntriesRetrieved(message,hasError)});\n    }\n}\n\nLeaderboardEntriesRetrieved(message, hasError)\n{\n    if (hasError)\n    {\n        print(\"Error loading leaderboard entries: \" + message);\n    }\n    else\n    {\n        let self = this;\n        print(\"Got leaderboard entries for specific user!\");\n        for (const entry of GameFuse.Instance.leaderboardEntries)\n        {\n            console.log(entry.getUsername() + \": \" + entry.getScore().toString() + \": \" + entry.getLeaderboardName());\n            const extraAttributes = entry.getExtraAttributes();\n            for (const key in extraAttributes)\n            {\n                console.log(key + \": \" + extraAttributes[key]);\n            }\n        }\n        GameFuse.Instance.GetLeaderboard(5, true, \"Game1Leaderboard\", function(message,hasError){self.LeaderboardEntriesRetrievedAll(message,hasError)});\n    }\n}\n\nLeaderboardEntriesRetrievedAll(message, hasError)\n{\n    if (hasError)\n    {\n        print(\"Error loading leaderboard entries: \" + message);\n    }\n    else\n    {\n        let self = this;\n        print(\"Got leaderboard entries for whole game!\");\n        for (const entry of GameFuse.Instance.leaderboardEntries)\n        {\n            console.log(entry.getUsername() + \": \" + entry.getScore().toString() + \": \" + entry.getLeaderboardName());\n            const extraAttributes = entry.getExtraAttributes();\n            for (const key in extraAttributes) {\n                console.log(key + \": \" + extraAttributes[key]);\n            }\n        }\n    }\n}\n</code></pre> <p>You can also clear all leaderboard entries in a specific leaderboard for the current user like this:</p> <p>Example</p> <pre><code>Start()\n{\n    let self = this;\n    var extraAttributes = {};\n    extraAttributes[\"deaths\"] = \"15\";\n    extraAttributes[\"Jewels\"] = \"12\";\n    GameFuseUser.CurrentUser.AddLeaderboardEntry(\"Game2Leaderboard\",10, extraAttributes, function(message,hasError){self.LeaderboardEntryAdded(message,hasError)});\n}\n\nLeaderboardEntryAdded(message, hasError)\n{\n    let self = this;\n    if (hasError)\n    {\n        print(\"Error adding leaderboard entry: \" + message);\n    }\n    else\n    {\n        print(\"Clear Leaderboard Entry 2\");\n        GameFuseUser.CurrentUser.ClearLeaderboardEntries(\"Game2Leaderboard\", function(message,hasError){self.LeaderboardEntryCleared(message,hasError)});\n    }\n}\n\nLeaderboardEntryCleared(message, hasError)\n{\n    if (hasError)\n    {\n        print(\"Error adding leaderboard entry: \" + message);\n    }\n    else\n    {\n        print(\"User will no longer have leaderboard entries for 'Game2Leaderboard'\");\n    }\n}\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/in%20game%20leaderboard/#function-return-values","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/in%20game%20leaderboard/#gamefuseusercurrentuseraddleaderboardentry","title":"<code>GameFuseUser.CurrentUser.AddLeaderboardEntry</code>","text":"HTTP status code Description <code>200</code> OK <code>400</code> Invalid extra attributes <code>401</code> Can only add entries for current user <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/in%20game%20leaderboard/#gamefuseusercurrentusergetleaderboard","title":"<code>GameFuseUser.CurrentUser.GetLeaderboard</code>","text":"HTTP status code Description <code>200</code> OK <code>401</code> Can only get entries for the current user <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/in%20game%20leaderboard/#gamefuseusercurrentuserclearleaderboardentries","title":"<code>GameFuseUser.CurrentUser.ClearLeaderboardEntries</code>","text":"HTTP status code Description <code>200</code> OK <code>401</code> Can only clear entries for the current user <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/in%20game%20leaderboard/#gamefuseinstancegetleaderboard","title":"<code>GameFuse.Instance.GetLeaderboard</code>","text":"HTTP status code Description <code>200</code> OK <code>404</code> No entries for this leaderboard name <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/signing%20game%20users%20in/","title":"Sign-in game users","text":"<p>The sign-in process follows the same rules as signing up, just with different parameters. There is a callback function  to let you know your sign-in has been successful or not.</p> <p>Email and password, not the username, will be used to sign-in.</p> <p>Example</p> <pre><code>// Feed in your users email and password here\nsignIn (email, password, SignedIn)\n{\n    // The third parameter is the callback when execution is complete.\n    let self = this;\n    GameFuse.signIn(this.userEmail, \"password\", function(message,hasError){self.signedIn(message,hasError)});\n}\n\nsignedIn(message, hasError)\n{\n    if (hasError)\n    {\n        console.log(\"Error signign in: \"+message);\n    }\n    else\n    {\n        console.log(\"Logged In: \" + GameFuseUser.CurrentUser.getUsername());\n        console.log(\"Current Credits: \" + GameFuseUser.CurrentUser.getCredits());\n    }\n}\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/signing%20game%20users%20in/#function-return-values","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/signing%20game%20users%20in/#gamefusesignin","title":"<code>GameFuse.signIn</code>","text":"HTTP status code Description <code>200</code> OK <code>402</code> Game is disabled (check the GameFuse dashboard) <code>404</code> Incorrect password or user not found <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/signing%20game%20users%20up/","title":"Signing game users up","text":"<p>Enable users to sign up in your Unity game with the following code. These users will be saved in your GameFuse game and can then login from other devices, since the data is saved online.</p> <p>Add a method on a script in your sign-up scene after you have collected  the inputted <code>username</code> and <code>password</code>. You can create a function connected    to buttons for submit and register operations.</p> <p>The <code>username</code> parameter is mandatory but it is just for display. Later sign-in  attempts will use the <code>email</code>, not the <code>username</code>.</p> <p>Example</p> <pre><code>// Feed in your users email, username and password here.\nsignUp (email, password, password_confirmation, username)\n{\n    // The fith parameter is the callback when execution is complete.\n    let self = this;\n    GameFuse.signUp(this.userEmail, \"password\", \"password\", this.username, function(message,hasError){self.signedUp(message,hasError)});\n}\n\nsignedUp(message, hasError)\n{\n    if (hasError)\n    {\n        console.log(\"Error signign up: \"+message);\n    }\n    else\n    {\n        console.log(\"Signed Up: \" + GameFuseUser.CurrentUser.getUsername());\n    }\n}\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/signing%20game%20users%20up/#function-return-values","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/signing%20game%20users%20up/#gamefusesignup","title":"<code>GameFuse.signUp</code>","text":"HTTP status code Description <code>200</code> OK <code>404</code> Failed to fetch game variables. Check your token and Game ID <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/using%20credits/","title":"Using Credits","text":"<p>Credits are a numeric attribute of each game user. It is a simple integer value that you can add manually.</p> <p>Credits are automatically detracted upon store item purchases.</p> <p>What you find in the example below is a script that demonstrates the full lifecycle of credits of a signed-in user. The <code>Start</code> function executes these operations in order:</p> <ol> <li>prints the credits your signed in user has</li> <li>prints the cost of the first store item</li> <li>adds credits to your user</li> </ol> <p>Because the third operation syncs with the server it requires a callback.</p> <p>Upon success you will see that the user now has more credits when logged.</p> <p>Finally you can run the purchase store item function successfully.</p> <p>Example</p> <pre><code>Start()\n{\n    let self = this;\n    console.log(GameFuseUser.CurrentUser.getCredits());  // Prints 0\n    console.log(GameFuse.getStoreItems()[0].cost) // Prints 25 (or whatever you set your first item to on the web dashboard)\n    GameFuseUser.CurrentUser.AddCredits(50, function(message,hasError){self.AddCreditsCallback(message,hasError)});\n}\n\nAddCreditsCallback(message, hasError)\n{\n    if (hasError)\n    {\n        console.log(\"Error adding credits: \" + message);\n    }\n    else\n    {\n        let self = this;\n        console.log(GameFuseUser.CurrentUser.getCredits();  // Prints 50.\n        GameFuseUser.PurchaseStoreItem(GameFuse.GetStoreItems()[0], function(message,hasError){self.PurchasedItemCallback(message,hasError)})\n    }\n}\n\nPurchasedItemCallback(message, hasError)\n{\n    if (hasError)\n    {\n        console.log(\"Error purchasing item: \"+message);\n    }\n    else\n    {\n        console.log(\"Purchased Item\");\n        console.log(\"Current Credits: \" + GameFuseUser.CurrentUser.GetCredits());\n    }\n}\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/using%20credits/#function-return-values","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/using%20credits/#gamefuseusercurrentuseraddcredits","title":"<code>GameFuseUser.CurrentUser.AddCredits</code>","text":"HTTP status code Description <code>200</code> OK <code>400</code> Credits parameter missing <code>500</code> Unknown server error"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/using%20the%20store%20in%20your%20game/","title":"Using the store in your game","text":"<p>Store items are downloaded upon <code>SignIn()</code> and <code>SignUp()</code>. The items will be refreshed every time the user signs in or signs up again.</p> <p>To access store items and attributes call the following code. This code does not sync them with the available items on the server: it simply shows you the results downloaded on sign-in or sign-up.</p> <p>Example</p> <pre><code>for (const storeItem of GameFuse.getStoreItems())\n{\n    console.log(storeItem.getName());  // FireBow\n    console.log(storeItem.getCategory()); // BowAndArrows\n    console.log(storeItem.getId()); //12\n    console.log(storeItem.getDescription());  // A bow and arrow item that shoots fire arrows\n    console.log(storeItem.getCost()); // 500 (credits)\n    console.log(storeItem.getIconUrl()); // (url of image associated with the store item)\n}\n</code></pre> <p>To access purchased store items by your current logged in user, call the following code. Because these items are downloaded on login, there is no callback for this: data is already available. This code will throw an error if you are not signed in already.</p> <pre><code>const items = GameFuseUser.CurrentUser.getPurchasedStoreItems();\n</code></pre> <p>To purchase a store item simply call the code below. Because this function talks to the server, it will require a callback. If the user does not have enough credits on their account (see next section), the purchase will fail. This function will refresh the <code>GameFuseUser.CurrentUser.purchasedStoreItems</code> list with the new item.</p> <p>Example</p> <pre><code>PurchaseItem(store_item)\n{\n    let self = this;\n    console.log(GameFuseUser.CurrentUser.getPurchasedStoreItems().length); // Prints 0\n    GameFuseUser.PurchaseStoreItem(GameFuse.GetStoreItems().First, function(message,hasError){self.PurchasedItemCallback(message,hasError)})\n}\n\nPurchasedItemCallback(message, hasError)\n{\n    if (hasError)\n    {\n        console.log(\"Error purchasing item: \"+message);\n    }\n    else\n    {\n        console.log(\"Purchased Item\");\n        console.log(GameFuseUser.CurrentUser.getPurchasedStoreItems().length); // Prints 1\n    }\n}\n</code></pre>"},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/using%20the%20store%20in%20your%20game/#function-return-values","title":"Function return values","text":""},{"location":"JS%20Playcanvas%2C%20PixiJS%2C%20BabylonJS/using%20the%20store%20in%20your%20game/#gamefuseuserpurchasestoreitem","title":"<code>GameFuseUser.PurchaseStoreItem</code>","text":"HTTP status code Description <code>200</code> OK <code>403</code> Not enough credits or item already purchased <code>404</code> Item not found <code>500</code> Unknown server error"},{"location":"generic/cloud_code/","title":"Cloud code","text":"<p>ADD IN CLOUD CODE TRIGGER  / QUERY FUNCTION INFO HERE</p>"},{"location":"generic/creating_store_items_on_the_web/","title":"Creating Store Items","text":"<p>To create store items on the web, navigate to your GameFuse.co home page, and sign in if you are not already.</p> <p>You can click on your Game on the homepage you want to add items for. On this page if you scroll down to the Store Items section, you will see the <code>+ STORE ITEM</code> button, here you can add in:</p> <ul> <li><code>Name</code></li> <li><code>Cost</code></li> <li><code>Description</code></li> <li><code>Category</code></li> </ul> <p>All are mandatory but do not need to used in your game.</p> <p>The store feature does not integrate real payment systems. This is for items you want your users to be able to unlock with in-game currency (credits) or with achievements in the game. How you configure that is up to you.</p>"},{"location":"generic/forgot_password/","title":"Forgot password","text":""},{"location":"generic/forgot_password/#user-experience","title":"User Experience","text":"<p>After executing the API call, the user will receive an email looking like the following</p> <p></p> <p>When the user clicks on the forgot password link, they will see something like this</p> <p></p> <p>After resetting a password, the user will be notified that they can return to their game and login</p>"},{"location":"generic/service_key_access/","title":"Service Keys","text":""},{"location":"generic/service_key_access/#intro","title":"Intro","text":"<p>Accessing the GameFuse API via a 3rd party server such as a multiplayer server is easy.  It is reccomended to make manual API calls manually rather than use any of GameFuse's libraries, those were designed for implementation in the game client itself and are archetected around user integration, not 3rd party server integration.  </p>"},{"location":"generic/service_key_access/#usage","title":"Usage","text":"<p>In your 3rd party server code, you can hit any API endpoint \"on behalf\" of any user in your system.  You can for instance update a users credits, add a LeaderboardEntry, add a GameRound or more on behalf of certain users.  The API takes in addition to the standard user token authentication, also a \"service key\" authentication. An easy example to understand this is when a multiplayer round is done, the multiplayer server itself submits all the players scores to create new LeaderboardEntries on GameFuse. This frees up the game client from having to implement this, and prevents hacking since the user's devices are no longer sending HTTP requests that could be modified with improved scores.</p>"},{"location":"generic/service_key_access/#enabling","title":"Enabling","text":"<p>First, navigate to your game on the https://gamefuse.co/games page, then click on the right-most tab \"Service Keys\".  Once that page has loaded you can create a new service key to use, it never expires unless you delete the key.</p>"},{"location":"generic/service_key_access/#usage_1","title":"Usage","text":"<p>On your 3rd party server you can now call any request in the API but instead of having an 'authentication-token' header, you can add 'service-key-name', 'service-key-token', and 'current-user-id', and the API will process the appropriate action on behalf of the user indicated by 'current-user-id'.</p>"},{"location":"generic/service_key_access/#example","title":"Example","text":"<p>Example</p>"},{"location":"generic/service_key_access/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"service-key-name: photon-key\" \\\n    --header \"service-key-token: zdflkjd-sf38sfl-394lkejs-dfj209\" \\\n    --header \"current-user-id: 1\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"score\": 21, \"leaderboard_name\": \"leaderboard test\", \"metadata\": {\"level\": \"10\", \"color\": \"blue\"}}' \\\n    \"https://gamefuse.co/api/v3/users/1/add_leaderboard_entry\"\n</code></pre>"},{"location":"generic/service_key_access/#response","title":"Response","text":"<p>Upon success user object is now returned with code 200 - indicating the leaderboard entry has been saved</p> <pre><code>{\n    \"id\": 1,\n    \"username\": \"john.doe\",\n    \"email\": \"_appid_1_john.doe@example.com\",\n    \"display_email\": \"john.doe@example.com\",\n    \"credits\": 125,\n    \"score\": 10134,\n    \"last_login\": \"2022-01-15T10:30:00Z\",\n    \"number_of_logins\": 34,\n    \"authentication_token\": \"abc123\",\n    \"events_total\": 15,\n    \"events_current_month\": 7,\n    \"game_sessions_total\": 51,\n    \"game_sessions_current_month\": 9\n}\n</code></pre>"},{"location":"generic/service_key_access/#route-enabling","title":"Route Enabling","text":"<p>On the same page as you create new service keys, you can also enable and disable routes.  Check and uncheck the boxes from each row to enable/disable the route via \"Game User Access\" or \"Service Key Access\".  This enables developers to prevent client hacking.  If you disable the Game User Access for all leaderboard routes for instance, game clients will be locked out of updating any leaderboard entries.  In this case only the 3rd party server will be able to update the leaderboard, preventing game clients from faking HTTP requests and manipulating data on their own.</p>"},{"location":"generic/test/","title":"System Admin Test Suite API","text":"<p>The Test Suite API allows system admins to perform testing actions such as creating games, users, and cleaning up test data. These functions are only accessible to system admins with the appropriate service key.</p>"},{"location":"generic/test/#authentication","title":"Authentication","text":"<p>To authenticate, include the following headers in your request:</p> Header Name Type Description <code>service-key-token</code> string The token of the service key to authenticate with. <code>service-key-name</code> string The name of the service key. This ensures that the correct service key is used for authentication. <p>System service keys can be generated in rails console with the following command</p> <p>Example</p> <pre><code>    token = SecureRandom.uuid\n    name = \"token_name\"\n    ServiceKey.create(for_system_admin:true, name:name, \n    token: token)\n    puts \"Your service-key-token is '#{token}' and your service-key-name is '#{name}'\"\n</code></pre>"},{"location":"generic/test/#create-a-game","title":"Create a Game","text":""},{"location":"generic/test/#scope","title":"Scope","text":"<p>Create a new game in the system. This will also create an associated account holder and link the game to the service key for easy retrieval in subsequent requests.</p>"},{"location":"generic/test/#method","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/test_suite/create_game\n</code></pre>"},{"location":"generic/test/#headers","title":"Headers","text":"Header Name Type Description <code>service-key-token</code> string The token of the service key to authenticate with. <code>service-key-name</code> string The name of the service key. This ensures that the correct service key is used for authentication."},{"location":"generic/test/#responses","title":"Responses","text":"HTTP status code content-type Description <code>201</code> application/json Game created successfully. <code>401</code> text/plain Unauthorized access."},{"location":"generic/test/#response-object","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The ID of the created game. <code>name</code> string The name of the created game. <code>token</code> string Game authentication token."},{"location":"generic/test/#examples","title":"Examples","text":"<p>Example</p>"},{"location":"generic/test/#curl","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    \"https://gamefuse.co/api/v3/test_suite/create_game\"\n</code></pre>"},{"location":"generic/test/#response","title":"Response","text":"<pre><code>{\n  \"id\": 1,\n  \"name\": \"Test Game\",\n  \"token\": \"abc123\"\n}\n</code></pre>"},{"location":"generic/test/#create-a-user","title":"Create a User","text":""},{"location":"generic/test/#scope_1","title":"Scope","text":"<p>Create a new user for a specific game. This is used for testing purposes to quickly add users to a game.</p>"},{"location":"generic/test/#method_1","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/test_suite/create_user\n</code></pre>"},{"location":"generic/test/#attributes","title":"Attributes","text":"Name Type Required Description <code>game_id</code> integer Yes ID of the game to associate the user with. <code>username</code> string Yes Username of the new user. <code>email</code> string Yes Email of the new user."},{"location":"generic/test/#headers_1","title":"Headers","text":"Header Name Type Description <code>service-key-token</code> string The token of the service key to authenticate with. <code>service-key-name</code> string The name of the service key. This ensures that the correct service key is used for authentication."},{"location":"generic/test/#responses_1","title":"Responses","text":"HTTP status code content-type Description <code>201</code> application/json User created successfully. <code>401</code> text/plain Unauthorized access."},{"location":"generic/test/#response-object_1","title":"Response object","text":"Attribute name Type Description <code>id</code> integer The ID of the created user. <code>username</code> string The username of the user. <code>email</code> string The email of the user."},{"location":"generic/test/#examples_1","title":"Examples","text":"<p>Example</p>"},{"location":"generic/test/#curl_1","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"game_id\": 1, \"username\": \"test_user\", \"email\": \"test_user@example.com\"}' \\\n    \"https://gamefuse.co/api/v3/test_suite/create_user\"\n</code></pre>"},{"location":"generic/test/#response_1","title":"Response","text":"<pre><code>{\n  \"id\": 10,\n  \"username\": \"test_user\",\n  \"email\": \"test_user@example.com\"\n}\n</code></pre>"},{"location":"generic/test/#create-a-store-item","title":"Create a Store Item","text":""},{"location":"generic/test/#scope_2","title":"Scope","text":"<p>Create a new store item for a specific game. Store items cannot be created by game user clients, so you can populate a game for testing with this.</p>"},{"location":"generic/test/#method_2","title":"Method","text":"<p>POST</p> <pre><code>/api/v3/test_suite/create_store_item\n</code></pre>"},{"location":"generic/test/#attributes_1","title":"Attributes","text":"Name Type Required Description <code>game_id</code> integer Yes ID of the game to associate the store item with. <code>name</code> string Yes Name of the new store item. <code>description</code> string Yes Readable description. <code>category</code> string Yes Category of item. <code>cost</code> integer Yes Cost (in user credits) of item."},{"location":"generic/test/#headers_2","title":"Headers","text":"Header Name Type Description <code>service-key-token</code> string The token of the service key to authenticate with. <code>service-key-name</code> string The name of the service key. This ensures that the correct service key is used for authentication."},{"location":"generic/test/#responses_2","title":"Responses","text":"HTTP status code content-type Description <code>201</code> application/json Category created successfully. <code>401</code> text/plain Unauthorized access."},{"location":"generic/test/#response-object_2","title":"Response object","text":"Attribute name Type Description <code>game_id</code> integer Yes <code>name</code> string Yes <code>description</code> string Yes <code>category</code> string Yes <code>cost</code> integer Yes"},{"location":"generic/test/#examples_2","title":"Examples","text":"<p>Example</p>"},{"location":"generic/test/#curl_2","title":"cURL","text":"<pre><code>curl --request POST \\\n    --header \"service-key-token: abc123\" \\\n    --header \"service-key-name: test-key\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"game_id\": 1, \"name\": \"Power Sword\", \"description\": \"A sword with special abilities.\", \"category\": \"Weapons\", \"cost\": 500}' \\\n    \"https://gamefuse.co/api/v3/test_suite/create_store_item\"\n</code></pre>"},{"location":"generic/test/#response_2","title":"Response","text":"<pre><code>{\n\"id\": 100,\n\"game_id\": 1,\n\"name\": \"Power Sword\",\n\"description\": \"A sword with special abilities.\",\n\"category\": \"Weapons\",\n\"cost\": 500\n}\n</code></pre>"},{"location":"generic/test/#clean-up-test-data","title":"Clean Up Test Data","text":""},{"location":"generic/test/#scope_3","title":"Scope","text":"<p>Delete a game and all associated data (users, game rounds, etc.). This is a testing utility used to quickly clean up the data created during tests.</p>"},{"location":"generic/test/#method_3","title":"Method","text":"<p>DELETE</p> <pre><code>/api/v3/test_suite/clean_up_test\n</code></pre>"},{"location":"generic/test/#attributes_2","title":"Attributes","text":"Name Type Required Description <code>game_id</code> integer Yes The ID of the game to delete."},{"location":"generic/test/#headers_3","title":"Headers","text":"Header Name Type Description <code>service-key-token</code> string The token of the service key to authenticate with. <code>service-key-name</code> string The name of the service key. This ensures that the correct service key is used for authentication."},{"location":"generic/test/#responses_3","title":"Responses","text":"HTTP status code content-type Description <code>200</code> application/json Game and associated data deleted successfully. <code>401</code> text/plain Unauthorized access."},{"location":"generic/test/#response-object_3","title":"Response object","text":"Attribute name Type Description <code>message</code> string Success message confirming that the game and associated data were deleted."},{"location":"generic/test/#examples_3","title":"Examples","text":"<p>Example</p>"},{"location":"generic/test/#curl_3","title":"cURL","text":"<pre><code>curl --request DELETE \\\n    --header \"authentication-token: abc123\" \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"game_id\": 1}' \\\n    \"https://gamefuse.co/api/v3/test_suite/clean_up_test\"\n</code></pre>"},{"location":"generic/test/#response_3","title":"Response","text":"<pre><code>{\n  \"message\": \"Everything should have been destroyed!\"\n}\n</code></pre>"}]}